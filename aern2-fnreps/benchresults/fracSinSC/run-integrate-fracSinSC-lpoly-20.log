numer: acG = NoInformation; ac = Exact
denom: acG = NoInformation; ac = Exact
inv: acG = NoInformation; ac = Exact
res: acG = NoInformation; ac = Exact
chebDivideDCT: acGuide = bits 30, minQ = [1.0028261744748045473674003248304019858100959890291360457447086468141645201293669749311072980635373141922173090279102325439453125 ± <2^(-25)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 24
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.997181780274026623523927094819957658739582268561471401651066076691013046241042429404007886067918718045128248878590100204885395287875760301577437414190398804182580094214143857664338471939227323944061545191892823075997271579513723260396637865059232819220369492541067302227020263671875 ± <2^(-24)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.00000020562347332674375396637037668785483152869668448570848272956194215452741642059782712893790442865316329180192362416475155708594115344486272334115064910130489497718496628620795162730707455390371710200210557594265196096452801285380112344797415605682795640151704117781065653458585923558171226604183628876661339618104427155321588919689410512821380113242961315943003958597234909784229774869626535681553442175454911535530434765744594026910259536289799128364074652488745132636393482653199045154352136814679408161055107484571635723114013671875 ± <2^(-22)]; dctAccuracy = bits 21; getAccuracy rEd = bits 21
chebDivideDCT: tryWithDegree: d = 32
chebDivideDCT: tryWithDegree: d = 32; getAccuracy rCd = bits 48
chebDivideDCT: tryWithDegree: d = 32; rCMaxNorm = [0.9971817902775799550797660529647031694858816139478850035294414620656457197163335268142119232712826142841187851577692635446310505923022713122158804745408301643254304039615076833780062492042344189156761849155621281716263073434260825860361672970753012711146968618872880559606309385501544156482436084658338426578438884462229907512664794921875 ± <2^(-48)]
chebDivideDCT: tryWithDegree: d = 32; maxDifferenceC = [0.0000000000000087749712961974145562220101515791146968564337813488705544550025690076386492320057527793334768310242788606635842661032965671539557225441152269801928073241270012429502971526345203507298212495733971733147597586149374691577557174752220370256077755238264613798060951707034713466866184212958177729803836751244220868490631295480957503822952301468145592827418305593063570177168237302004831184432127759250351407908460292155873212586902790215017796476129670706792338916693520156615663497732931907591907061466306805728488236030613973634583270720192265849371914522550318887481905967030970661113542519160546362400054931640625 ± <2^(-46)]; dctAccuracy = bits 45; getAccuracy rEd = bits 25
chebDivideDCT: acGuide = bits 30, minQ = [0.9999999958940392010022544089314601160716549032054198353213590932012721190467163169426738356104777949440176598727703094482421875 ± <2^(-25)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 23
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [1.0000000858237912772904410182529688873593322077430165148865329972868158208598746542778092833967806644081824886302688534457054773139667067106634862748141302817964843833763945076184952318240493839328163608163004347387459951751461903977210501346780035829126939908361540552784458108284814830057274598600022334092954341462770095072141623876350038457535575345288135782486476660684478433894491580646980769429118882836354743952711802983992242718919522157499264793612207561927046224332753243668747700212406925857067108154296875 ± <2^(-23)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000328051063157463388845288639097401184019619273783673664660333710588515411822075632681366330584373890802683126477849067340688027005440634290374718497501581099143320973779291632449499869409582718175535682295420891505940889405929422659275924432730844547902840422582386880546565229524307178902983362239200463477025234242347674148417917050497195221911944114929483323160325338196538917067975110399855902397872536047408639130420155226234146073675550485481415468078742204167553766343123916870957570220308785469143231239286251366138458251953125 ± <2^(-21)]; dctAccuracy = bits 20; getAccuracy rEd = bits 20
chebDivideDCT: tryWithDegree: d = 32
chebDivideDCT: tryWithDegree: d = 32; getAccuracy rCd = bits 46
chebDivideDCT: tryWithDegree: d = 32; rCMaxNorm = [0.999999999998892359270678138687649800447937791019360330342463213974272731660968547846096089238419069300211993331594520293596532600903854704690299692939259593325618592013858976823527687575109991799526918976450997636633099077015725169233606439803662090724571916558025687809707740533072489683772192769693432764913133057376967868346624604559225279977815930650544906423867533012929484579569893553370409571356180052252482294874375569085226231191708429865458279169305609382245092768527489113248328961485906107290458672362174615665058059047034781804084990763925588908023200929164886474609375 ± <2^(-46)]
chebDivideDCT: tryWithDegree: d = 32; maxDifferenceC = [0.00000000000010423074599498719985163979018131777049169168665203054725770514981854400532125837812291230280747672190509325039361188658297127934515205879090633324996065162234710664339657785670013640366664513219067358146531328696707898590643798360600253599792142192471104879256305864930456890754140056404615171260966404394593900493722583209532151794566857403708384981255976953253394765405340393361825821822464069985991755758011669851830854932038898608651542435991002563137566968924163262748167955413700184928209634616418868283523006814256945193918762095107246745185748351636735071280135300937630393747213020105846226215362548828125 ± <2^(-43)]; dctAccuracy = bits 42; getAccuracy rEd = bits 26
chebDivideDCT: acGuide = bits 30, minQ = [4.98496259320344535497514527726542452910819466632361081481609500765106446351637714542448520660400390625 ± <2^(-24)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 45
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.200603310717622390872378512430351029756965426309665903122319332993492426083738711344774833290740811519513684010496057356552145296597443865804650517754752657610373348786514864124205481427598873879612318850580185093633428679589547533780904640933667689406508468802648746743268222215148263844259868829965099925085038032326357715934226410440523124864319429551320344513755340172900234034049587256866552817451758204184562293316889945965713338510486863864666530201051966587278771828536136183351867856572425807826220989227294921875 ± <2^(-45)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000375078425915814505951381370805925071800344967081385672552667588783435475720492472402545579742929141128699131403436771241115218323266068856519983918778165561047770109621330682638700061111251605058995284827370163474884798817767574347248416121178912333551598607178152432050748578754504503476095341897335154516215434508155843098486918082969444022360060969060656989949352412047413741325481972386840392911799740847617251062870246129959243388247411714769295190339755395371315237043193341684795873985929026101656899062908312458830550895072519779205322265625 ± <2^(-41)]; dctAccuracy = bits 42; getAccuracy rEd = bits 29
chebDivideDCT: acGuide = bits 30, minQ = [8.5964660894749985270369907189191094902145215948814085048747638259755170336527877578657041990339848780422471463680267333984375 ± <2^(-26)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 52
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.1163268707852336678676467360127395631100819120647115281234916247383481273117415354072799063480930188160244186035561517209053239917570299613798065266038214751166610672612221486635950410529617186084619704930820605500303132290230830196558789562594025441455074976299338511409597884949107537977397441864013671875 ± <2^(-52)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.00000000000000144339506824480464684132611704540893201647526033343238438533262956096575442634218574005093140019978555800018221814069251185173508429590158121352898575375173614411328027364697307483179849754947341597334682650188852903738734312355518341064453125 ± <2^(-49)]; dctAccuracy = bits 51; getAccuracy rEd = bits 32
chebDivideDCT: acGuide = bits 30, minQ = [2.230488728476319578252884802850624685818610185528821205057767225817555778754205255787028405745076042876462452113628387451171875 ± <2^(-24)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 35
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.448332236426499622396089649267408183199337530291813854948659197981171517245738538632660552391499895059755671869407784848622784625392593123521165786476739451607416865318042499162948555394027216869963673721782623395144610585935517676974319156141105847945826923250933759845793247222900390625 ± <2^(-35)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.0000000002085521627392634205198989408917478649381859049201424540965035464439513843231911100848130421308268265996528673720814961592197262991991565140790740499646417033335316930807583560028204159337946586265473910800978710937960889603694191335091288982551513081303275464013128516688651690078868650808904619952659614501450117658398679511485474895974824888221452621670704143980480634863752094687090755154583797258581765177170167586782114987567559982087333084704265839046689099987487030260008673923701039288125590014100207980618506553582847118377685546875 ± <2^(-32)]; dctAccuracy = bits 32; getAccuracy rEd = bits 27
chebDivideDCT: acGuide = bits 30, minQ = [0.9999999992790008993399249101795381814432995937886004846294551515473058138902602795549702519029011682505370117723941802978515625 ± <2^(-27)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 19
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.999999223396384320897888575924533031511550467288971562006960121145772567870023793377159225641006853346921984104845866344706182492824759817773555686382836739797944884878280966754868758072080084557983682158830356247391880577336606229812761269074943858858576021424270645640866779815493570973115412468644064740115178121896717842134606778341143214002080146771421722180273530624436957548095156024391353423811902497223290641452688489615030418401007533501899479040085016406060285296922458819768309012943063862621784210205078125 ± <2^(-19)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.0000032042780943169502132525062751779012875319435372311041175082912375791955770866433993686012345167826745506602477105718959083556110881923535014101778579891710385265015234210945924119066229154896806884500860678801242752528784007568090490377019985939596521704571639468805196699809316947140596437254420097222548711710825068025530336788742750716051114846561433360469976962048634226094750925617692143823302745636164661190072064454076793095954611921967513582755535775455935693509022783169677113938628339184777615855637122876942157745361328125 ± <2^(-18)]; dctAccuracy = bits 17; getAccuracy rEd = bits 17
chebDivideDCT: tryWithDegree: d = 32
chebDivideDCT: tryWithDegree: d = 32; getAccuracy rCd = bits 37
chebDivideDCT: tryWithDegree: d = 32; rCMaxNorm = [0.9999999999981875420385139417604109081048446872184684611020852148301878372262270465981463795837087137186461198532807054671706912412587724231718133259227187580581215554192107501854144371757212230252423714319561659451057840181934609499109035228919353306161761534740460249927230705928234281633423328931438799731972851898990292285082033593710416695960215512822998918948079501283554826291251473347279196046117569165187253187910185886246460085299693377585126575140552455543979244049592564737311278256136962743684229504250264882955434878766915745445555130377357500037760473787784576416015625 ± <2^(-37)]
chebDivideDCT: tryWithDegree: d = 32; maxDifferenceC = [0.0000000000125264161135898796993759663364907245026112897200898433729538396106302257182315981949641114802557477788334445778216422173542348685742347517893648592524848554033721375995904396458910707187294598414984212896090422335964903283435948874249082755148289167165478492844606190267476236906090873724112347742369262068714913697001545866432553054176319688771393520205918876414940936817782705931665571642903556611536616497138886482288142045400278197477152325368850185046084660180371643841911387436979936908964151754150013504678004706143952851005632057829679570886191891805078264181087799311598018903168849647045135498046875 ± <2^(-36)]; dctAccuracy = bits 35; getAccuracy rEd = bits 27
chebDivideDCT: acGuide = bits 30, minQ = [2.12218746452587886309774310500572536571869844668851872829013101295902998799647320993244647979736328125 ± <2^(-25)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 35
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.47121190595593471270808941475999482184890524507082686343110635424835291016439912986272811404116753256191837301062392713843365703659467423000394366103877010260861846490943517908278702173021894086356682878941762883189736329595833495836219010343099611753314268486050928470177321746759966384846920994227518372097635528892305030297489016094255183546747813188155610980731153260708917328433593269783973013268505389570149659390519539248458712823192171489965374580409853564757315156933336307287785160724524757824838161468505859375 ± <2^(-35)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000206969783469086621750688666040016078007649071370813167892370318906664789921724528778430565370239697443363905023882296794949993306460238576934350017045116607683703056203147549675567982617325595608374037143079741750514546227646259849917601328617047777369037528940664268589686170614589747884914765767093038427324220692836710905910183089566115636782101199379715667862362465110564027029312958016981406459262222891877618142291388578304314168562579899625395504969882683083041292671183830532930954586571498207865638097047167320852167904376983642578125 ± <2^(-32)]; dctAccuracy = bits 32; getAccuracy rEd = bits 27
chebDivideDCT: acGuide = bits 30, minQ = [8.4512924699089655607089015205585380148681593929065033329807617168416555841758963651955127716064453125 ± <2^(-25)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 52
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.118325096848857849873117123646797981109977047110186677682094880127742396625987115913754476576732341073494845561862184551574517532521832450898283945381491817962652501846573583937384099887628074215788282737707106163365012244671005219799429167547535385632161349981142670726550011166309208277351512343674932924658411047880635938192973761979157230072675023767380792024534265912841529583588103756891093843455486494503307038528569003571946971241066517630003060805253303783075498669473510533756144269545984570868313312530517578125 ± <2^(-52)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.0000000000000018557546168656503096894434994592630768459344450110881652449279553681934349696113869602199142502497319475002277726758656398146688553698769765169112321921896701801416003420587163435397481219368417699666835331273606612967341789044439792633056640625 ± <2^(-48)]; dctAccuracy = bits 51; getAccuracy rEd = bits 31
chebDivideDCT: acGuide = bits 30, minQ = [5.15019058625248384980636712702285569280486919309573715426564612150813454262941398580609442259259367347112856805324554443359375 ± <2^(-24)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 45
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.194167571714612374922129058252440250321363738459364932290064987751879648460506975746456282220470878392153853224469407818648184685879010961835556902200345655563044043813513043570565074786009183253873722272779001594661697107881245745547984957797630784504176021908194993415008866577409207820892333984375 ± <2^(-45)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000199290798932795672717637556461140565162281958047703135037009650984380043278843892148270536785522228563890193274022932592033632783820732499061767355089358764608589104096957493267797552518197299943356917887769407780237373226861361667461156292379833339888622032813827968980168387077318915035692572760666632549768163504565504053222121951271015315759210544786187180255177116724848514031576072032942221311940901106348556523457755985870828561490702333725325689710087158793235601173162134707653261545983575968505642495021135118804522790014743804931640625 ± <2^(-42)]; dctAccuracy = bits 43; getAccuracy rEd = bits 29
chebDivideDCT: acGuide = bits 30, minQ = [0.99999999938466221904527111321925687543089278674579530319358947199920857733123992819833369960491609163000248372554779052734375 ± <2^(-25)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 25
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [1.0000000210298369065005854863705575274464925574093133588188000135074444068453138975066261395125278121493298759926987594283728271060726461907779315677216490559906582038901846394894794845891116067228671212929189317129413709191482827948587179707484740021072866511531174182891845703125 ± <2^(-25)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.00000019616757224596630857697781990444793108368763561683000495806972203459933218287417304403656004803259870578562788987233399329817975208713060857306716496682476112716386933262883123053101981370413223903483170520866392651814334643907651716562137640427968593772003131090412746796029354262605692229850876450121828416773299439497346914610168529085054159263973791070546210179308675884043073799932668191499441830696459575571181400802672457347961212106675210798384952812507578470337043907694643642599857994400502914089656769647262990474700927734375 ± <2^(-22)]; dctAccuracy = bits 21; getAccuracy rEd = bits 21
chebDivideDCT: tryWithDegree: d = 32
chebDivideDCT: tryWithDegree: d = 32; getAccuracy rCd = bits 46
chebDivideDCT: tryWithDegree: d = 32; rCMaxNorm = [1.0000000000012085072048013073229562087291057294963027074149596019432208793317967685131224410825633254386260974062561142888455275997577613725724573388453820410289188272914818397147491007423880341004250766604352519722626064501980086761496117093648867813510113271767588252653476087139642993578607452270998924401648081729565675361966302880903832529250592624154021239811542855267747939335596039085411976842137723579465445382454883189582447105492842847988818249139148497096651655513706463349159125235965807371793526991443659757948969835613269222895742316392642123901168815791606903076171875 ± <2^(-46)]
chebDivideDCT: tryWithDegree: d = 32; maxDifferenceC = [0.000000000000044917931411824396587233072076318269033463081775231104044789150755525617085024965224297073462206970972903734549385855316501203962030374716767667179230778497554784640355149819768646592492367994670910001965596642656899085507043395433242771506949318786796897171147036950866423627668170295148805603419754833119041441260604988461366152534303660158149423606381678843473824058437688716760947324151019528795136843127745929919769247635557974148983660574005662077133043713140723776517759908829808994804322891723473974682545029943393415061148760614282200195879051343050498174191279064475235127673613533261232078075408935546875 ± <2^(-44)]; dctAccuracy = bits 43; getAccuracy rEd = bits 25
chebDivideDCT: acGuide = bits 30, minQ = [0.99999999938466222140918521553721039478517334154958330882805419408085501395837786718472084412923095442238263785839080810546875 ± <2^(-25)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 25
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [1.00000002102983690383698554322428376023431823365484143511703974500378456899684725391627457171266317639512980030005284373063707121018119582249117350637320690577487333528747352596126759345624811087659451599481326315582570750082222896917964496709640146772331498688463840766209204990978884707188704657471634284973391003371687757082339051026931228355085082517171830860124354960610896769563005684359860160112276909757504680686532335756515034108491476529211713370632857920946231174478234515756724931634380482137203216552734375 ± <2^(-25)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.00000019616757224596631718639145139214829336847939404470207123049706352989059834626190013101662518593344516786556387110730266185007101080129359010854764691659151985798985206506867615976091905554457214080083577218955809096419785068588295564217987782205241161854735996634686744181359472572224333767217270842669912780383678433103955181949212977270744734250926644966531347745203490214539224283237549315797067047244172817789541999981741142590048034840348400013931565465008640752756271987564137244012076911892084041255657211877405643463134765625 ± <2^(-22)]; dctAccuracy = bits 21; getAccuracy rEd = bits 21
chebDivideDCT: tryWithDegree: d = 32
chebDivideDCT: tryWithDegree: d = 32; getAccuracy rCd = bits 46
chebDivideDCT: tryWithDegree: d = 32; rCMaxNorm = [1.0000000000012085045411999736381626460656891547138041390336531958607856278819151939154893369498582524351330995558488008624360505103724918476209151456334641626327436212653440851930477559337420576028066029648561815909280649492880308159031317333872308216836915217749863642143209517946681851163486949494404399906218454608718491657605596014843580155288540449031215282110594430208730239433942413716442592622020497693344876623793430901288417600930370853423980754269839882711722541327401140658393497409587382640434184669662683030994206913164205780008599033781280240873456932604312896728515625 ± <2^(-46)]
chebDivideDCT: tryWithDegree: d = 32; maxDifferenceC = [0.0000000000000449179314118243880327006486343502084035974432189567079557532332095768908197420878697708835414688242616692039773475338765745320824918581194831876098226474760381361073600717003138651381978616974588394100105051697110391447907896520427675830795603523879725313028941788258177395934709763835470795834486394693331201075824345869211931141362961046023780660397522981296052734980884052716557473205531415188860573597074965686841541692561482364796092338272311626886326419102603685655061927037342338711949973539210466976795896692531752359281285946820566019204471050271274164992515339476543412278175537721836008131504058837890625 ± <2^(-44)]; dctAccuracy = bits 43; getAccuracy rEd = bits 25
chebDivideDCT: acGuide = bits 30, minQ = [5.1501905862524838529218691190045272583637984258728392174416475801645987075971788726747035980224609375 ± <2^(-24)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 45
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.19416757171461237477271245858186311661199398056193951447358294949912166640536463394350113475341093133163686684100185936114541830981052123415798362840351724382329943936007338608809391943585825345966257244840802265377616131479991062358244651106274048275274104679198013333501186118894861219439526093907768441521659060798639840200169161869867602707797227653827232431592383209650581680773714124776343595925943981872744523089489570308199411620994647614879556388412307484946298981269411677852421149736983352340757846832275390625 ± <2^(-45)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000199290798932795634635588027763833178285679915432696647351998725285809094258708135288886116629509536761823185203450305655760205650024847218437464211071727577860087810597455359989652950653893770359146434153486536488186776882388892768494687766169231735291194872482140952362325151026946555935188814885582355806873530808307052199924541073690589484137453757715211314550149047916868763214697239300823638064876225408708735609146030227597300393636183185224671788303888383073619456109243411704333211965524801323763740869277061307229814701713621616363525390625 ± <2^(-42)]; dctAccuracy = bits 43; getAccuracy rEd = bits 29
chebDivideDCT: acGuide = bits 30, minQ = [8.4512924699089655600404894041170804016455518066514297198024607820797415300563714042093865774774030796834267675876617431640625 ± <2^(-25)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 52
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.1183250968488578498855870375916925492939945205152518433414170977303217682478761156398124958308167734677283874385121615065194063543018592673277077490159413107198859456259682846016476334357247266329307383136475472487039843707251201949062225691699085486591337446453929028999940697985948645509779453277587890625 ± <2^(-52)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000001855754616865650309689443499459263076845934445011088165244927954558552632929507203330249427112712272155375193606774485793842468527064395430039374547363361219653120360290749908892008785903646315504471681003158256562102224052068777382373809814453125 ± <2^(-48)]; dctAccuracy = bits 51; getAccuracy rEd = bits 31
chebDivideDCT: acGuide = bits 30, minQ = [2.122187464525878862188827147242880679313337315288304026961346644295449444400988650029880877578847275799489580094814300537109375 ± <2^(-25)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 35
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.471211905955934712998362617848533762481402729324484111369790926834973558097770261176181528561180713693774816465856000425581142908742621362838103876395811762852660835166167298042229298270492606688700744237506833783092727032726350304332562806610771167885320931389969700830988585948944091796875 ± <2^(-35)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.00000000020696978346908659052184721152254656189047094446537994019855403831298934512523247776112269042564047255003164654856192498627982905060166872997440802866917132790972173306912337496803167372836120705683424020962032673387334421690394811571335459999789232059382513069746681864726712828771204075728448464863413422848953535692193544752939203102246112427876693883056208355341183076300973622937944878658636283513191894858808816056547162125273136170057882822982919078940185187867935424427687780203115730331853041983058982822285543079487979412078857421875 ± <2^(-32)]; dctAccuracy = bits 32; getAccuracy rEd = bits 27
chebDivideDCT: acGuide = bits 30, minQ = [0.999999999279000899341730484040954839232722954896852760333477557300136816358146943481584323354383059268002398312091827392578125 ± <2^(-27)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 19
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.99999922339638432089606239159264505468812755198655632964924248433367867688420167117445230002502351971300467986421615255207945847661074944190645161206825415661566579896048574208985823050344619915286340920099070428542969322387549494884878186422173698986015394408409964384652698672615613398534742739292421223396695223758827218343507182724663902456724631034198363789087063674740709313464670164665789511679795964880329906839293522075222779057547996982224207816272423122233751083894233435689358202580478973686695098876953125 ± <2^(-19)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.00000320427809431694981444412224775726814207589252408466994160480282799319833435675001859179456788162169795644053829117735873104120351849748240251963921762987998666308722196783602670989320436947298678581862307058707376423515395649586995072469991087684375995824005923498137555607971227717949711549463548820270149885796421047744607167458051599005788497247245523142418660709157531898599981593524859744084451223596208052642946968168897796634661031282397586734480106998363247692924534750849111246380485074070065820706076920032501220703125 ± <2^(-18)]; dctAccuracy = bits 17; getAccuracy rEd = bits 17
chebDivideDCT: tryWithDegree: d = 32
chebDivideDCT: tryWithDegree: d = 32; getAccuracy rCd = bits 37
chebDivideDCT: tryWithDegree: d = 32; rCMaxNorm = [0.9999999999981875420366874531052911363398537725602182515181796621189615421306807349104780930730220212259018568090845842131178550482682249125459835153932818608755151422798614951230719585762258156341957357406193582919493571525987171301175152200888866981009813270132784014369903459099545560239348473274439039980269763864723229935105451942495163963487901288060141551878303214434334597442198497297122668970525354350833220031631964097413962874675643863157006427181142325704693213615008558588655589911176378694436864089038444861870866160534000968598648817486918005670304410159587860107421875 ± <2^(-37)]
chebDivideDCT: tryWithDegree: d = 32; maxDifferenceC = [0.00000000001252641611358988091015795534765333063098340273154761820698493837029700322543794851427614042059498859518065611946028956991090301487551178558221725516371650578784661000417042691359436400478043904873836362303838316231625872567636073700787999021521236888533844739592277808476143493337647212133114570788559751671310386684897179931838819508386890580792885008191338523858074916596931683455557481259799680817509599430718165311765431462908184993802330718094833245232129296825020819747819673288007583092642631939840005209174309981747314712169811386423098972365325616787189115367874558959471187336021102964878082275390625 ± <2^(-36)]; dctAccuracy = bits 35; getAccuracy rEd = bits 27
chebDivideDCT: acGuide = bits 30, minQ = [2.2304887284763195793941577356190049320402103487622783178109635293662194044372881762683391571044921875 ± <2^(-24)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 35
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.4483322364264996220978698583325991398685666844853059925097705098505068913132703548858323563664242286014299524687224545570507388437114914975826335934108919509718075956671622550234004831205063072706768016410068875772076850907785935767393589344078924840496915420731621987931223496548584125387921106715409988416432059186293350062878570608688127861483424950384922907639460796836260064138185563919170666177806304814804596702997188960566512620292372343826077100231270548661195523174548792366689298205528757534921169281005859375 ± <2^(-35)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000208552162739263394488311068705097667326139412380671195854153033112198568093524344798082927392673908022342241608696322566947931688286632672213172236778101232987566712810631477365400392397879332911308142205777145008050127798193486379518504919626394188608407761515255485422488629036364597193160604838389277937036847699105462156971946938091609118480274994218064545991594022203376753170943870613347360756152977279451805289983992091147841972069937562697460823555191050270672979534041366998563530327257277137247004628051172403502278029918670654296875 ± <2^(-32)]; dctAccuracy = bits 32; getAccuracy rEd = bits 27
chebDivideDCT: acGuide = bits 30, minQ = [8.5964660894749985277404169645094657525963545567811036684038351884939999081325368024408817291259765625 ± <2^(-26)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 52
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.1163268707852336678549064948726312955006494867934713781441618504947002726526643358276824816766463843792881968634217625283053721804850358323418090460974335000618567071726929825749545672100805839094990679202764031207195470708919680791408041413948697505392196975773277856896673419046102600990785330227526125279213295432590740772429490885929674120453699412257592054339087432140687981868859946950503225587696875286113079470855206351795292233561037615807192292110657735628276705107367783482985590381986185093410313129425048828125 ± <2^(-52)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.00000000000000144339506824480464684132611704540893201647526033343238438533263010072628911974497482669792282522475875275020499540827907583320196983288927886522010897297070316212744030785284470918577330974315759297001517981462459516706076101399958133697509765625 ± <2^(-49)]; dctAccuracy = bits 51; getAccuracy rEd = bits 32
chebDivideDCT: acGuide = bits 30, minQ = [4.9849625932034453518552433078787304158179940205304790153079753278050753745583313614707365868383703855215571820735931396484375 ± <2^(-24)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 45
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.20060331071762239100591624088502227362157133150318636254387040796027250324330915438121991882261053953458390938274441858349553963305138578996299895501215230276530784446250408750134441669315906212656100294933781751023118331754611993709251415829298891713787750083752836616213244269602000713348388671875 ± <2^(-45)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.0000000000003750784259158144848107346571617252479732245694958736090032000274360370073201640043171502511146880551102732422105701079776214161491984399937489751520492444269706164024137893816864598349680689926443843129009096881737698208232779029330567487402847742257248252478884439777574571707361861133980841847658672501111466535200339374901601113746725376850737832740494537716865070551666846219425627824975442317430445793862065615527791772672863176367742315938099314520138139548731733980868863098152367451827479912345180042276826526403965544886887073516845703125 ± <2^(-41)]; dctAccuracy = bits 42; getAccuracy rEd = bits 29
chebDivideDCT: acGuide = bits 30, minQ = [0.9999999958940391991432187929551952560726195826478417895934367077868866550063579431615289061507922951932414434850215911865234375 ± <2^(-25)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 23
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [1.00000008582379127941475198435144459835208852805530551534639420267218977375670835884030154478809940669245914539552588516839631483737815927712369656223621552053667250340263582019664025154671972234036110029891460979877409421972153356536315906989151442017162098290526282043536942762053780183322346305832373750873637123256734020129647094570199608306062620628686659322616620410324829741348382218346756637568757593745756959810083658571611412648128131766803349768291616272385783311163996722736868605352356098592281341552734375 ± <2^(-23)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000328051063157463423158571944558873337593851737549056358933546922626037502293422495643689287917221968526701486437147055592980296367147136326549896005752381954362729537405980095660490203669249774103823144174527908807345663567235286921571253969473801004886534184822333721611625739529660023224622069258832672051428751617582028773317621784486291930926319658810810874096132523102426806579066150611665958105494737728751817195804352555491613141527223833040570868449758361576754070822601272530470454462207807733165054742130450904369354248046875 ± <2^(-21)]; dctAccuracy = bits 20; getAccuracy rEd = bits 20
chebDivideDCT: tryWithDegree: d = 32
chebDivideDCT: tryWithDegree: d = 32; getAccuracy rCd = bits 46
chebDivideDCT: tryWithDegree: d = 32; rCMaxNorm = [0.99999999999889236139498779390112652376480793349514476972275432961273730093647444065881521816291938618133338977467995358729788755068850762577467297478064802193997188334877473820215857776419331648907212161442589135082866234139977710706451495698333481301875171280924288414165668517396535056287931999890052121694143943873585909510228173525200989284824659942823947090369078696843036643183296505285840385955978263478329112843439031045445309094712825668786433557925109870436010589560919539778064892059507955045133954197296240983517616999265816140631500663626951563855982385575771331787109375 ± <2^(-46)]
chebDivideDCT: tryWithDegree: d = 32; maxDifferenceC = [0.000000000000104230745994987215949576193124381237199098924617879099883450693597107003526898742553808242430659295066713703510318932775342537392175641681293645466572452327166371443824336865797821667646181849707321219900273865477910028921260490470153540837171139292231192376311779318250605950679659282900303031604464758397944825583428639668377935464366519812265927284043084835756877154142564934331174644874885104493202818110936700171878964032235052176971006500076274272017704811328852317849388299345734651800677633545673757742539362131039268820176714662994840008128156830429141114729529697668919396846831659786403179168701171875 ± <2^(-43)]; dctAccuracy = bits 42; getAccuracy rEd = bits 26
chebDivideDCT: acGuide = bits 30, minQ = [1.002826174474804549401848096255667017125676019020948697888472034289719658772810362279415130615234375 ± <2^(-25)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 24
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.997181780274026621432286829214479492199907068730813856056413923711287846824628421326118170613409359876555901434276057066867441353656820802513521141569674166344888809922297989935432614038729127712485452631627555522147298400471153010996193027485185905161463329308351908963452211793918398447860847400565166898257864492102170210865191769617613347030797022899318442684326678675123687468657573866398449870723495343193712860623255705777333303118626062118104096282730374305468184627601092862025922158863977529108524322509765625 ± <2^(-24)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.00000020562347332674377966591048823482048020651223766811935916076403134402467498515687787466847163724772488835069777886294411090278834868154128641392179399295064069372451825156231735789166986430355825567608403340516509134962631775663176251250475185882377736578628516347714892620355599352897459996942650927408978187123921693239661763177040057303164064358475158832642423574741597342256560135462363896176893522122917685320592801782699656523619405114101296466223363697135491434995743234296941459224826453944245940874679945409297943115234375 ± <2^(-22)]; dctAccuracy = bits 21; getAccuracy rEd = bits 21
chebDivideDCT: tryWithDegree: d = 32
chebDivideDCT: tryWithDegree: d = 32; getAccuracy rCd = bits 48
chebDivideDCT: tryWithDegree: d = 32; rCMaxNorm = [0.9971817902775799529881247579446289873385995980235083284447359944150741148619843244061713216569178269020153251982566992716817814285470334190418102448042193016011452471777718523936980354507545445696663299382944829227757121521115297007603898072234285131608872625041156544295603381083246930418588851737472830484811157379246818755303446339073396275434630877111508618610026725703779305673383051963706468544302027287786828392315403684568125341012789119975130716336078836371576652925692953391172334514435014641097365512668340923345198564296578208556061373446510742724058218300342559814453125 ± <2^(-48)]
chebDivideDCT: tryWithDegree: d = 32; maxDifferenceC = [0.00000000000000877497129619741770852656036901629715568392404406138183738497091670626820299219647198494316780401847549480366889690173409960398395136791062056835570446631202599688052305817678987016769770196254236161943033081417642747413328392113717970512901281748373774717412138173938338615087370422925007027092166668758893984400904373329082907614007020955609374647242694497277257224405727402771278761591963168865429470168449816024932303708433937564841541468175082823814579024381686787290578785787651520891409451109681576370710927724394493293171402777802739272162830094855893583192238673550654437516271855201921425759792327880859375 ± <2^(-46)]; dctAccuracy = bits 45; getAccuracy rEd = bits 25
computing integrate  (sin(10x)+cos(7pi*x))/(10(sin(7x))^2+1) over [-1,1]
result = [0.0283554085591754168061438379115275002154055604375473544561098466452064973671311366418878612196953153942681584015831869681403063749002828856305291688134942999728818422815644843071765500646183869819883444341567015610574088461443104931945505093176588959357667554428816998689475063144284119332053705153265822846412629821471357123029953254697820287469591577841023205472179416734617924271207703618669391943197290041450501919792256564245422207399058164022712910205309644968139003041202692866948339362566918276853350466308962992499618531786186474276758619217364554287996725179255008697509765625 ± <2^(-19)]
accuracy: bits 19
precision = Precision 584
	Command being timed: "aern2-fnreps-ops integrate fracSinSC lpoly 20"
	User time (seconds): 135.02
	System time (seconds): 0.47
	Percent of CPU this job got: 99%
	Elapsed (wall clock) time (h:mm:ss or m:ss): 2:15.50
	Average shared text size (kbytes): 0
	Average unshared data size (kbytes): 0
	Average stack size (kbytes): 0
	Average total size (kbytes): 0
	Maximum resident set size (kbytes): 48832
	Average resident set size (kbytes): 0
	Major (requiring I/O) page faults: 0
	Minor (reclaiming a frame) page faults: 189724
	Voluntary context switches: 1
	Involuntary context switches: 97
	Swaps: 0
	File system inputs: 0
	File system outputs: 112
	Socket messages sent: 0
	Socket messages received: 0
	Signals delivered: 0
	Page size (bytes): 4096
	Exit status: 0

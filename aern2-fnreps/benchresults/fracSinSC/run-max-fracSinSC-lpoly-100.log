numer: acG = NoInformation; ac = Exact
denom: acG = NoInformation; ac = Exact
inv: acG = NoInformation; ac = Exact
res: acG = NoInformation; ac = Exact
chebDivideDCT: acGuide = bits 10, minQ = [0.9966306326039359358246387402322119492697167614438677883460956464463849498845913369408151360516272786183034071427755407057702541351318359375 ± <2^(-6)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 18
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [1.00003534197420184179317003356126420754892483919378864773201969319594884283794430989882575295126420199862316515959817163760348422111203656627721068860025182489906580515944488821406610640002622458661650711383526269651675712374696709487216942913068658202289542038968973877156787661554987801411059790447482486901743006400492184823191473603173519504152225645574766992135816903106248830750419586140812085440052562977057321230618177602982780040140519420815758920384786500230376760063433676371407818436949796363262916395565476343011121529894455731915452298581847845326819879119284451007843017578125 ± <2^(-18)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.0000221670045537439035668968122293893772699093248295313652646532335356811834086367299950520296970354949182652698565081703743647449963768921288360927922593029801883143172667181910416255027135679391159000679535061549583581199286017247450802868393274496842883046824587091979618744018512264988422465168229497942241076279920314218425139525843243916289161162087216275097816858388530311047956470231710118891367938103177963799866351763105984113831143585655945697776569858206130447797477245330810546875 ± <2^(-15)]; dctAccuracy = bits 14; getAccuracy rEd = bits 6
chebDivideDCT: acGuide = bits 10, minQ = [1.2496573042833385410754917676697662965200480897008748580011358820658867556374627127979692886583507061004638671875 ± <2^(-5)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 26
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.80021939961984764760753899276014037941117110749994469461658464204118735494893183445298912038820815415363719350899995739038675440852172493981968390579065500270094861983435905128024205592357499828171263975667009384925309876468960364617571865259638618631580600131257966189673679871692535403582269282196648418903350830078125 ± <2^(-26)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.00000019457208467596503571014347577761371000203139277003900515173025985430949230381428690763528375123029304969426194201418548390636667453271585591113902211980041256297790353739498184511504972660593839977557302755297531153902849409009582881300441710804324253794795165825215022534535474293879288278412030738573744138288958855934222994579713964024654390172205129807062945149072834991917351878998257512759814541708215177296115885904863493661767493827642974170422096591437366441823542118072509765625 ± <2^(-22)]; dctAccuracy = bits 21; getAccuracy rEd = bits 6
chebDivideDCT: acGuide = bits 10, minQ = [8.36898176007099215584376475552781451342887777659479535244290552046218800708032858892693184316158294677734375 ± <2^(-5)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 47
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.119488849261340398246418550368426314703794608670949508356312638452190404305672437909905830651769208343160329414262877053311979252879543077101770638639382843051523132455775373185809198538091100453140403957020152784838868708734962194003946523194972072597183195379208817647003154718635520703690709840190387058811438691918738186359405517578125 ± <2^(-47)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.00000000000003849108161439413311537585388663462805837337313286106166287936503067612648016537545885581089987962588102382432823008275855999295443342782869999494726043796296268925291567784898914794971603368804496854935821343640195593618974859473218883974994508623268529845518060028553009033203125 ± <2^(-44)]; dctAccuracy = bits 46; getAccuracy rEd = bits 11
chebDivideDCT: acGuide = bits 10, minQ = [2.23759506786043559165908411308912083188371587890448158897493073689484964494678109758751816116273403167724609375 ± <2^(-4)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 32
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.44690838571428708376120082485740837893372764044154825691899972809582689605650726916774782545992584290658750942416845015563712983023678688214768504601663342834423988382961063989371967506663718818646287484945443371786698153849386308766627019603952841436578301618402411792763062591625597592959184822802853886969387531280517578125 ± <2^(-32)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.00000000126004384075739476291363928855569428999494618892640573903918266296386718750000010210914407819271230439205666371453337388448265998855095432022163749178929821168981437003598797650460736541828855474307307389270709683415317839630834146643980686459366076512811360998966847546398639678955078125 ± <2^(-29)]; dctAccuracy = bits 29; getAccuracy rEd = bits 6
chebDivideDCT: acGuide = bits 10, minQ = [0.99934478010398894967336870384580511294825180760788482439224555065492427781129613968233456927268108793693812685887678526341915130615234375 ± <2^(-8)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 15
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.9998716132272774486392169108318934326567648107844126589020430145988576846251124042679328317822089360923282142115167487324531353350987176833059603943019495949433051862868197318878287385350886043987969375712779261769212397339455993078905048180129236587551302446105315989431707629726176334224371696170016434757155530160838334848705575087667912206674882370292342927149486740877849355285174893297555704481642963758117276064860042120911377357527449348953838173006413196528182283958093247598690123159808171326743942463927301844694994770179619081318378448486328125 ± <2^(-15)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000043955089137940036445382999170253833325988121626012190601599581141952000489177464404271998925085224604554826140727193952549066724677481883360420423897938562838309823563580986790422134348541183421177022317657478152922004016455690566439094504615367155604002773936757052358321766743951494118538330716177893628659651412558804198447234194816321271898173504732290178289999924885621059236492904984509436786023673183649034655533482857493523244591432920763825038475443992684017488747224849552417402704142659405969324490988554832160417618069914169609546661376953125 ± <2^(-14)]; dctAccuracy = bits 13; getAccuracy rEd = bits 8
chebDivideDCT: acGuide = bits 10, minQ = [3.4514329508075708300994565125750976797817981850482624471282767655586705586590046124229047563858330249786376953125 ± <2^(-4)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 38
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.2897347317062100568243529550276406998916213695535740866552437240823651188305669615201721182382659759812249637493705859275963692093870124195147413253905168594125846274168645717067911850328388579013241611137975724900389522738808789800844273967817196900995985465518901160193412385399972766748810659720447802101261913776397705078125 ± <2^(-38)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000020111294657709279570369916261442634706352317053301703708712011575698852539062574618220672525443607055733715791389773223275789991633389695546581243999871770081018193487837367445674613190287790004553400152362878455727322674225326456244474247203059789901313791915526962839066982269287109375 ± <2^(-35)]; dctAccuracy = bits 36; getAccuracy rEd = bits 8
chebDivideDCT: acGuide = bits 10, minQ = [6.876391716889510555258872851325318261970603601826858118382514530909921379731031265691854059696197509765625 ± <2^(-5)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 43
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.145425106825205894632649335822948039462314060484538553383187219769811357311967623448516729255652730027662531893535560385003076285956120036499418956023853617594281352420607177873386627685257429806496890100341902359532778285259542983831298857269246163683842364246627833828471857019748301989115725352664891534271163209268706850707530975341796875 ± <2^(-43)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.00000000000097642466596929187812415358685305086542879915434411941532744094729423522949224248184681133453739467264589584628720132241373999383512924935011249557885288321759235309630121811786550445600152947703934748068843675685171144416603002039066523478120195045359963614828302524983882904052734375 ± <2^(-39)]; dctAccuracy = bits 41; getAccuracy rEd = bits 10
chebDivideDCT: acGuide = bits 10, minQ = [0.999940031437434642372055451314088717185237555662918985289798633653464421389145400098641403019428253173828125 ± <2^(-5)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 21
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [1.0000596339598133363041698300618631875269699641320591423250528179307599516814554626450731761426239547959470595552190266891653756830275028559276595219015372921770055932856912661466585018827180005313159258379871374379857097832811651417838125067583594245245606275588715289052098821043212950598899624310433864593505859375 ± <2^(-21)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000003092807937794484608472560009825591095278830066769921485127931768300982422610025814625390173099801397834847764802159313349995915842457948971354272738900239240845973931735441189415791974082289429155539483789186945915071651888471827534827153147200254339277277783023934270168379362270027611781267130284259447794154022800069987787379659216098235860568695853702993263984772560825679793802973218206234913807729889387747927263811560811537579114403346465419123926036796832700662754833058885654562472091420877173817416405654512345790863037109375 ± <2^(-18)]; dctAccuracy = bits 17; getAccuracy rEd = bits 5
chebDivideDCT: acGuide = bits 10, minQ = [0.9999400314374346423720554513403574386617072590806759964376857498146648588199791873876165482215583324432373046875 ± <2^(-5)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 21
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [1.00005963395981333630416983003512582472605675794601243677605578546729522776516790245586157337590028843629459934054752941935478806146091053886987342008782311748388578588436998365954850274960556767984788290837184976105126959893426743416039446954095524762034275575480091015410748223057879613406839780509471893310546875 ± <2^(-21)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000003092807937794484640179812493729677991955321390609375335790943949639564720103144179060702087193477617017386826182437359245729389216911972571956581985757030169793047799756664416414449236363399758733168027514165433815215711418982019400528805435765881230867130259181257109397360330520403232651093154890820885737987169356517671037131126188169847332393793598396502444638792983345898636018976893735015900883821317342429744017693992876573097700136633992044194925947697560165275136652592963629314568312252131665474053079378791153430938720703125 ± <2^(-18)]; dctAccuracy = bits 17; getAccuracy rEd = bits 5
chebDivideDCT: acGuide = bits 10, minQ = [6.8763917168895105552588728513294474557713698354958101350914166150808670696648050579824484884738922119140625 ± <2^(-5)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 43
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.145425106825205894632649335822843769495839172104653423063659872713235915942012495882429904363055349400637198964024829128983414544715469601697375161777615795897272068993413269058648112420419746163167385476632674727807761248216508176653966471009287424228285420536266085379006487286294022950285188662219483524129515217282460071146488189697265625 ± <2^(-43)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000976424665969291878124153586853050865428799154344119415327440947294235229492246409121583572718637149263459835307715702586149993394781338589406245263056660590277521174608447983427326202858781582542158015023325096626833690177889307561427037265573518343142467301731812767684459686279296875 ± <2^(-39)]; dctAccuracy = bits 41; getAccuracy rEd = bits 10
chebDivideDCT: acGuide = bits 10, minQ = [3.4514329508075708300994565125502397019895921318928689398233331086582992806854885969869428663514554500579833984375 ± <2^(-4)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 38
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.28973473170621005682435295502988894589013058652665415856579860903966066787492992162158366059048024583018475463357944577191966172739580988260312876013331195322223996575631808380610569077973110480018435576000634462547351794027206362167535444014753801545475576466089021264925606790232228836441674690860281771165318787097930908203125 ± <2^(-38)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.0000000000201112946577092795703699162614426347063523170533017037087120115756988525390625785454954447636248495323512797804102876034481999911930417847858749936840755474537033615661445973112364349371450421100562106866977667955024449202371857434152360496874313577908566230689757503569126129150390625 ± <2^(-35)]; dctAccuracy = bits 36; getAccuracy rEd = bits 8
chebDivideDCT: acGuide = bits 10, minQ = [0.99934478010398894967336870384562696442839598829147714643255644487795950340883621627427487493409118124443324404637678526341915130615234375 ± <2^(-8)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 15
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.9998716132272774486392169108331646276417591965113855771980031378574844002045328139625030714065479883289261724734039275676133889748378221200983162040173927883767081980081180370747457529533123639175251469586812512508967546543706572492797789846849044306303763857754764389554585822098604361586735682387315561316263309145562159273318375165085111167211275532192366083339356215123785524741279915618736089497149615978052105601294311586508807732547783556890956829129153635679126126974506375484397989295858865462575739240761070469876159449995611794292926788330078125 ± <2^(-15)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000043955089137940036445382999170122940339227409967884540175466075410806445876890263965943884517675611715045291674269689959339743768569733465223148938441222677153506055829957973717478646423276233923155823605783807686088132809364246615563103027865826236339963187498498982507481263485974867604258649615240390714761275121575275366409389311980667402662408181495757088320118628348990413296413694013259601209500362791818965035648349876478710271625937273549964968048030084352327767538415516143611906307728988226103772709620065572977409829036332666873931884765625 ± <2^(-14)]; dctAccuracy = bits 13; getAccuracy rEd = bits 8
chebDivideDCT: acGuide = bits 10, minQ = [2.2375950678604355916590841131147790335678148285568198551150184310960735041551306068186022457666695117950439453125 ± <2^(-4)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 32
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.4469083857142870837612008248531948087700187632603003136272069537362849842326528399329292249425294036114316499508562817201600632115746270557468680313003399766956076697473471406189045759070174216571446795736573261361319133072402623919820218767430546841441455323603420522441473132369406211228390901624152320437133312225341796875 ± <2^(-32)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.00000000126004384075739476291363928855569428999494618892640573903918266296386718750000011781824316714543727429852691967061543140517229998678956267717881249052611332118055504234921689596685465240571756316508431603004665019325366738035577861512285407453114703668628493460346362553536891937255859375 ± <2^(-29)]; dctAccuracy = bits 29; getAccuracy rEd = bits 6
chebDivideDCT: acGuide = bits 10, minQ = [8.36898176007099215584376475552769125391243699350019976985458008511380156857484280408243648707866668701171875 ± <2^(-5)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 47
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.119488849261340398246418550368428426521676202140337044646145598854413174087933958120566257889719570844444190888501731155817803382082471527650085253461469507729642651192390722323463986979541331850466916165368476890991009708012729502601419072060908029503691846750131705627728906882486164449704357857877379256450467437389306724071502685546875 ± <2^(-47)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000038491081614394133115375853886634628058373373132861061662879365030676126480161448184083572718637149263459835307715702586149993394781338589406245263056660590277521174608447983427326202858781582542158015023325096626833690177889307561427037265573518343142467301731812767684459686279296875 ± <2^(-44)]; dctAccuracy = bits 46; getAccuracy rEd = bits 11
chebDivideDCT: acGuide = bits 10, minQ = [1.24965730428333854107549176766151272374337659045260346452818817604229172102403566668726853094995021820068359375 ± <2^(-5)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 26
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.8002193996198476476075389927691008344492162158706152179457225351983369241858194474131501823126865185536084485778863598591444970992954933746055454994503791480623519651838526811775133115041010626794003596168841075578497884993419704094548738647418105250574902412128445750295373186007641397310408137855120003223419189453125 ± <2^(-26)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.00000019457208467596503571014347577538826568976247543725080123297662921109689493841372550493864282588041208421543115344895852504790142352637077157441005939873431504254537756964825968643841618780391269059111778483556609702210465143745057996233686416788486819282767434750610273461968331963579945646878340280932618457445876808732608543512541945902954076188035009575649020250468991102936710534617340600277812606010337582066232940163512590721668356289139893873507691779423112166114151477813720703125 ± <2^(-22)]; dctAccuracy = bits 21; getAccuracy rEd = bits 6
chebDivideDCT: acGuide = bits 10, minQ = [0.9966306326039359358246387402405336306186198548704314905203504900785439702064985573679558956861002639551934401129784646400366909801959991455078125 ± <2^(-6)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 18
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [1.00003534197420184179317003355072655932425940501150815785350240532900875403938291242056654388186851907027480864783518897923997657527102588787670492191430039792289304250664302487507327608478597554395990275620925324632672559522002731161755933664804221703395546883065329880820965648150908089765188988869253591235195532078995712403233897576810456375877315435785839337479175435000127745013144524810395043298194844641012521415010797103617184329073003988356889132513734190515197683646940837964377313810580974297995570045327378821329724791157273317720698677969759504691182883107103407382965087890625 ± <2^(-18)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.00002216700455374390636073559063188344201981474198213893009317125417003554106696237055641975912646126265254286251023097890772937513208444889468338921749215929990154810064623806222225622442148453304835480926354645015553457670956877420768255453854199402562695090519310463804294794904197856642567525933705842323070524657170781284207891262537417557018534834551842253551841419935507055226304210103815174299295219493972799233779595592201395116285192004085724711004434794858752866275608539581298828125 ± <2^(-15)]; dctAccuracy = bits 14; getAccuracy rEd = bits 6
chebDivideDCT: acGuide = bits 16, minQ = [1.0016654067840903735674750674875043007060536387317179454676196735209523534778170782143366877784591874900402550331757619005563247147648494678189860097497799486764014087469831792986951768398284912109375 ± <2^(-12)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 53
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.9983373621842076253010630834298741660341042310618422032708344426781070678971581473144022664721158802579716289717205394804476758031682721674104068956766424665982542348245034287220009161634035682597178155851263633785009037789887575329659486292509627957058113873899621125101910804299139175628754997609583254902787530227215029299259185791015625 ± <2^(-53)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000000112376039413589928709114672707839388899851571423579854602792238438269123493929568360916468637149263459835307715702586149993394781338589406245263056660590277521174608447983427326202858781582542158015023325096626833690177889307561427037265573518343142467301731812767684459686279296875 ± <2^(-52)]; dctAccuracy = bits 51; getAccuracy rEd = bits 12
chebDivideDCT: acGuide = bits 16, minQ = [1.248256153938917909130486733325024231587740599679960574096016442404398494314676781868911348283290863037109375 ± <2^(-12)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 69
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.801117620645781281925242692224385285102809851824363515944582838920486321596988328056369178443821427399106057451945596141005113952097273174326151873795644498914510980171845876201916658511036384502255488249322269812577380119342419302130457592208071259471088377157335652084931316296958197387273094253858952422763634558522394257806809036992490291595458984375 ± <2^(-69)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000000000001550910853466503279337982327463037998767904700700359013740194796815481377139447535128115315535167794766686942241329994275477160110818745894649105844907185017993988252303682709144277371536536946353548417076589198154170733219903432296830382564056804994834237731993198394775390625 ± <2^(-69)]; dctAccuracy = bits 68; getAccuracy rEd = bits 13
chebDivideDCT: acGuide = bits 25, minQ = [1.1042738379729465362962307641001857661838445625817985857257036286823407018287915226834639379284362669994599677988135534883220845791532422530199668891647012992918153173604878247715532779693603515625 ± <2^(-22)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 69
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.9055724817638022066996555772066390697726886485583341324473173740275850909962445985270432104770368255033411179647048991062733224289299658467363061760869527530355963107371575257362548463473056199611480417669497994077361232045668431582733861922938547050845380512358744001612448183408086966636239082036358915977032483163021401407919982854777472473200244638764967483532205953421233214210852529282987792931443608906168033302335685203682928502192419393644382862621471672252889826895611730210267471805039897365890193045544431238574186582776975572704300141389788247892056460841558873653411865234375 ± <2^(-69)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000000000001484269885205003907120900547892096003293383857375319579351927862243054762468744504785095872640189375848744462930969992514085517067993744631464215335647857331222907714550969696573285793547779083693101776177078182201607881902950642234316654122228129608629387803375720977783203125 ± <2^(-69)]; dctAccuracy = bits 68; getAccuracy rEd = bits 22
chebDivideDCT: acGuide = bits 30, minQ = [1.119137586701535086737951672573020454524520151773615506456219635924012040129643104440624279180337697993287011285577625859368816474524329885477767049718037547893778604901626749779097735881805419921875 ± <2^(-25)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 71
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.89354518325787576788539438469650011623813521048215647754610960111489938019519655684842389078605131633774875605026015205421430898385159927707264371512139930979394563553135519949995198774976757058738008836021396868865626296986481070130369791623890733020024997966632351328181251927570321260087859730985671768461593193690235825688006343625602312386035919189453125 ± <2^(-71)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000000000000250493167515161403340288150133509699132009635690329362848495758225915148587417310309379000761608224454186942241329994275477160110818745894649105844907185017993988252303682709144277371536536946353548417076589198154170733219903432296830382564056804994834237731993198394775390625 ± <2^(-71)]; dctAccuracy = bits 70; getAccuracy rEd = bits 25
chebDivideDCT: acGuide = bits 50, minQ = [1.1216565793186388574012317250136595516938520637395318062957397263859331194256993253649680712574472520532133340380454011864230778883211314678192138671875 ± <2^(-46)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 103
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.8915384783883313699327121483847113680569155380416303481920565213414490208372712095223516054077882666403372557453958523807000029867403120032698549301718018667153247459861409049678379668278366010707407312805212184141519839367369554487434248172223076578612500438127942376441722446775369554816262768019041762550510595215249682638909182953897147871913375638541765511035919189453125 ± <2^(-103)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.00000000000000000000000000000009026372287030348272835214807661483188500425765425995808196143027104404992788245713716743645463809844196975086659239389315311994726043796296268925291567784898914794971603368804496854935821343640195593618974859473218883974994508623268529845518060028553009033203125 ± <2^(-103)]; dctAccuracy = bits 102; getAccuracy rEd = bits 46
chebDivideDCT: acGuide = bits 90, minQ = [1.122089899778546400994922621456467654487132065176343375539857555354567692781638367313777492350560875282407198595888723637400124906458524745828014335981281934806474964716471731662750244140625 ± <2^(-85)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 149
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.891194190587900453357709940631589914898446193847391843521178783448069286390120638139647562661453983923217045164137607506323922088935467327857501519896593901147672449716930284396884476137678405220651805359305565748217125066251915772647368877402505833323140427442517996299656807486812431439407127916737211028207782892286646560562928623005338846328134350305872255690939118882001182607270617364036979779484681785106658935546875 ± <2^(-149)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000000000000000000000000000000000001095450757666767055786522194740642615365984754614119956316865506349083215859819762736108212842019966424829118716541543516309709168866701942943041799164346723293547779083693101776177078182201607881902950642234316654122228129608629387803375720977783203125 ± <2^(-149)]; dctAccuracy = bits 148; getAccuracy rEd = bits 86
chebDivideDCT: acGuide = bits 120, minQ = [1.122090353036364374907145360554307583657193832136764854855932307789012516591191102436128080325777017027417938093494037960852080586560588188662921215954464961279677012649483515506750527665174731457143704146639326980011679257056494132536767112384712419270726968534290790557861328125 ± <2^(-118)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 167
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.89119383059841019186552477133329473671381591982967161572795934505103945802145846968136793631487870752107173029490575171707187614694222553173301925952899668721539665221409099477381787276749776274265616564261326339879809686765691275943884762537398698046590108312702521455802100717729871012838116237066968231887436954036964477495355794440750925096972197928098194011965458403722058917047208947600256927532521705922327155555877742337049057915314067261228822259539398163321848367660581169413802626877441070973873138427734375 ± <2^(-167)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.0000000000000000000000000000000000000000000000000053291791048789862783706404521172328747153164903882401963043611397229786241797523634319721021694229067412169884246667486155142113177064689815033133152604098764430097987652909063740664793143464633603111326827765963988457494843296214373743806710640982019376839378359991224352888034931215951774306949258519830979474729559797196998260915279388427734375 ± <2^(-167)]; dctAccuracy = bits 166; getAccuracy rEd = bits 119
computing max  (sin(10x)+cos(7pi*x))/(10(sin(7x))^2+1) over [-1,1]
result = [1.27187349565228454697816046096454656639344924355040986611201628723449314017476864121563682599906045496377221245036818997610018714692105491329820823053676467950619803864637480903378055566939903393073206780484034195211021321594988390857976359500904314587753135082676114503771921675006175415751650476850955125365343205700548260599128964856769884847465567679659914634981987546780146658420562744140625 ± <2^(-110)]
accuracy: bits 110
precision = Precision 792
	Command being timed: "aern2-fnreps-ops max fracSinSC lpoly 100"
	User time (seconds): 61.49
	System time (seconds): 0.08
	Percent of CPU this job got: 99%
	Elapsed (wall clock) time (h:mm:ss or m:ss): 1:01.58
	Average shared text size (kbytes): 0
	Average unshared data size (kbytes): 0
	Average stack size (kbytes): 0
	Average total size (kbytes): 0
	Maximum resident set size (kbytes): 14908
	Average resident set size (kbytes): 0
	Major (requiring I/O) page faults: 0
	Minor (reclaiming a frame) page faults: 1622
	Voluntary context switches: 1
	Involuntary context switches: 63
	Swaps: 0
	File system inputs: 0
	File system outputs: 72
	Socket messages sent: 0
	Socket messages received: 0
	Signals delivered: 0
	Page size (bytes): 4096
	Exit status: 0

numer: acG = NoInformation; ac = Exact
denom: acG = NoInformation; ac = Exact
inv: acG = NoInformation; ac = Exact
res: acG = NoInformation; ac = Exact
chebDivideDCT: acGuide = bits 10, minQ = [0.9969965321908321365148227235401013855978327746344786597896474314997780962857041461779201985127230045691248960793018341064453125 ± <2^(-6)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 10
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.999421256301087404928242262931386525036674449564990127422576095768974174413458615306974628849803775596812292306940709178495783634967856007106954125829583902877046486672983073648060660695539080156318718553053162417247560952593857224618825224488300743144976524025389919686494003596964279555775980815200002506448034072221158594202093029216226387572392111573491183553299823343912811642836949121891343088485983269098433587477158570101712199527413406209539684965492515025862989213136823585248436074834899045526981353759765625 ± <2^(-10)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.006018032400819444578514056172583276345319583702795048017124620417664713847159325013528047973601530139808607752131142554822099616498187364427113300190395217016659784695011712523991333180405231391153227369863860991865645972905441094224885440397027677486187215437779953107217494633880729293867912788079446985049092353614575352701142104168550210666110256794690357513259457208302298844809949759868951976877495456409062156429171000917119633365807263087636278173181927727730849657494303201442364947837404542951844632625579833984375 ± <2^(-7)]; dctAccuracy = bits 6; getAccuracy rEd = bits 5
chebDivideDCT: tryWithDegree: d = 32
chebDivideDCT: tryWithDegree: d = 32; getAccuracy rCd = bits 19
chebDivideDCT: tryWithDegree: d = 32; rCMaxNorm = [1.0000000801911539861996145107730924980628976113653371883886342320502162426954580642103386133879787372723425755328451313843923625692963776959494479609548078005752188579958078132801311901246651209351926895114873295884349412437773804564141447348750694223184256862336209791688771122161963391401929626394739654484556270085827714726871431712283904622250504515222406978973187010876255350127578673219191760728205360332877177296460026466523763358708149702000847671781764135621365727821266579764364834269453975157351085891046065985710610451490278744422768308908189283101819455623626708984375 ± <2^(-19)]
chebDivideDCT: tryWithDegree: d = 32; maxDifferenceC = [0.000005801901385320475432454966322634531791667660681056938629909385612643019806030780999617695210667885638529662123835289186522460744108142335095463522044671139729455423852610526696664756949966675812323370798135777111925658126169777020220855081519740564795556555499065294477707218336873689729581128125976883252370781971266207812846303227864506823267960705910226020094944132486355603967571764639387910722392248873095015351094702229009701325850642442914917924653396370615088843130494213785839771129859744630011935625622935161147325936598324110330645226859806631684868261089604857261292636394500732421875 ± <2^(-17)]; dctAccuracy = bits 16; getAccuracy rEd = bits 6
chebDivideDCT: acGuide = bits 10, minQ = [4.9893050319038367077464043773409701348715506438000237367806002536990821638659745758219432598679077273118309676647186279296875 ± <2^(-4)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 32
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.20042871589810330937706759845825761554871467757110218742315929731373955560733382691357186560198792337934200517557322562026202604519701734653884729364300241804494301301057095249221529541357406189178700020989277084096220655401870931102166543070174630284522796920720331608419414909475254779595302616320208594909731944507521311943703504018736652738766824009268549281607000034867639249948354512883135239914010360202987867329234740764684477253862025401797626106623318269361433457392677494335320176332970731891691684722900390625 ± <2^(-32)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000001662202514208124328675397209879177617963819102442357689142227172851568707246148974132074496440401387787191739625261938577245485786869183675358522994447917021018120707162840393367523795070710340227368035461686063096464760491244305740110576152801513671875 ± <2^(-29)]; dctAccuracy = bits 30; getAccuracy rEd = bits 9
chebDivideDCT: acGuide = bits 10, minQ = [0.998667169298368361040302163151462520563436667867810045839844559360344073568801562799414350823923314237617887556552886962890625 ± <2^(-5)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 11
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.99986284629243521069999432241086707740595408959358450220391596145357818084984011521651825121609298000214423753943269278020501977596956608782167073630608429301829655089984319182466037047623371454118499415204612004742099378015682508724666901276659061938823428574803915338916587588184391212839764074415047933695146054824397070648813308652025459359334937743480942609343325626182651033772170171121167637248658447009602821316958063883008588983205880088958566119971763881863925576090092184333713021260336972773075103759765625 ± <2^(-11)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.006298515082261021383209461313665645145876898119776978743482749219173394021256111843572428981832276678370357086488533736216736253229783370822089270232377215608364886179588438266011933401047635419620250365402163052127210338023758071056321114471247535112206751886516106423026271267929810457882496631710702719430542772395860817360892343271817195315350917346808810710487858409488860830236591454474141578414736644814664159204696360545974440249851116045131114843766726451561133972671996839216845831543878375669009983539581298828125 ± <2^(-7)]; dctAccuracy = bits 6; getAccuracy rEd = bits 5
chebDivideDCT: tryWithDegree: d = 32
chebDivideDCT: tryWithDegree: d = 32; getAccuracy rCd = bits 22
chebDivideDCT: tryWithDegree: d = 32; rCMaxNorm = [1.0000001111956630793892584029590025252267975394715736453891637740629413269743406963733559083303190253161504771756806496191386435906828134209906523235063206686117187561952858499018830606754904694197753651780246551991738491497418319300192073366745695433841811333349103704486067740034236261175157833336780810471475070283832899789115974763663904790062781558149671625762773063213739413167166583620757759268880829009178889381924499784801427650609220412112768460517374516285592736454070518991590169582192274669483060383752502962166774547458047612299818218684066550849820487201213836669921875 ± <2^(-22)]
chebDivideDCT: tryWithDegree: d = 32; maxDifferenceC = [0.00000147312368495196552618949201377066500772789379137253148901057109943663409901914038954841643274568826165056177175470459515495191478709343339021746600897190073941599613059814940316445838883189067667253449814183451536651496163214581823226908350845097072829445772295381191926975294921085185749993282473600918623540724684945530894160706927977101331765313554515186858303057196708866847527596090132091612495890266489359014777514093287680983870733978193271152285336411912831756296358439841047980345989782996076336436908765829585013291453479024494192791860090559403519139269889137722202576696872711181640625 ± <2^(-19)]; dctAccuracy = bits 18; getAccuracy rEd = bits 5
chebDivideDCT: acGuide = bits 10, minQ = [2.109359212867740370737592442108588519880555817165036043029246963409056356927440196882654610543994522231514565646648406982421875 ± <2^(-3)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 26
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.47407761407155345944301606076514196585651476429574738457518007854108007861444415772554744763430737637845715971839395088074289374548916311175255342974577022703650366038899076090189358064771998307970140958374871576297797260589772764556067306713808244210673488550743310002248359718539789343957152286476138154365647653065341789294041031709424259031756870641482624144328637113302548882960011366375338901490528804901441784534755205820266382573934690401630681064534431022591812256261980564053803988144863978959619998931884765625 ± <2^(-26)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.0000001460026345229709448923178171016256209875809755988732844119335950212604325244629603358454714960218997687173945434563895509689377344331032988281724716455161182090093894893300300424542326397523777365675785264738468124507663476782447711279556644973225343082281834305350172997600534038180047516619638261480219380245730132321742327172989481734662648931514729882646512077449665847675930487045357398117466375215029118751497022268034390072474024510657762295664029222088627621053007041640862310721618306900981831830677037942223250865936279296875 ± <2^(-22)]; dctAccuracy = bits 22; getAccuracy rEd = bits 5
chebDivideDCT: acGuide = bits 10, minQ = [0.99391721231588054401077221574560338849660131656493333623563544043308562692873572093528455884126060482230968773365020751953125 ± <2^(-3)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 16
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [1.000008022601210662739205607630022815323525373634357975430706742146198115313473159316627257926295249020560238805213975677579086127899592582752013844602195609254306973670797010069671568612892767677753785075745552041149905574412756148765540061635044662839970212812970641416971973283624075703245908258332208890313133686775988067382714139593856741430590357097405507299589477589464651923479066243808251605607575147859146200272740213046216634381054331307054979258933780998520920025966762789693120794254355132579803466796875 ± <2^(-16)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.0000924137205132793250692834334844283575697964029757882570400150417500716905257631502213008540342123487324215285939259798278752996724404873098379231173903254921374474184720865382825738561321913297008196535116339653351698247625723514611690197066230640794311022307308869164887460904240774655282294766083829219910647729043485830815017794083200840902205314730173754346073562412876971257375065331361950944775106286023870953499821006572539910196625740788752200543445785347582188212464577901653832274486699560611668857745826244354248046875 ± <2^(-13)]; dctAccuracy = bits 12; getAccuracy rEd = bits 3
chebDivideDCT: acGuide = bits 10, minQ = [0.99391721231588054777752253934533390847863028606507031360262241710534360401646256978104576607080389294424094259738922119140625 ± <2^(-3)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 16
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [1.0000080226012106584876173923389476341880546265425255007120867608602940174293921959030287354923243391515044327457709613313130439279592966009767962503732645107034938033670909603641934805625580242593059397046300277236366474563798958157246895189765479197291508458427585334814346928039863916669588554017603439576401607404204698201839204691552390245296318006482733199621903900055237955225266254574940381264208035053477092019485574920859641608158599268726023293589468597133565889762026046572174209359218366444110870361328125 ± <2^(-16)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.00009241372051327930436538386539916240893865341395227997634508943394679096249905400603115936403054216938846427551887543224360104137707136505302540792240694852512831810969972801371543208994069740296995776525389540259164794475087839488100772010059198728217726753496827063542674200228437563073443989762674873391757463766483835600649621917233647637922238029337244475467074366937693375070886302611472643630564614076306342486211739478473403035181542204146277769894643876890721519780758450015323572819536668276896307361312210559844970703125 ± <2^(-13)]; dctAccuracy = bits 12; getAccuracy rEd = bits 3
chebDivideDCT: acGuide = bits 10, minQ = [2.10935921286774036882814537221378695629192545624164267792366445064544677734375 ± <2^(-3)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 26
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.4740776140715534600853794253266652079969141695176403465499016329882607585836274153409027826308109605458596029520915688309411697424413121100007687451450775223375512694258861356060208849296918873164406736393169851196560890019896047639779844591612079085507502895779907703399658203125 ± <2^(-26)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.00000014600263452297092658805379996526349410441515782095360878317611782881475900457386809562022444316002632626458673480517757711075273207628804126772409711266916773214159156829412152560596725743950613465484458335759909476547244383632731582549289412900071350635270240018037197031205291342972050189052483280838411893482867672990359912563015376840185211403246500039916032200030949672596450080288692824904420031446936518698524329746621236141459814378243368550377026723729321968919735969760549334321166579930828532951636589132249355316162109375 ± <2^(-22)]; dctAccuracy = bits 22; getAccuracy rEd = bits 5
chebDivideDCT: acGuide = bits 10, minQ = [0.9986671692983683639743799209982457809470208864860539721263456065356569048478283513151261552298620927103911526501178741455078125 ± <2^(-5)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 11
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.999862846292435209906470118511344180810485175205268295498316389321373089674268362280505225732837699455353217145216310900540974690963801762803168810988704147159943431506626265343720022526280309518570696020144299773387425353450428999684110850920055157301654857420928499942699672546441723732938532282039092998091732688850903039364429146013315209961883355107379904340397511329007130866816624800471299144641062408845883916730996346598775245552395621289842558648510869323937690970297183234993809719526325352489948272705078125 ± <2^(-11)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.0062985150822610210472103721593459416562985840142172976382836091058884966329089326043868070755799526995363776240959155193089554276137022923795734679733653783568279370486418436622658858167711513534554850579154782959600663909753623650397017377520676173848880889585778505656795933565775328313902508809877112647251748301668320633363755666626610824771421195827569353875031715614228109276001855443787836080579937082589290359975208541271127161635836403536203893306184769170370167827515298455444414660320262555615045130252838134765625 ± <2^(-7)]; dctAccuracy = bits 6; getAccuracy rEd = bits 5
chebDivideDCT: tryWithDegree: d = 32
chebDivideDCT: tryWithDegree: d = 32; getAccuracy rCd = bits 22
chebDivideDCT: tryWithDegree: d = 32; rCMaxNorm = [1.000000111195663078569774909264657837845281420923493053086906026698376274953587733808355481295112345193599622893055071325006964763810973539445353753473552998802429746613548938233939510699861214085493066363643325557849958439504795935784529893471917983567541655005523015616927972583854837223213062863510271094305089479748928018048851685015028646077570099039911704320065484453908536682134184030028369045194572340595825568814175944549540728918564600722511375695907613673387734505740210754958933981147609737308435826195595085600582538389275732179477251815313820770825259387493133544921875 ± <2^(-22)]
chebDivideDCT: tryWithDegree: d = 32; maxDifferenceC = [0.000001473123684951965458573534756815669922837552538960207994145059088790302850438205705312604892719182155693889244196218193467684144156609766108920703350679536972185029738748612115777708475517976394955110103966155785726165816172224904349724596268444070703329493230839281053920311150153999737620266937436327773582038354275210267289334374640806863561509595155518946967360744064191993274402928035014219471369018903744950593785720052344419850482132788736050284216663562871569424669905605941933087055202580256365830560466503624794091115394655988076925850261114018906194456093317057820968329906463623046875 ± <2^(-19)]; dctAccuracy = bits 18; getAccuracy rEd = bits 5
chebDivideDCT: acGuide = bits 10, minQ = [4.98930503190383670788719396735019263877664030815139994956552982330322265625 ± <2^(-4)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 32
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.2004287158981033094069855985578704383702507612329474111644417768568805964193418004729543308568300852899234990949485484124850193693091891940119788549073409345538814526548320259280945610181195679782431208739205752974141294227270608152206645232294864554523083910453351563774049282073974609375 ± <2^(-32)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.00000000166220251420812432867539720987917761796381910244235768914222717285156843736588162743067995311690567527470514225025054994345220379613574090686467416860235541140863719815576037626458797789372293413052594696335188644009672742640759679488837718963623046875 ± <2^(-29)]; dctAccuracy = bits 30; getAccuracy rEd = bits 9
chebDivideDCT: acGuide = bits 10, minQ = [0.9969965321908321365136939419213196210722698452115624114906775149925040378039472926713533695863844741325010545551776885986328125 ± <2^(-6)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 10
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.99942125630108740508789754715927920553857396112007086606471063407974763583916857614104970040790853276510431029587521035268399843282207513312049156828651075403323841641473035663278398722815539492557741155329140722473741878584649639020867721159589821651325732345304327887487892539692897052463506263265657947805004093858787567744749305069137921682986740100414280098292769546799298295171763406131473576365979654722607705616371920124286043768599098560589271904270581494706314769457984603651112820443813689053058624267578125 ± <2^(-10)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.0060180324008194452354670092699127301051429114886903044222265578307513575806467911502160177092417342002351944065332863351365011760889762434787362268738701567261392426105282567153764908503313654525279484054562973514562839253889032640293080105234074571628662815671722370424216911189880788481428927739368436013948171625151232830707697154529694789238984837546276770894933078585262548364878423256807635800669102572373977496987772753667335695838709160739031459116895387363287042963849653534093298024032492321566678583621978759765625 ± <2^(-7)]; dctAccuracy = bits 6; getAccuracy rEd = bits 5
chebDivideDCT: tryWithDegree: d = 32
chebDivideDCT: tryWithDegree: d = 32; getAccuracy rCd = bits 19
chebDivideDCT: tryWithDegree: d = 32; rCMaxNorm = [1.000000080191153986196271112472700697302785132683893262715376105243712344890971853006759716575006926352597577355838885431307091320609220414591255450323880508490064844146977908805938815523008491684864222051995619239941830145705043637072980210229782069784471966299572141621247008487841624729344509360805488938451016940244177260141122543795683519957172862365856856356436650413637842241423864024758372837787742347605027433148686165808817387915840019650856873555524938793843787866907101001491428408192844148903666901961116310721133025668508277801482808655464395997114479541778564453125 ± <2^(-19)]
chebDivideDCT: tryWithDegree: d = 32; maxDifferenceC = [0.0000058019013853204752271259488591351837685200969282235698154426977708808336973297598918675796714010391155106140188003826890101177178761316426839852887741673639660812616653034863343881574534922104428083260503932274556884297046110252964331403921325342193004799656440369279964679303570607489628227687325917818042687312776057524094889027279541265955943077256673711769340350545031467258791350246211241222727498737249626927153374408495761654586064687826325093773108241135181814770091016609879483616164252802177014322088482087165601044377809117473825625261834082794197564592053595333709381520748138427734375 ± <2^(-17)]; dctAccuracy = bits 16; getAccuracy rEd = bits 6
chebDivideDCT: acGuide = bits 15, minQ = [0.999987545336442221436017066545714246930175766472999314446412294148141673948129154046900179952928056081873364746570587158203125 ± <2^(-14)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 40
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [1.000000409830778777003870994356600642362145303419131454242048339172050597061619044122021568844599972038561001986158602475498360932017853134169964354134714114496148511937522328611957968085635943036261989057082415105415052471974335387517625407041728387278878616420750599071253652814922546728030886435016134912561196167695348784324894211528807084601586793680332307944161616352526266822277445562396084112299550428760390175019604981956080435255649614230143552200906826799060118240807491785115956872687092982232570648193359375 ± <2^(-40)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.0000000000008879488013736394117612371137691069217755257536595081546693108975919684216065979167345198819485501498391685001366636055193838888013132219261859101467393153138021080849602052352298061238488731621050619800101198764163967780405073426663875579833984375 ± <2^(-40)]; dctAccuracy = bits 39; getAccuracy rEd = bits 14
chebDivideDCT: acGuide = bits 15, minQ = [0.9999978004849200650238763768120590861606164970349922717579290875005408950555646076610062655820598820355371572077274322509765625 ± <2^(-12)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 34
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.9999972475305074753560493680754227991571662803771581180448113988278654118884264662926933467582892938967634648151305784042089341036867124363078345530806207150610140953952867885957646404563687166970957610808584203043453825691216600240335797750215280905858457228821854703313794573591529317368768079548492766751087681030037879559820166938396109594819256858691698478863523816358201753113316465256296531352363864660103042351404616420669345150083404138614955744062031802374834548078979222507367552452706149779260158538818359375 ± <2^(-34)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.0000000000742422420097034575082061130446770859381278029331951984204351902008089026257081604167345198819485501498391685001366636055193838888013132219261859101467393153138021080849602052352298061238488731621050619800101198764163967780405073426663875579833984375 ± <2^(-33)]; dctAccuracy = bits 32; getAccuracy rEd = bits 12
computing max  (sin(10x)+cos(7pi*x))/(10(sin(7x))^2+1) over [-1,1]
result = [1.271885935480843284318100537921592355266747887439745029506554873704311185332165898163734302256674357177979646523985199412799149201855070242241441647910068928050808789317190154871200027713890479122205570503942978938700923092148435930578620417657902696988062237381905995637804573952130617560523229649518372688118383478026500600095204883187181697934745082699487940229381658952014276516522881247524466952873223258002835994894514426780776692459638387030967740044253761955573646367264988021883453939153696410357952117919921875 ± <2^(-11)]
accuracy: bits 11
precision = Precision 520
	Command being timed: "aern2-fnreps-ops max fracSinSC lpoly 10"
	User time (seconds): 65.59
	System time (seconds): 0.19
	Percent of CPU this job got: 99%
	Elapsed (wall clock) time (h:mm:ss or m:ss): 1:05.79
	Average shared text size (kbytes): 0
	Average unshared data size (kbytes): 0
	Average stack size (kbytes): 0
	Average total size (kbytes): 0
	Maximum resident set size (kbytes): 56236
	Average resident set size (kbytes): 0
	Major (requiring I/O) page faults: 0
	Minor (reclaiming a frame) page faults: 89008
	Voluntary context switches: 1
	Involuntary context switches: 75
	Swaps: 0
	File system inputs: 0
	File system outputs: 56
	Socket messages sent: 0
	Socket messages received: 0
	Signals delivered: 0
	Page size (bytes): 4096
	Exit status: 0

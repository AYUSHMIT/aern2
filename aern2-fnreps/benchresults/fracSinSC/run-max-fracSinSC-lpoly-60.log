numer: acG = NoInformation; ac = Exact
denom: acG = NoInformation; ac = Exact
inv: acG = NoInformation; ac = Exact
res: acG = NoInformation; ac = Exact
chebDivideDCT: acGuide = bits 10, minQ = [0.996630632603935935362451419412126502632261782381462042229965919552282793691944107195013202726840972900390625 ± <2^(-6)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 18
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [1.000035341974201842274042292079096427426083849383580639357372913787473876397984103280061127082400595384388829367260218847482128386562786656351813313668699723731956650794331301860004934892921133911468834888865466931235232268403512297597125567490598182930077339778019419032588960474954474029205243389759450932177328426759594434766941086055758834720119565686950050847205078883226081565209575046333462239616311000162500949498033143061601416836834153186332754873766016674246411637355484713918229999762843362987041473388671875 ± <2^(-18)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.0000221670045537439035534910600881106279385636987491348079331471330001489352112519608915868992590984997587296372465738814857020121062157102040204446504561486896101138122381255211624823689998097558676732279515074368080648279802221695708020219436807967467900841050957012058977971793662490723771894183208007204588698785836487926734348622017514425714374357868754945834429835643924794117557269214241904389716113031518702537227272220121676582493819296360015869140625 ± <2^(-15)]; dctAccuracy = bits 14; getAccuracy rEd = bits 6
chebDivideDCT: acGuide = bits 10, minQ = [1.2496573042833385405914661620146196945035921288535973872058093547821044921875 ± <2^(-5)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 26
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.8002193996198476481311818697755023540703671011458147151216526214588374528831475106325562405851743215175006891874503824827745237261130272068281071079439749816211057669806369684319944917880850491416039290977157974951810097898949959975947707787984064520259153141523711383342742919921875 ± <2^(-26)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.0000001945720846759650357448182093209277090624204531981778365289464470738431892591046456613935758183890300069313306623186098859972276784258128825996776679670199826885570049236217160995588860651944165600354690302549843344783334981970144620013134948913174895145190057987455860975217517738055582848169485272003001161444266235605486508451406647845053123852231388345584409441905407408404439678806192534144477959927805045775399406249306366589735262095928192138671875 ± <2^(-22)]; dctAccuracy = bits 21; getAccuracy rEd = bits 6
chebDivideDCT: acGuide = bits 10, minQ = [8.3689817600709921545392537003092703340456637306488119065761566162109375 ± <2^(-5)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 47
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.119488849261340398271816225561780456238939695985678218358719122506735505935319954376427339103329985279155445619670740723139150686407817235055813272427700610669546959880523611247658484540778082291418348100506221989317000887401392203834670406032573413706538247892885440393229146138764917850494384765625 ± <2^(-47)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000038491081614394133115375853886634628058373373132861061662879365034184569955609657191563205444262662325765875148052239312665879534755990420034735992300924923285617092040222338165623300836279258947150478344296532784429842877216287888586521148681640625 ± <2^(-44)]; dctAccuracy = bits 46; getAccuracy rEd = bits 11
chebDivideDCT: acGuide = bits 10, minQ = [2.2375950678604355897427537624248534801896237667051536845974624156951904296875 ± <2^(-4)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 32
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.446908385714287084167044315735201074122988691813424435588149989901482259981225661929487897339503274177802902577998671441453625252404668514175969244219326964590084311561261485767617610186261493406807505313074293192287771068942524351643241876938582139711098051293447497300803661346435546875 ± <2^(-32)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.0000000012600438407573947629136392885556942899949461889264057390391826629638747441474857076390472130578799503496247265003188817462118957405363975178277671236757250690655382521982404788822028809556473707115784779533569463783049258154278504662215709686279296875 ± <2^(-29)]; dctAccuracy = bits 29; getAccuracy rEd = bits 6
chebDivideDCT: acGuide = bits 10, minQ = [0.99934478010398894972669717583325532123619099439241140111762733144740167290365207009017467498779296875 ± <2^(-8)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 15
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.9998716132272774486564128390559269567547917307021042990074385807217577709873904645894268865098392103903704565785050728264912020939253450536666471160049813124608572758200355946817187675265219657640703756416919529980558873346886746126991160057387052986585636844716866864852268750338265354597421958799890133842108493486203358779171726007221180528070538239683932795471138702696644974132010773956852131644113656892314314548871779110578372405264176845256699084821361928538392517683990913524016974633923382498323917388916015625 ± <2^(-15)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.00004395508913794003643405505477695703083699408124379926790057265222397716383724755999306219077266563637784918613700648959101309547454345625003124852495438308364725410385424423473548869938835125473920446227010532492124124385426010044588525659600380681188701862539913390107761539173590817950725830124346948440195505885299327956277056049138650831291801280310675948914343727836015056299946778721309274913317875339686685488744479262683795981360218423022240999063638898525689267796274541100221000533565529622137546539306640625 ± <2^(-14)]; dctAccuracy = bits 13; getAccuracy rEd = bits 8
chebDivideDCT: acGuide = bits 10, minQ = [3.45143295080757082862820137451648379312008074748518993146717548370361328125 ± <2^(-4)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 38
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.28973473170621005697687018036903819229847582264371199317651967499105335492705507339933769312923072228564061584695749880936511629945426821523127279526973369332675016248134794131123185868267732092646990832629772607895429083278722988695509239818652870673658383804394134131143800914287567138671875 ± <2^(-38)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000020111294657709279570369916261442634706352317053301703708712011575703440503607393923707236499427112712272155375193606774485793842468527064395430039374547363361219653120360290749908892008785903646315504471681003158256562102224052068777382373809814453125 ± <2^(-35)]; dctAccuracy = bits 36; getAccuracy rEd = bits 8
chebDivideDCT: acGuide = bits 10, minQ = [6.876391716889510553698110307337294788698756065059569664299488067626953125 ± <2^(-5)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 43
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.145425106825205894684022820994993176647890189411375283290225254804066873885130029672065952176272331595115516272648237427244642074206877805837759461458938145221629837288353696723111056462558340809821247916484963193089641616287132950349931439326710390692449668273238637394850769624099484644830226898193359375 ± <2^(-43)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.00000000000097642466596929187812415358685305086542879915434411941532744094729693403216565451394543323495712512486597375011388633793281990733442768493848825845561609609483509007080017102935817176987406096842088498334176656368033064836708945222198963165283203125 ± <2^(-39)]; dctAccuracy = bits 41; getAccuracy rEd = bits 10
chebDivideDCT: acGuide = bits 10, minQ = [0.999940031437434641062321345164783104042527384081040509045124053955078125 ± <2^(-5)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 21
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [1.000059633959813337614270277857192618736297243229583276432255324062056725026816868328250643451263237608279008231323250557150029812826708714508534410793662936104558788196834050572716414294147123301042768927511694083949593136439479775464159692910381949104703380726277828216552734375 ± <2^(-21)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.00000309280793779448460947985761260055887530505565772818887689859132694001997717215616706373729993868526145559841156490306349499171246267431656025456976763203040892917137405918892133515267873747097286467493336443405584179084599154514345906337036438884881928226154204055042594865017627841796154083939185258721429441915481269072825119599240729678993762087055876260797623779198843162882309372729304549126125511566719451197858950739239861595451172091296095842722258147106106918045043130405247211456298828125 ± <2^(-18)]; dctAccuracy = bits 17; getAccuracy rEd = bits 5
chebDivideDCT: acGuide = bits 10, minQ = [0.9999400314374346428674941395515064594679000009591618436388671398162841796875 ± <2^(-5)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 21
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [1.0000596339598133359937586312068249107752790443746600020852595461248029794775231410778858118331621033312320306953565591487523430486522741307647303190994487798531865852220040034694985812881487609738477870106255487502284140889746933454501902523159362345950285089202225208282470703125 ± <2^(-21)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.00000309280793779448460700662660235658059605092919838720493131874531303462939616411070652685927292762227268081037760837385327950697953184881268942058623647673004295137695338124934466077677857253848018423440101818360317118832674353414677451246536234184362735646126127304324931219128071881203721698057370203359564075026037372342021631775786498370815421611901782522825193674642070261148673109385616105694129271848715878754696044336540595284722614489699928578736909563773327391800194163806736469268798828125 ± <2^(-18)]; dctAccuracy = bits 17; getAccuracy rEd = bits 5
chebDivideDCT: acGuide = bits 10, minQ = [6.876391716889510553981866344667485402286644102787249721586704254150390625 ± <2^(-5)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 43
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.145425106825205894664246378997175857987993736189148158573735801317330760659033698913638086194272775069796318304284936149934078183800378837324596648362558712725243801812602625539190963691772677092190248926135735445586893132635211135830135495102425899782303483445699589238220283959890366531908512115478515625 ± <2^(-43)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000976424665969291878124153586853050865428799154344119415327440947297743672967694618129063205444262662325765875148052239312665879534755990420034735992300924923285617092040222338165623300836279258947150478344296532784429842877216287888586521148681640625 ± <2^(-39)]; dctAccuracy = bits 41; getAccuracy rEd = bits 10
chebDivideDCT: acGuide = bits 10, minQ = [3.4514329508075708282547127843365407373621422948417603038251399993896484375 ± <2^(-4)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 38
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.2897347317062100570080809234635210516596233836817429700152673100217517133220978738304087099780308089775018870752627886641462433997684976284282161946743689658699900418597358837973267836899133373378472156805199712335671989812923594318148029909016651604891645632733343518339097499847412109375 ± <2^(-38)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.00000000002011129465770927957036991626144263470635231705330170370871201157570317062334004722231269317593140019978555800018221814069251185173508429590158121352898575375173614411328027364697307483179849754947341597334682650188852903738734312355518341064453125 ± <2^(-35)]; dctAccuracy = bits 36; getAccuracy rEd = bits 8
chebDivideDCT: acGuide = bits 10, minQ = [0.99934478010398894971555804005131531213013501914514515866712167369012576045861351303756237030029296875 ± <2^(-8)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 15
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.99987161322727744863450370295119339970724930548025578036071698005143224759909132148594238079713318935734684170387798686404771190994197855896159941193801709734074461149409327187883558867507310085718975637092213250133666631424171396721180540541994182875059469049797811339696477064752603552920077579756230965912702194902862174999949521827500013161874536935700371012723074872141361525049647380301315059736873069194568440816517967682066243105895539898842474053064152758444614428547277118486391600526985712349414825439453125 ± <2^(-15)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000043955089137940036419465285064998102883465970403005857127370211090879568770821161402616917688507804477908106931369682105293334163526781108727601711682019456471748901788096338826387776174942548135294961983932974134563564802554743183818464113605178372074911937896685232770850138127250426177807008327812177333492590889902195053438972748244355013718265395662695804440456063520058348067280753562107976118120491443290200372598660426485798513567184127577316544696626092175916656563179792105433563165206578560173511505126953125 ± <2^(-14)]; dctAccuracy = bits 13; getAccuracy rEd = bits 8
chebDivideDCT: acGuide = bits 10, minQ = [2.23759506786043559121162800697201790411927646573531092144548892974853515625 ± <2^(-4)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 32
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.4469083857142870838377337507496307513660981073836932265876864013341405310910338009762165183106947201837732507928865496936333073502249567429817862295607031710909074750253563084511069447452812481478748447476059548167549268856297806457289735521215784212756272353317399392835795879364013671875 ± <2^(-32)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000001260043840757394762913639288555694289994946188926405739039182662963875553788287747743230843028367087887084518625353047647591741712736725823309313601212409897893988779219480530191010332486609589002104743448359476347409025009937977301888167858123779296875 ± <2^(-29)]; dctAccuracy = bits 29; getAccuracy rEd = bits 6
chebDivideDCT: acGuide = bits 10, minQ = [8.3689817600709921545307833708367273306549805056420154869556427001953125 ± <2^(-5)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 47
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.119488849261340398271961348581565287461187893053231262588559765591346648027219726371926212997980186831808348680246779310411919153945440897431466832725975537908924327487572437963010476164198176790723547207984162098914973812865711895719792990330141203833925884450657683988339385905419476330280303955078125 ± <2^(-47)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.0000000000000384910816143941331153758538866346280583733731328610616628793650339146896882629557970198819485501498391685001366636055193838888013132219261859101467393153138021080849602052352298061238488731621050619800101198764163967780405073426663875579833984375 ± <2^(-44)]; dctAccuracy = bits 46; getAccuracy rEd = bits 11
chebDivideDCT: acGuide = bits 10, minQ = [1.249657304283338539798630088494793728692844325678379391320049762725830078125 ± <2^(-5)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 26
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.8002193996198476485718466600927986484104877056142184426686571161425375741473722141950707826604195572293636966060500254898373183205455071913055024953090808495292153037601619125986618478655554902880666847855538207093179130836435399885963487033591068353644004673697054386138916015625 ± <2^(-26)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000194572084675965035622183207002923841348266131655768936747106332037866983415463047886806192183406007702653591215732760460456304159416361539676909785957861366064981563273755427456488678585916039909453467248008778181322394770312547185202184191083963084108489385072811896309022770062829878049175010246996369961316067100595636843138650619641691527207084242089806304385523496402858121163306189894794962043288210742420819843179202734972932375967502593994140625 ± <2^(-22)]; dctAccuracy = bits 21; getAccuracy rEd = bits 6
chebDivideDCT: acGuide = bits 10, minQ = [0.996630632603935935902308010986889229609901959119610487892417088613521147788532061895239166915416717529296875 ± <2^(-6)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 18
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [1.000035341974201841750252415795647938215231399999254765792191853531771913592380714291727907458500594966773270488546539126605132790527132440607000105151476827548062763902624071169419297929611524815530580922000332927133186992164064242440650134240125000296991963539771662800576713327617713943391914940561656585361513988608080726514771256525338846830524816324657547303500069595471553332455057061586089010787042812078768351100245402690022839203397174005161287065011177202913654374176466443913113835151307284832000732421875 ± <2^(-18)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000022167004553743903569935978123993750056622403946157870358343174923425169537850936849685666742823616934675093180972214625130991457959575646873409026147874727174927683166595369317539336601548789893988357385598360446849755216567748958552099119451074977432100344122685798078235605399395057586558075538141436604627377881102752204142903290468611518867856348375654973478536334545448762172873270937186788537359977833537320705825646172115739318542182445526123046875 ± <2^(-15)]; dctAccuracy = bits 14; getAccuracy rEd = bits 6
chebDivideDCT: acGuide = bits 16, minQ = [1.0016654067840903735363885607201315272422881275105055465246550738811492919921875 ± <2^(-12)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 53
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.998337362184207625434201710681607389932405157907715860881783123193610997483037597505753464956500391429340750158821972411543657339015924523762560489074227679145611213099209546798131197522400075467693779944197608181986011816841015487998282405314535919620248731220879404860101976974695163829098324309199657314160730925339895664511742920662703709610892450574457584831851248549530276963526811623452960910455841561111024700310349551626672968855440442201903516439066848361346399564329213982549759975881897844374179840087890625 ± <2^(-53)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000000112376039413589928709114672707839388899851571423579854602792241406952064248735786753902202837637352571125125274971726101898067870453432337084301177705704318599077880188132293988946861467065262973481675943220048363713203798397444188594818115234375 ± <2^(-52)]; dctAccuracy = bits 51; getAccuracy rEd = bits 12
chebDivideDCT: acGuide = bits 16, minQ = [1.24825615393891790916126798452836545172406346182469860650599002838134765625 ± <2^(-12)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 69
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.801117620645781281938138594397037736618834508782823298776075792455884091352308419086844189394139291196911828472189578022859882483164841262660669908332984559035009623850690359359766365849493032185900049293021812245351180988688630565401135065382944923794398593920117799954674765012217763082702504107146523892879486083984375 ± <2^(-69)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000000000001550910853466503279337982327463037998767904700700359013742353838954203933723755026737663219399614937591109070346255925867542147950790606764492876875868072056640136823486537415899248774736707986673413250944264518693671561777591705322265625 ± <2^(-69)]; dctAccuracy = bits 68; getAccuracy rEd = bits 13
chebDivideDCT: acGuide = bits 25, minQ = [1.1042738379729465363013001772574809514255283849282924683867907108148854919488354034222930832864761896416894160211086273193359375 ± <2^(-22)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 69
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.90557248176380220677125838623724920302897219006878781427402200060084494321934495221675091906087488078705569864544787184291714112635138544855365892063656798631066455833563143030293066921615142166863962294983210934524190504218887659648490305608728634626691972624384738801996721414984924114488507029818720184266567230224609375 ± <2^(-69)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000000000001484269885205003907120900547892096003293383857375319579355436305718495116926679661148236432467367437648052239312665879534755990420034735992300924923285617092040222338165623300836279258947150478344296532784429842877216287888586521148681640625 ± <2^(-69)]; dctAccuracy = bits 68; getAccuracy rEd = bits 22
chebDivideDCT: acGuide = bits 30, minQ = [1.1191375867015350867567294313446629275249184100209051718589913204620920910189610112599016555900988123539718799293041229248046875 ± <2^(-25)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 71
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.893545183257875767893511366567700206016135894060582429011991918962205120835150261053562111192980585745248462254338541619063100700265890394303507709320100224457278073515132691767156325267845764374092119746620182040814263638481525184733766863147472844758579971380868524288667020059732416792375175873530679382383823394775390625 ± <2^(-71)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000000000000250493167515161403340288150133509699132009635690329362850654800364637705171724801918926904626055367278609070346255925867542147950790606764492876875868072056640136823486537415899248774736707986673413250944264518693671561777591705322265625 ± <2^(-71)]; dctAccuracy = bits 70; getAccuracy rEd = bits 25
chebDivideDCT: acGuide = bits 50, minQ = [1.121656579318638857423660038268416470234258783571955476309730717467011439948676443378872136236168444156646728515625 ± <2^(-46)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 103
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.891538478388331369967399222836781884043025795709220672286271861085288622461167377361334957122127216762922453209370865009689612893395226670767186837323199577775989340389560410455441155109345545991052490988207594199609182473905306133163676380049659784620807604157427148330516600192986141468656809800329143822494870619266293942928314208984375 ± <2^(-103)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.00000000000000000000000000000009026372287030348272835214807661483188500425765695876075536560782012147398512795612211736224029435361622966524658665100294138345561609609483509007080017102935817176987406096842088498334176656368033064836708945222198963165283203125 ± <2^(-103)]; dctAccuracy = bits 102; getAccuracy rEd = bits 46
chebDivideDCT: acGuide = bits 76, minQ = [1.12208989977854640099488976023307660082221860445934007201087178214021787554242501849189675741662958100591687519986816568007270689122378826141357421875 ± <2^(-72)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 127
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.891194190587900453357736737934266983320271250732891898058540548512952126116548419717995582996669902983070774873588130743299568443855856634135776342024564582942009625369862791765843738450329500677561561448976594329409572616452306909347583062553398883441657684064914417090049764191692857220602863552657917939831446520958577531193284196789969531625975593121141138304032430351983176557576960778881958304895440537948078875390851502444724678401143168640107442188305092839545088663113885764656535380098606258558304534130034557648514237371273338794708251953125 ± <2^(-127)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.0000000000000000000000000000000000000053723265160395855548775087105247003473152026458094468954147340796001692372113509673317438966600186974428929497544309659619950669429767347048506475864004236697891362957650596183849845015950437077307567934614240812152274884283542633056640625 ± <2^(-127)]; dctAccuracy = bits 126; getAccuracy rEd = bits 74
computing max  (sin(10x)+cos(7pi*x))/(10(sin(7x))^2+1) over [-1,1]
result = [1.2718734956522845469841728677065573298782292693379583743050940333766574333306488433330714283709976624882917134049075720099913870986964942417374443173692996098247824692012951576684146719299077888135707192493827584436635387396564774863290392392656258380156941711902618408203125 ± <2^(-62)]
accuracy: bits 62
precision = Precision 552
	Command being timed: "aern2-fnreps-ops max fracSinSC lpoly 60"
	User time (seconds): 51.81
	System time (seconds): 0.11
	Percent of CPU this job got: 99%
	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:51.92
	Average shared text size (kbytes): 0
	Average unshared data size (kbytes): 0
	Average stack size (kbytes): 0
	Average total size (kbytes): 0
	Maximum resident set size (kbytes): 14820
	Average resident set size (kbytes): 0
	Major (requiring I/O) page faults: 0
	Minor (reclaiming a frame) page faults: 1613
	Voluntary context switches: 1
	Involuntary context switches: 39
	Swaps: 0
	File system inputs: 0
	File system outputs: 64
	Socket messages sent: 0
	Socket messages received: 0
	Signals delivered: 0
	Page size (bytes): 4096
	Exit status: 0

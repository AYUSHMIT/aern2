numer: acG = NoInformation; ac = Exact
denom: acG = NoInformation; ac = Exact
inv: acG = NoInformation; ac = Exact
res: acG = NoInformation; ac = Exact
chebDivideDCT: acGuide = bits 19, minQ = [0.9999864386695410197468290148395665087789960037212136138999568862864470225503002388973972092145459100720472633838653564453125 ± <2^(-13)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 10
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.999426380910470995738169503910955665103569191870995348897711651173272579285393649706337013593829849432724981082603395341096613485197245615754395989167372783078797458115249892772271786434780680480102275640360467970941977908994069324878734802406266961365188648421588045617918076702128779794768304211350865170538046182199636900988012911160407545754592500434924842478882127274328796938416053303657550562430599140277977890751294806309851833495357853877407753196455563558390971647484891937640583137181238271296024322509765625 ± <2^(-10)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.006313143154986971705155386545979994128211908640397809699647498498879072453288523001326091989529663466434440112105719348699486126715427247583109381457160826570988361926416012834740232663210514460768499035414432742502502966022976252906408372908021318757150276903931140169461188547900372453607677774324009327330495633286198552492893563687089475979040643767648796092261658798043635194364447602971566542546791331791683653518241301679371805389413735261756699878527108319146738137268249301502220927062580813071690499782562255859375 ± <2^(-7)]; dctAccuracy = bits 6; getAccuracy rEd = bits 6
chebDivideDCT: tryWithDegree: d = 32
chebDivideDCT: tryWithDegree: d = 32; getAccuracy rCd = bits 19
chebDivideDCT: tryWithDegree: d = 32; rCMaxNorm = [1.0000000849786764128309704567544955186277881401450154513954301254236290930137456797471037991373678914349273212898652907312536807000515775956164202017138811167536032574095342565893361031242211536945011280955020372750193557499551372789266657598374710827424772963250011496465724520485678880484420508032551265820867639504697366869420028539137909798484574533260216044612906360970713130451582057464678034701810859461542068908020325525517263714843785143553357478594109548230295591203025702251444254380486173770930917242939587555113532614650679233706843940243658153121941722929477691650390625 ± <2^(-19)]
chebDivideDCT: tryWithDegree: d = 32; maxDifferenceC = [0.000005839411449608764828652874555598378800241079074840138759198936419501039324660808401767290411766588492944765640462914353229687854636869823014466647562017464200213927366223103538415417113736947581017816246581640639103580791060362536536344836376881231317287008299350589735055126792100703859022277861436377947589238679025157878437666412785211896855486235665878427994697032583270089887881016661648421917369405848667446539125597471143766594987497945996655125703620844552998331055686304594156980748702705555112094989323155157036721829261192617828737163027431086685659078483467965270392596721649169921875 ± <2^(-17)]; dctAccuracy = bits 16; getAccuracy rEd = bits 13
chebDivideDCT: tryWithDegree: d = 64
chebDivideDCT: tryWithDegree: d = 64; getAccuracy rCd = bits 39
chebDivideDCT: tryWithDegree: d = 64; rCMaxNorm = [0.9999999963348368300043590970308896692691648914882245145228730796065744737180990042402782220297190330511619035382648721309972842242266679462189095865675193266517855588122870995395967638232618051556519171005266364421485087196228876772402988826960313208192793766152295060513696428007243769589738559435223299763309035862801105097539654209375354037265369614736678420689213774613119613624251815295647866109118864309210803177570513338134578929757426420823982331170061063042791546644334707630014208316419381727400842088320634118249949439850066344746883917102441364940896110439027668876110300155472642064886207187540227373017615582174519442000623393907355343899806996047335738079901712449526485215756110846996307373046875 ± <2^(-39)]
chebDivideDCT: tryWithDegree: d = 64; maxDifferenceC = [0.00000000000535197486713349294433211116666593303762675948412972209190270957851588674646850019417935130149369793682456887009321449736285370383095170417517741347997010929085082186847101718191513915114923828310696305915436905791031583751122072187128876501084121890513986516280002744153707631922692230994312572869567763164169252628165439185522704384861768519955068059301054775446777884474071658237368545662606680156624221212063028623773730158319065149099014039171770565433667183029994569891265635956633895466315858055459478382820864120029055506420371260818069684598936107463665678627071778020923478326163809514366026685101101355477257040849702883640957597530368660643011073356931162772313572946355559463066961338462146358097015763632953166961669921875 ± <2^(-37)]; dctAccuracy = bits 36; getAccuracy rEd = bits 14
chebDivideDCT: acGuide = bits 19, minQ = [4.99832887438951325574684317948329233597017439872869854508692982353572857276279383753440910265197771877865307033061981201171875 ± <2^(-13)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 33
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.20006686745387593593360472666782357236133638367531870798457112661845654921136556222024446910556738113730439865564082386957019571611207838772290705767142272965563272006781779377114171837090327994185676228600300253069016732801503142912779152174594267863257414153366749329589977230763152852499588447805028526632155836343588121039954183256451272985333403637781618789573451232364196304160638487121068529038675854057187530302701082754022405510002103494405799071598773978246691019800451889765202651005893130786716938018798828125 ± <2^(-33)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.00000000149192780440723769454079254900768541841912783830320635690411630964287402216561730135103486837972970131877323557799114853130703326716458894175439315980510030359480131550202624574100537613851014174250915819856322809195174248419032427756907225929063587321101224585307377631106324552566797535914168958122240229092569606482915411251123893944468277145725983624467450205012995731761503466685504772977454092519428104211456439587423247694407902469975619504285100723797717263644632714157736043432405539815887619836676236673156381584703922271728515625 ± <2^(-29)]; dctAccuracy = bits 30; getAccuracy rEd = bits 18
chebDivideDCT: acGuide = bits 19, minQ = [0.999982948684939908719840782797063669623978445363784177244680144270388017813482842317818199973089576815254986286163330078125 ± <2^(-12)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 11
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.9998585700031793440392576455953025959209676462319325669130780835441818430545329548761843984293479649191022015856246726228409229584579963830232991868623173660300959758600701759288481500200593440469485026087638891311486295605609151055834798903255027184637028562785134253416892517806520709701059589649257181243648091205430937882957450311669522243115438833840788713734863140913799711748007703782021442410965009647118118387810515637973177441297003843847367192994806270790834404880477459531817885363125242292881011962890625 ± <2^(-11)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.00619603613013860309921332456028568546997246827778132497803041719976982756514738101347883415803711285250165818880928625757401142727172604493902854457170444513870750838761204792952430601450582405162469004287180924545961234692118600593472594592630230842742427489633044120802042292323678598712279239836293384327153258167954198633811934783535704064757687256964710148972671654993734616877369952595756508719078291203325483348866169836821731360942596087260801500898870125090173904858747357007713041365803974258597008883953094482421875 ± <2^(-7)]; dctAccuracy = bits 6; getAccuracy rEd = bits 6
chebDivideDCT: tryWithDegree: d = 32
chebDivideDCT: tryWithDegree: d = 32; getAccuracy rCd = bits 22
chebDivideDCT: tryWithDegree: d = 32; rCMaxNorm = [1.0000001158047683725472511872863323233247154912945540679119931452426150709819409673263245400582565262512955152278157474550687392959825399012987626663059263568010152953255569106326477432103373299843834329406256754775649844140428946745478812886908903509235211576353032389277794280585055227743967531621022239406492535401201493280241762699799174975713775116135475858781919639133767717295242413259951749399141441391577616228203728402616870910807854182277543916267002679079448888952338390325078712621733391224594621412551367912139866488335372793523625478684380141203291714191436767578125 ± <2^(-22)]
chebDivideDCT: tryWithDegree: d = 32; maxDifferenceC = [0.0000014550249132334660235516644857066397147972009796864317785963347966725376762967434452717896148837281555098029632842706018576475588609120672327786226063482330033585589902169027362739224712873349151411776960063219767473194804686949329885569127046095164645166556616849907392532209060876260811914820577811207825792478875681374255202385941720541618951201536871565256349962577943022259555690036399017513214264504010709782981756914237124170038659416733658358605291710410515137681701349484211635432398581458647188108591400920294464766540374738383201563437409765781882509116940127569250762462615966796875 ± <2^(-19)]; dctAccuracy = bits 18; getAccuracy rEd = bits 12
chebDivideDCT: tryWithDegree: d = 64
chebDivideDCT: tryWithDegree: d = 64; getAccuracy rCd = bits 45
chebDivideDCT: tryWithDegree: d = 64; rCMaxNorm = [1.000000000000011775708574681300900961557702219248465232025790035020299399309473320947565208362777241584649292070949867695725142780338604383769307696483625902950726599287574037058766519984351353200788786422326781499212560649945734992109161609728906394435531915709511239220443302475966636573703868633408162967840363990404185633407159044584621746532836514017478709170159723437976979665887753601369389024306780019829720214097602349643707043224895688474464997158664854598111358288438415489340191198348897702229083294953586662703263595100141155854890341505374580265650759482778430579658728156738906992864211615841739230262812580779309033419142873905978757078061863076261860214417886982829486441914923489093780517578125 ± <2^(-45)]
chebDivideDCT: tryWithDegree: d = 64; maxDifferenceC = [0.0000000000003131278327149521967010893044454626677318599533804626454022681348231937149796222303314132371996497888467769776695165727328237250702050949380940311800812540353130187189388574609495160446110764135137889756694085974459440471534088026240796329793692870316728920794596084749904480088970171703641244261032016167646137211653308940455645508859545771496056295801261269423946859692932226767361797471022941516745455492602867809636660381540357673533608808183881702937864952704914538778771917887271191258130714380863247262813505634532861395045602196405355998839077099789547224614886429703636460557782877299059431697524052420409939137351112668010418125975168174899294757031005602112269391252716502873884010368032114468572757459696731530129909515380859375 ± <2^(-41)]; dctAccuracy = bits 40; getAccuracy rEd = bits 12
chebDivideDCT: acGuide = bits 19, minQ = [2.104973234993802133298366017316502292828752367822464918184594775584729609860138054206780966470802241019555367529392242431640625 ± <2^(-13)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 26
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.4750654108507315793163124963655182086690876743687816611046209753347994794730198398382760963815882465772647725961600265530593655405344949859603172619405015809914654549986896417809111435401615901842286100934573067293100597916396834518828115761439947315560560620532839978632099505538973724342481838721126384401597294254691258782185229338208245630040565551648862205261907268946853548852796598977924799191031385805269371979422703263871267233581070940413990672811585600529159190166220323725543295267925714142620563507080078125 ± <2^(-26)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.0000001791583159522084830885559624230453086173522281321138335825616502743821811000685831052753630831914370332572195770516996341830084972270698866866985773400070603126678419519796183823778296904425940338738278908750408135509355682897759388806966751103569895858312227782779721760954738193042456758046763129962833052776305321810943844411410166904448942363799185276144822731293226966691941295111583590479262964584756735888577116095835305971959683736077283837917235923395184613863303341113993553197604262881836856280415304354391992092132568359375 ± <2^(-22)]; dctAccuracy = bits 22; getAccuracy rEd = bits 15
chebDivideDCT: acGuide = bits 19, minQ = [1.00000000519282684799381289469382201292444096486777826982006445177830755710601806640625 ± <2^(-13)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 16
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [1.000003635148789213796024418960632741460482633465267187432207277468928204482725737261123990544287633873608398442786798996840167819650004172822173018979863010717289140079570761542351518471432417835784458822513774666658382592769563549996844559347579950440890391349763356477648323952130617560523229649518372688118383478026500600095204883187181697934745082699487940229381658952014276516522881247524466952873223258002835994894514426780776692459638387030967740044253761955573646367264988021883453939153696410357952117919921875 ± <2^(-16)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.00009587135033173885153945334102968772117720830233600964639368981539537488456769686801333920027844267677425041119365082784175373493105939344978168397995410369228715296376724361273876456245856522340359032018685659626536452940200115183256165867413140611513249444382275427087445106634301668556677472009648476253290795593005320369540747621757572882796440999319551096255846816132443262644833611431507218502428104415873579016988474779430588558113045463211927588060928026052999559755932791967977953627444431816684300429187715053558349609375 ± <2^(-13)]; dctAccuracy = bits 12; getAccuracy rEd = bits 11
chebDivideDCT: tryWithDegree: d = 32
chebDivideDCT: tryWithDegree: d = 32; getAccuracy rCd = bits 33
chebDivideDCT: tryWithDegree: d = 32; rCMaxNorm = [0.99999999489196584932134582088875869964001112442032722883583446549247265530135904246057616411493181958029844464082427069819698473376055975418162303913924943755110715882637952734807570084589288219963920661578914604776178233685295144398329874415513013450814459654111964787886199920925213435740630529835470952093601226806640625 ± <2^(-33)]
chebDivideDCT: tryWithDegree: d = 32; maxDifferenceC = [0.000000001422136637764241305683254505092677618246703994837224217119465676562344449561056295564498482539226742694877889176153287589466921543727488354363023095900029722106643865764370755102236208671877404265177522908061409805845947970736827064078145250773008717671079610067559333202307739397737758198438892882117548693939739256200340351336234660304862690711703473086603659523725454930115028986245159577075445755722279635857831694069806612897469999659996989057194224420094105014946430384251326670733808738009505270261797970184714434977307241780501331331384823907299904603533657887481922443839721381664276123046875 ± <2^(-29)]; dctAccuracy = bits 28; getAccuracy rEd = bits 13
chebDivideDCT: acGuide = bits 19, minQ = [1.0000000051928268548928046373488987751294048184461839192550203430340154112003237877313345516316900329911732114851474761962890625 ± <2^(-13)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 16
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [1.000003635148789206861890723668001506690888468330894091798556545547410699207333064689871449673496597569732327292162727904021707156076992831178787418402715191084399655509753499501765482732260440042847842757696911269241360006537238724221570542485690857196458877294921146732392457144758313907588048667049460870898863896198217034530042143466838894769318927202347106898455706880914980884475540222584033432903202938074332574343099186522554309904139287314429621527596943134528108067834821504060727193063939921557903289794921875 ± <2^(-16)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000095871350331738851576189810256549143849290985579616317106348521872130643119422577903059158270420096520346274075452835680936339097839801544437352937566606962037728854369334356793332715469860366481685657271300969010313734224153714729965101664753633110975393055488079618388452289057326217911148084943286359508756547030658065172519826535116439000766544426968278102554958464512619557876117651064510607374241358428496721102129936489741578154944265992012036049072224891358796177875555723140528659176329284719031420536339282989501953125 ± <2^(-13)]; dctAccuracy = bits 12; getAccuracy rEd = bits 11
chebDivideDCT: tryWithDegree: d = 32
chebDivideDCT: tryWithDegree: d = 32; getAccuracy rCd = bits 33
chebDivideDCT: tryWithDegree: d = 32; rCMaxNorm = [0.9999999948919658423876132953233050489964449849157505090470657577719649784520947381171488583256642949867689753538701210746828863479536585827347051555863354971207345096632406283944396598230953455821311660533727569149355226677774561380318933190249843138458564168390258162525447804183727726424250141461323252503459839170702368328870577042423391478230846108242095570834267252569088035654429940460820087171662064360785833952255298539424235777329794646288593978447713994474920152675487741800117571388101255671581011248167920783007230269648665015795423183231349639754625968635082244873046875 ± <2^(-33)]
chebDivideDCT: tryWithDegree: d = 32; maxDifferenceC = [0.0000000014221366377642415016096593853072316012656162258724120109572541781222169206974737366125103724193601622758377240253438442188927233938607709885657296257507571274063912993535654937284821521523787209522854717109142576037021964641279817917948082722635669558260354739462628753447836269407758758054064247948908048356300745530226496394568723152881808268153415247195967735142629152084695593054435802996436551694426225435103476170999220993482361643657263240621106333751240041918261228727371553280574474839926178403100095111714583518189026750333564610996946014206815804659469505699664892972577945329248905181884765625 ± <2^(-29)]; dctAccuracy = bits 28; getAccuracy rEd = bits 13
chebDivideDCT: acGuide = bits 19, minQ = [2.1049732349938021296925449694352975008637525130596179767650255598709918558597564697265625 ± <2^(-13)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 26
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.47506541085073158026690711335645448813375156848862606268677439100873917447966945695822066475451801547936752544636717713771235624527298000826170071130279317588375506178286881276413539188576049194835795323360133385748180111298288544845279713388190578893244264691020362079143524169921875 ± <2^(-26)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.0000001791583159522085084723666690715132937057784308649453534539353739190867269774801136171932265220644236077978713403098842080226379081627746399718656761983695869590659509390068687704248110862526974888522478673385162625650188563593656904672966232698793006259535913208362761680770092780726598535562009383996470498879781787411629689923417942346500911295628150622225236195379508858844055469622303046165034679286924032282615118569127464922733894529169253677421285122512343298569786055857940506042330565568410083443495750543661415576934814453125 ± <2^(-22)]; dctAccuracy = bits 22; getAccuracy rEd = bits 15
chebDivideDCT: acGuide = bits 19, minQ = [0.99998294868493990988394760075787057223008104044480998342208780445303678681750464006701417662981157263857312500476837158203125 ± <2^(-12)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 11
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.999858570003179342627933118759053216522219963409080970697318496356861093439202614224999926100970040948118790424505796022582496650627547771626884415048655568502679213673741735703754348515912880611717870074617532178485244576545899334086579902234971949055422548611783497031510702992125097053284646919616129979497759872466381542724855233204624271417028814695753166587810751691697131356098817887980854114878607183652007036926703180089320179266542706692235560559243759735558175447979988026414588375700986944139003753662109375 ± <2^(-11)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.00619603613013860450938676589278867298718005080031775211844083999158562656934480559461402742090828511946770692641229387594798918361889152557806593873324683024957205503059948418579777306426614065425733245926185585340566200553533253200871790883555285218630124897765241116368134505692307046487273479852909051725933150348199417807519021791629023194676707666215887742884727184399444319434391107771880670555525143438087279678020650741611748072944695569317470725377401568741092565394408311885664220053371309404610656201839447021484375 ± <2^(-7)]; dctAccuracy = bits 6; getAccuracy rEd = bits 6
chebDivideDCT: tryWithDegree: d = 32
chebDivideDCT: tryWithDegree: d = 32; getAccuracy rCd = bits 22
chebDivideDCT: tryWithDegree: d = 32; rCMaxNorm = [1.0000001158047683711375104566328201935791877460912147003725176046421047778080443336966348426153780631097148061080427311980987225605878281281256627782068304829784069477189853369262216737812447267880619058868511630029318487502548070760946537627156818166365527755480682217004536669598951453659408604678559726548627710256303149740508417817558175367653766431251517836914957536117568469932340063794861869721415962454561975475890161607999326143231667530817027625988186789055550347653468339578157169800647485201432779441726860371828307954277322670290882589139158653779304586350917816162109375 ± <2^(-22)]
chebDivideDCT: tryWithDegree: d = 32; maxDifferenceC = [0.0000014550249132334660593224142210249759957573270477113891808349772566991584403407815689458849879598205679251735400174696923539776518657260870106322386383064099489989968387450619481501897292536334630555400058442578628668552161641369644297324935758348506374794098180112578176458206339178677389321145863059562342539426998895990900006331593452158343097805447040689458135615797285871085499429363457432043576408144312598289438000873564221154504509871296378995652523573421330018070763918840005831811117787937862362819863056438883411392728705918210558502208435536118442954478524598016520030796527862548828125 ± <2^(-19)]; dctAccuracy = bits 18; getAccuracy rEd = bits 12
chebDivideDCT: tryWithDegree: d = 64
chebDivideDCT: tryWithDegree: d = 64; getAccuracy rCd = bits 45
chebDivideDCT: tryWithDegree: d = 64; rCMaxNorm = [1.000000000000011774298806794802780334310990100588973938335562246767735466525400387969767412531855243128489285631348098911591842887240059129266044918269394398865649478926253146482689900138072867412248158267495812942973817472499108072048369802133549719743683252611226029530470250143618545908603672260434493929840026653151831982929539667563829835942592880035385441772028662200588600830055090819711312150790534409010810822499326947994099292361222223054516672831939850789256170224221116452840978982237834604153896319660163143792823547919032401826610093175147754970002903726874495505688617070385749694900403805333899301737566781718823745578977320751738164054657951435173743044530769719102636372554115951061248779296875 ± <2^(-45)]
chebDivideDCT: tryWithDegree: d = 64; maxDifferenceC = [0.00000000000031312783271495219087217950134699145240836393742429133072546143392491156843690882435907779153707508767905836966576872971771990463868740589923646014034226434314952677065015494807377103235435369424858202128279875815858111222331501072062402247943079924923311110536934314138561388320478140090701992434656291758394044937185896062704939179669462469566927449029925887425203736636712393772332733391196628094640231836446852036520018343478945425835393682492780686849091060169988865828485887555336547155214837485704450601989512661378979366371658886227213518083409029907358871028093867299574629206371392066915829958297629942635574852529391014604402084355636023452805141295650113669682155249486359018416306622682905580479229001866769976913928985595703125 ± <2^(-41)]; dctAccuracy = bits 40; getAccuracy rEd = bits 12
chebDivideDCT: acGuide = bits 19, minQ = [4.9983288743895132546950440126819680111771267215330094568770391560974530875682830810546875 ± <2^(-13)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 33
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.2000668674538759360063176318847584316686466744733935562766150938129718937290495531822682753276526782615085348386864819985022114620654793290714928736180659916044401449844239411612009333841570108240236982850119542210816579949804464602704552955779286615989320807784679345786571502685546875 ± <2^(-33)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.0000000014919278044072375907882021167030079533775610127754225417846370065477262529657361674050203183580409226343819182315087640931540470775529937119733529008112627231582152891777160655384144259750430574459505620997755436996950863516973247615068911209375543373486120600360843048380967439143668691134202282710392134019796274899478100387269712797622098498720261571385986619982581690501949589177288333956719278920764178551119680563654415686007758754293146797076111506529360481146724545820182280318017477670883806639690050133140175603330135345458984375 ± <2^(-29)]; dctAccuracy = bits 30; getAccuracy rEd = bits 18
chebDivideDCT: acGuide = bits 19, minQ = [0.9999864386695410197515399325210579818132019538613626302017485314236474504727411670261527643077670290949754416942596435546875 ± <2^(-13)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 10
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.999426380910470995679666779681424250764911100528979539347839966577523226415822858104926142016309209966256224116898829309318310412779532787599128409682552314482936212558003565920304883000827378220752905621444163617482609996661389318965458563599552334554587790620976886095392073191119935755665766362117346687225491336039624065846865109851232903811080630978815489089788255348413593304646137550347957392630399079117781878460834276379287387239563571219457344052519696353093189267169892120445950922658084891736507415771484375 ± <2^(-10)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.006313143154986972138583952377585045901819583917281308589406189155730302622877754401904892836592078168672221210794343540171701657631659189910172321429831659169300021679714972884434348718297355782634621501353311026913303327817175690709563493112462085411594143848878859067819036543506759834223989281376448151034303428708336332070310998917337963468660123818526853118408003266864855219511754578763844366815551984661177464179262804153325652749505208643223960485586665646219774605194460250466581552331035709357820451259613037109375 ± <2^(-7)]; dctAccuracy = bits 6; getAccuracy rEd = bits 6
chebDivideDCT: tryWithDegree: d = 32
chebDivideDCT: tryWithDegree: d = 32; getAccuracy rCd = bits 19
chebDivideDCT: tryWithDegree: d = 32; rCMaxNorm = [1.0000000849786764128268163626712542450985756923481323293433464377324932249770911314436884889618380872131086999533886067015434821765370566504656762425604486628586403967432518305626056182721523261078943828025551251141570165528730798848728194948977731742137552076568319731937944126710127089341766107304292553275672723732399276765423749090732034675680445936074852858547479617323899539044409855084733071418954889421466272711163562851210149384118698747807550145524100068027262209974656777855918943393853602658658593079201916822024777318585594121911654108547651276239776052534580230712890625 ± <2^(-19)]
chebDivideDCT: tryWithDegree: d = 32; maxDifferenceC = [0.0000058394114496087644232889183952366981985478842251943741671478774701455307427722598160256562192095076430211627053248297493607853420786608822189188938042630641145607541873158683499763803415712707368797728867403814827466265130076256663466335663300211773035300558029647415475888507295344283906246749308092069148697796580627657577339969848058821920348152018239476627172909078195207140497440034902501776362305173029745266626919092972333992638777300481347213948186880140644750613977885769166989053631051394338226272163191956989400875910490215791209144310781759012497771355043596486211754381656646728515625 ± <2^(-17)]; dctAccuracy = bits 16; getAccuracy rEd = bits 13
chebDivideDCT: tryWithDegree: d = 64
chebDivideDCT: tryWithDegree: d = 64; getAccuracy rCd = bits 39
chebDivideDCT: tryWithDegree: d = 64; rCMaxNorm = [0.9999999963348368299999930236242215611082584215771757528348124472479693363739683052469695296813716149733715159751458380478885731702256407502911149263125187202346497072834826170744361057950051469763825700766599016724211015883557637688337231844862171364528889516936460820735815067683245512120854779235413601003452017984748650459378237385731003545257830568879186387333127663348321653324249551970646885984293161498002355249308051846027848444267173473377093916808501103968081650592292539800051613759588046372613599135912484347593645646326941753200739110690590934230554600091700183612923303975756907384574946466870613881598580590585662560904638606458949011357189842337761347124125421714779804460704326629638671875 ± <2^(-39)]
chebDivideDCT: tryWithDegree: d = 64; maxDifferenceC = [0.0000000000053519748671334929447148698152964238437680585174992049128371935790876228288049309144571955231349690563998578364654197944199386541146882898006296966382443003736684401186719735081736861435574935197328787196242865637898180236805627636291868419426633017388614349563838717928573558925414836796507163795988045898754085876250378928022002178072904012826101522692611902205745539069673822374711426178648172676226723517210513558444155410736180108891806042995735044554994156268427701536312028036093566023964175813400006022090894021745986878540746565214081351015236553860663328125645233898140471066144820763744048739299684426891057353829278177431921534304264426022159618765632380295986807888579837639026146327465849328319791311514563858509063720703125 ± <2^(-37)]; dctAccuracy = bits 36; getAccuracy rEd = bits 14
computing integrate  (sin(10x)+cos(7pi*x))/(10(sin(7x))^2+1) over [-1,1]
result = [0.0283674623919888868018966089423073846268519957576115785707027143513478751890913467893436326053642210532762885918198443797406946701586448259538467600353022585951810764806676513938417683171678667219636425088121403290498505410127699117405891171725591409811686104779057139775620830104631233848391563352821591732499432241355293024807872453695336224704068153760394081000961937672224279184811528358067601380938647233289549726558748418976062200576824643262998493650593604797781960127852521893002291736013237684978203330075971590771245957366366546422974137010852846429997953237034380435943603515625 ± <2^(-7)]
accuracy: bits 7
precision = Precision 712
	Command being timed: "aern2-fnreps-ops integrate fracSinSC lpoly 10"
	User time (seconds): 235.18
	System time (seconds): 4.55
	Percent of CPU this job got: 99%
	Elapsed (wall clock) time (h:mm:ss or m:ss): 3:59.75
	Average shared text size (kbytes): 0
	Average unshared data size (kbytes): 0
	Average stack size (kbytes): 0
	Average total size (kbytes): 0
	Maximum resident set size (kbytes): 321348
	Average resident set size (kbytes): 0
	Major (requiring I/O) page faults: 0
	Minor (reclaiming a frame) page faults: 4294872
	Voluntary context switches: 1
	Involuntary context switches: 241
	Swaps: 0
	File system inputs: 0
	File system outputs: 104
	Socket messages sent: 0
	Socket messages received: 0
	Signals delivered: 0
	Page size (bytes): 4096
	Exit status: 0

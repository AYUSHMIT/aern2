numer: acG = NoInformation; ac = Exact
denom: acG = NoInformation; ac = Exact
inv: acG = NoInformation; ac = Exact
res: acG = NoInformation; ac = Exact
chebDivideDCT: acGuide = bits 10, minQ = [0.99663063260393593582463151860917699722685461927991272886689527393096197130603302433669854476505634011118672788143157958984375 ± <2^(-6)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 18
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [1.00003534197420184179275601797829276726615445339574826403521229411313500957771671811243697724756071551862606468634721417367254567786873761601162069783283610980821451777223048167660332563289351696204504022668981829417989114799502305442364036243251507512238072447895429904076735976726104983821892775836240675576937653475503159105293805801594362093139641481416308889743576521155357313342947419413884714246576819147651852632269535121648013064080683487722263692219511278282712818749750468299795139069537849453770902465044034812535755918361246585845947265625 ± <2^(-18)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.0000221670045537439035668965860450696148719474697192395370688121848648597420814517537847429468700853736482773023405154414491506336358682024657983666834220666761809434302338035309877951942471969563120671989515447228724569385937035369713296217723409550695208707759146184821819284299107847299089930226329857667752692518058092922276125823905277824440164690680978790817772564764712006425717676362235444510478768193743417899829101491219183507619394646326327347196638584136962890625 ± <2^(-15)]; dctAccuracy = bits 14; getAccuracy rEd = bits 6
chebDivideDCT: acGuide = bits 10, minQ = [1.24965730428333854107549252212483535923283040658155092217374004803787101991474628448486328125 ± <2^(-5)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 26
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.80021939961984764760753760506542411239540062792591516918411990231149633141341553253097775227190470945719669997736659445561286119735424857189148833029701342374837978728370603931168940191737729379624664213127282318090766091800679380237621299868013104879046625168836914809844529372639954090118408203125 ± <2^(-26)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.0000001945720846759650357101438085919886170347137693172490465651909127934586688182296246912557200959018137187280144258208924730606995616783853736460234056896126703898367290061388398181500663995222546435141645448564617659922516967263012464197909662075165684197207448313177593623609802414012802477849550130434236925971539709210621850565726035617143080415890224034622551636704090572658762196169053423581396824100675994649893184976793651663751205660446430556476116180419921875 ± <2^(-22)]; dctAccuracy = bits 21; getAccuracy rEd = bits 6
chebDivideDCT: acGuide = bits 10, minQ = [8.368981760070992155843750968959066554803949140699248498975748589145950973033905029296875 ± <2^(-5)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 47
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.1194888492613403982464188916046707792663500455292148691142599816762265715581861921423577831248033044744876334859962189671613494860915105443720567841119497075244268565813847966340805734399496172177646477913974404563217256537090091041453531193087255356080965319297887185203264795267663611610942098195664584636688232421875 ± <2^(-47)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.00000000000003849108161439413311537585388663462805837337313286106166287936503067617589665539795557761413394086532821409864044397985237914098951418019442636392074808867363454898236213623360039107980535658070620887850921646301080957636685242473362222881405614316463470458984375 ± <2^(-44)]; dctAccuracy = bits 46; getAccuracy rEd = bits 11
chebDivideDCT: acGuide = bits 10, minQ = [2.2375950678604355916590526478453662400082022779028954884150692805633298121392726898193359375 ± <2^(-4)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 32
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.446908385714287083761208122281773712868820337108372930818111530009210989341268635830904448428278811821991607226417281701537268159967110770103086152830339090234404162625601612820561073434430097825190345877687299025313827138198259458401264923228405750415179032469423746343206715891938074491918087005615234375 ± <2^(-32)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.0000000012600438407573947629136392885556942899949461889264057390391826629638671875700067832167651932866897495592149699730739623047908704497351450886087706822210597922876489443916796929976005540297242551560004625778880566559319802331863742683726314908199128694832324981689453125 ± <2^(-29)]; dctAccuracy = bits 29; getAccuracy rEd = bits 6
chebDivideDCT: acGuide = bits 10, minQ = [0.9993447801039889496733693503330890210993397033641772645791198395434839094812577708903944539997610263526439666748046875 ± <2^(-8)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 15
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.99987161322727744863921603013821614905196154979906835052805769437042709301298414756907778487481748628727784275989674871047962991228749967839787477864809872326417948576175942088666801656932084750901646418634104200088056150590575098877857950526892463783371070218503303522705255471415821488013393411378282295302805240520153257524083806242871224891087764819384596497159808958906936318754508187105293807951757750315861333664328886177935597409803023895532854818031191510201695961548271674265778231655184271620129266011645086109638214111328125 ± <2^(-15)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000043955089137940036445382828389621248872678885242314519438219152653800872022979425127563412266439000561329412586111974169654034288993450769792767884944172535724659170129574352781101954226571324780158393418303287936831883325021826019023550311559555961504553180489610632834748052252794269845484442677985498061388291178891275884029578632617750702097396452648702548822531496191154985571646462731040165494621363067145494350412854621934257390406482362765258056828040567862626052726765634319461726275089785698213518116972409188747406005859375 ± <2^(-14)]; dctAccuracy = bits 13; getAccuracy rEd = bits 8
chebDivideDCT: acGuide = bits 10, minQ = [3.451432950807570830099440382224301705888978741734555988340815702031250111758708953857421875 ± <2^(-4)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 38
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.289734731706210056824354465346554862437224401778089228523276461918885758728964979955531714898482480861532946412128766643897515821351722241513145836387422454220161218664829490689417663590441564938605963688230826205491841097579580996263084403232614043764810691732641454408658798769238273962400853633880615234375 ± <2^(-38)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000020111294657709279570369916261442634706352317053301703708712011575698852604951237145190770152178587820437618798187258639803172187986018906925901818560997451564846065309816181644800521439740475440941611838012288617347746101822469899644829638418741524219512939453125 ± <2^(-35)]; dctAccuracy = bits 36; getAccuracy rEd = bits 8
chebDivideDCT: acGuide = bits 10, minQ = [6.8763917168895105552588570306724091407491445781911820755993858256260864436626434326171875 ± <2^(-5)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 43
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.1454251068252058946326499294607609264364366219136900950624729672906791097161614639769658292287483432760390967307777531464871732456198344645797787629606499903478311488831403213265512554878019144970179713014985344384399095175607443619717839426451474179784039586754588140719122329493073753070575548917986452579498291015625 ± <2^(-43)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000976424665969291878124153586853050865428799154344119415327440947294235270672648215744231345111617387773511748867036649876982617491261816828688636600623407228028790818635113528000325899837797150588507398757680385842341313639043687278018524011713452637195587158203125 ± <2^(-39)]; dctAccuracy = bits 41; getAccuracy rEd = bits 10
chebDivideDCT: acGuide = bits 10, minQ = [0.9999400314374346423720346822791937381227133437196219478693137716618366539478302001953125 ± <2^(-5)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 21
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [1.00005963395981333630419316416786772459689956181181776848885584386157667586661616821196747563111968384113265449834268830525476462632565193153873914279680411782564785538094311146044790023872273995297090935306555579274524099996716243960388419765367660284435986917106475857508485205471515655517578125 ± <2^(-21)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.0000030928079377944846084725829673679199178937951995925686493791236713751765566214683024295030832852639728827832399478084286703140011774399194728089000137217008408053008963967245557021302723133201031745574823381099951730560543259606653768794846169020556503455168271179092318591451170552920941850430582516354558819417736467229177388053740567663523350333950936218683696885034246447929323309694559331308594016327408331513918443597004036556294781163238333313427007011172686605916630486756702111961203627288341522216796875 ± <2^(-18)]; dctAccuracy = bits 17; getAccuracy rEd = bits 5
chebDivideDCT: acGuide = bits 10, minQ = [0.99994003143743464237206222703008464881844432169534335475002961857171612791717052459716796875 ± <2^(-5)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 21
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [1.0000596339598133363041651280109313942308098211791557170055541928962524702829593228110911170646381165229559697080963149974506452347290910965066486477667471487590145295260654387810099819769100704789044252355285343870450298175213610889019850854508614408644451287955234874971210956573486328125 ± <2^(-21)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.0000030928079377944846401797896894135689185457251911278447001688395902921109000080106169758207902861687348996991581936087644332052378009266503387131195010320455935480383622464658914390267517785468394561931205147047844316482768954053596418797134436212415513817913500850147080337382328895707103315502652550283963944334417917233400258745944234772996977642502367925177413037548204154735822180938958607838837789697171261368850709014504958990393817957904159841038573414319280362985882526505321266085957176983356475830078125 ± <2^(-18)]; dctAccuracy = bits 17; getAccuracy rEd = bits 5
chebDivideDCT: acGuide = bits 10, minQ = [6.8763917168895105552588583231421162548548865647672634349163445222075097262859344482421875 ± <2^(-5)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 43
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.1454251068252058946326498879134668748655561958909647300213834120812755639756897442500360674899160448382339495133442038317890878024547423984922717544274859998669611742114082234335278442070751250574211736250516451099864255189756327458478497226242379766491166465612122229778149803502799997101391227261046878993511199951171875 ± <2^(-43)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.00000000000097642466596929187812415358685305086542879915434411941532744094729423527890874035889307761413394086532821409864044397985237914098951418019442636392074808867363454898236213623360039107980535658070620887850921646301080957636685242473362222881405614316463470458984375 ± <2^(-39)]; dctAccuracy = bits 41; getAccuracy rEd = bits 10
chebDivideDCT: acGuide = bits 10, minQ = [3.45143295080757083009941793768004410249645305609929313295225483670947141945362091064453125 ± <2^(-4)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 38
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.28973473170621005682435682253210634719158091019671218410160020234400034935210584816827489970053969849457887141122363885628079090954272417451316107538163063814259256101629642374076565004783676292902188664255964731022279136027356886172036171577511116567747197686599606482327207146454384201206266880035400390625 ± <2^(-38)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000020111294657709279570369916261442634706352317053301703708712011575698852596715145002041923883156264342882916448413851309827775664487766543560164091240872770119240307146089158939200456259772916010823910358260752540179277839094661162189225933616398833692073822021484375 ± <2^(-35)]; dctAccuracy = bits 36; getAccuracy rEd = bits 8
chebDivideDCT: acGuide = bits 10, minQ = [0.9993447801039889496733691635308266647637441818668530056153406529282000756646102412883436727497610263526439666748046875 ± <2^(-8)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 15
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.99987161322727744863921736308276873452496959615327609839526489513959054840911746912313489145188659320053132969718115185619517076260210136964826643789438133358761111222489231154397220157766658755070433540205273413019157264209341564121506555558191913537601778388362770353642202872490385431280207003926471191189263646514962637648083122277658928969945210329526665899694390385661148849569674327423779992334813990796414939181843890769941102376329734197161155904715946674399900349389720448870039963377986946824194092187099158763885498046875 ± <2^(-15)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.0000439550891379400296691191131039740507261112469458674776074445128758901247613094880825904675824055881124067157479133021477019410602338988233049828742775661921568411937771211499545898037830709087530030028898645738828370669555794805430021984790514712680142752496911238541138493116100112015201984414153248710737869478411830348040250946342888984720232543752915946663081693811008340444337903426673068495271108701693419022269611136061676127628562887127799394666676926109048408927159986086046245955423483753321534095448441803455352783203125 ± <2^(-14)]; dctAccuracy = bits 13; getAccuracy rEd = bits 8
chebDivideDCT: acGuide = bits 10, minQ = [2.23759506786043559165907213687491077856673828017238479792805350143680698238313198089599609375 ± <2^(-4)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 32
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.4469083857142870837612035168808317985760253718639959295882979573126143078757709951774094573475371235421941210204012932380557317008985642193755681824709129169123015535490939176401244900500841842268478225731409674714226232194507483296609472104191960462677456333434496127399171427896362729370594024658203125 ± <2^(-32)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.0000000012600438407573947629136392885556942899949461889264057390391826629638671875864789675030628858247343965143243746726207769647416634967316498153402461368613091551788604607191337384088006843896593740162358655373911288102689167586419917432838389004245982505381107330322265625 ± <2^(-29)]; dctAccuracy = bits 29; getAccuracy rEd = bits 6
chebDivideDCT: acGuide = bits 10, minQ = [8.368981760070992155843748804072307138676831313184312222119842772372066974639892578125 ± <2^(-5)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 47
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.1194888492613403982464189288804301624732096612612279412140379351854127691929227789160322795432742248043977790613086023612872877814824453330408438412183562739861246164344362259320057003634016332427995564254640217280439277193930061912598211544329824048371573744793092020954588107321814316463814975577406585216522216796875 ± <2^(-47)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.00000000000003849108161439413311537585388663462805837337313286106166287936503067617589665539795557761413394086532821409864044397985237914098951418019442636392074808867363454898236213623360039107980535658070620887850921646301080957636685242473362222881405614316463470458984375 ± <2^(-44)]; dctAccuracy = bits 46; getAccuracy rEd = bits 11
chebDivideDCT: acGuide = bits 10, minQ = [1.2496573042833385410754814280899353102642466514945150668491891110534197650849819183349609375 ± <2^(-5)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 26
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.8002193996198476476075500387196127867928475429178665748982426444644836871344705875337546086009532917761386281989868721739060388196181587065686884882797012449907824142500069732482057792507562063011982264047367266475551904502667091064873325188119910627175114894472918170009734240011312067508697509765625 ± <2^(-26)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.0000001945720846759650357101422568719122602534836314168263141312018513919866306596319055945299936375049990680762724402326193629583787639188646992725138434466382119830477042652402027220852518087227745023311856496976242293671349057332047156190243926593164178145638827146273352413765883013402637731611632454473897730617431869360341953933127441729672789821990806426390876202827724828009905004118755658928246466711251183071996092396841880785285372468251807731576263904571533203125 ± <2^(-22)]; dctAccuracy = bits 21; getAccuracy rEd = bits 6
chebDivideDCT: acGuide = bits 10, minQ = [0.9966306326039359358246364844660066194572394538508577598111079693773791288052515242000539696931582511751912534236907958984375 ± <2^(-6)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 18
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [1.00003534197420184179275115091313999066657735220438640076110719325941570437890538376706311742933161276359606176475097504144189220388377291458424817264025075375483436176507174570412415352013512080098998053531569184835915490055906219475596406421772733552684238208126167167069204111861480755105138524209957500210616058573030332530616753936671444665544562603441458140246610557708433819223377049795335132661304618092971214391453030317131635760015427774002931666435075412301109936963713194444413857512246078552083680505979668140525973285548388957977294921875 ± <2^(-18)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.0000221670045537439029726038116230391547317689079299543338740500221903999082235826115225269802968827030370506620421002296370419395420807106916019352699511761310917339449611324212165059901901677689176704397469499005496362699457468875093452441014398609902754792840623045961181396769176351262699427875570402305150697747119996914853630213462015449072079807734691538478692369833577471268810980760430976017867505416417112259617825853930291046811618116407771594822406768798828125 ± <2^(-15)]; dctAccuracy = bits 14; getAccuracy rEd = bits 6
chebDivideDCT: acGuide = bits 16, minQ = [1.00166540678409037356747452512775715290625246078892729428844177164137363433837890625 ± <2^(-12)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 53
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.998337362184207625301065163356918583116191848273506256656138958900246860385597732732568375559442406287366836483461910592132173344596833315136701885815869199663908663260589363738114087544723546217585571563626956935672833938644413080002335358525640422427242280447374063921536945763230549520171514122193116897136073857799033335377990985306295921601499501158942668358883938482722110272453450517813479655371687976993735590175711371504966075245557311122496995240329650561905772503996653708820062007637581809423838016988306254262397487764246761798858642578125 ± <2^(-53)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.0000000000000001123760394135899287091146727078393888998515714235798546027922384383144219418077654318233727791265508629237537403148646808792403879985115575002606857479508316699004986248808003584898215768656473581386334484244265754450029480560058203764128847979009151458740234375 ± <2^(-52)]; dctAccuracy = bits 51; getAccuracy rEd = bits 12
chebDivideDCT: acGuide = bits 16, minQ = [1.248256153938917909130487463024273567099574106138704099322467300225980579853057861328125 ± <2^(-12)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 69
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.8011176206457812819252426552474007439400009802348735552333142282239169648053047747901388452246515795307405061150787346767830799043203303172610605050736236473628687014170150976309953353957100530485540507752382489592423598500607085846860060720198943854806463834255513354458612472211094699451225625667916130367984806071035563945770263671875 ± <2^(-69)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.0000000000000000000015509108534665032793379823274630379987679047007003590137401948256417528235883703803500952909482941617069256549138878322438832717800820456204363850596201535730445794696002281298864580054119551791303762700896389195473305810946129668081994168460369110107421875 ± <2^(-69)]; dctAccuracy = bits 68; getAccuracy rEd = bits 13
chebDivideDCT: acGuide = bits 25, minQ = [1.104273837972946536296230833195285064796091767094772664624104214569914166637325665973678378877389277651619812181717499195710008308424221468158066272735595703125 ± <2^(-22)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 69
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.905572481763802206699655656309308796116879818180204718070017942393584297667560534088906822643056456433163698197582643841430576641403645858307479479998286360058326394959002443505473279218840720190617550082542181834948317940581592729784936571569221456682878240563320408021472340899049911457218464841360916992758645059009202354927313126044307752987010388674462198505287779356002404426063260642535002701262291855864775570868391952744591891644166034879736890539844853420492399122561352973374086374208089687172450166739723353970248354016803205013275146484375 ± <2^(-69)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000000000001484269885205003907120900547892096003293383857375319579351927903423448714541847800815591157915113311367036649876982617491261816828688636600623407228028790818635113528000325899837797150588507398757680385842341313639043687278018524011713452637195587158203125 ± <2^(-69)]; dctAccuracy = bits 68; getAccuracy rEd = bits 22
chebDivideDCT: acGuide = bits 30, minQ = [1.119137586701535086737951853269268847392999305947182840030411365983553650949033908545970916748046875 ± <2^(-25)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 71
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.89354518325787576788539434362181277187114985310219250951071313073814296675127354544353790536615160627651179316366209342206486459682822731412955837284841593161355900614167112276857561726624281275001703842649062659413036785601801696967629006420160217657007858477208924919102230824120323385918227535561625630511512690821017608883011122332607696779095105039507715912282875160948837213000088360624958936360175904062508415654316405808862793194692344634056779390305513926838694613113471020673517919748374772543191035291398893747327747405506670475006103515625 ± <2^(-71)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000000000000250493167515161403340288150133509699132009635690329362848495799406324809759609559064844192506788116054536649876982617491261816828688636600623407228028790818635113528000325899837797150588507398757680385842341313639043687278018524011713452637195587158203125 ± <2^(-71)]; dctAccuracy = bits 70; getAccuracy rEd = bits 25
chebDivideDCT: acGuide = bits 50, minQ = [1.12165657931863885740123181439092816606790844314337779336778838530550790968224875428856275594302616127606597729027271270751953125 ± <2^(-46)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 103
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.891538478388331369932713001920004705180625612657450661137966640355082873369081728097555531886795879197147046940742317290390406873808946623988444628068685483061177765469576846699875890754309327629605579878209289964154782402312628262442035821909210207613193233689335137377554927019283180428466207733784474191479803295568018484118510968983173370361328125 ± <2^(-103)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.0000000000000000000000000000000902637228703034827283521480766148318850042576542600116164975243421889876731054353617088856535556605234871606507993279417483525808104293964374280642256475864004236697891362957650596183849845015950437077307567934614240812152274884283542633056640625 ± <2^(-103)]; dctAccuracy = bits 102; getAccuracy rEd = bits 46
chebDivideDCT: acGuide = bits 90, minQ = [1.1220898997785464009949226216130068689104861824763396243103850251577411706279519058050294476461785731579058178880945594662781363580129845587793520345076814237472717650234699249267578125 ± <2^(-85)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 149
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.8911941905879004533577099405325977320476635067620211609046292465197560352749973575911593250858730417604690771400392541316348639554784706201961250077395043798745035023310079441096022598093589582220394415644096668465193371249458685164830409630583701822607788644418467208660769485220544017701350551243405144557376661248975508313470889698665939193751141628091750388127384785110169433675279061697145063058778857281478670398108064626034006492396914923177186018969909239075670319360002197118520551769318143792231495670111832975395919577402581608638332255623026867397129535675048828125 ± <2^(-149)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000000000000000000000000000000000001095450757666767055786522194740642615365988458034230176921777161799446057506164823238690842426771886577483124668745705578751822666710419706167839706450735458782698112961492806184117356171384915683931330384996705173961117907310836017131805419921875 ± <2^(-149)]; dctAccuracy = bits 148; getAccuracy rEd = bits 86
chebDivideDCT: acGuide = bits 95, minQ = [1.1220903530333385468699053554396629861809023654402254090230929040756355405388880254406278545781446664499886989256262146147035868158169629474770095751151284909167387851812720323061928518131627509888705029883482211516820825636386871337890625 ± <2^(-90)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 157
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.891193830600813384506786049669183328773228985855479738723804833032913642978000790205530176635536502020668744765027098208048926735056178773258852419763547387414266708251572069498779028021324781603925735992688989110294562930667340322563991515786252526553751567860400690821436735374040877819145405155728418367139650978880923934300246069975640935468705132373861896286809023458650019537758604511746231789677198415261788504479449663401030118394396656717753575463512016493091751305365128637440059069562536575843056781487852582424976974498600159261130410154271997203472427408291146603040823050663817211456898551716404275172974736723968648598067638399586292977092155388321305744571410034637892749742604792118072509765625 ± <2^(-157)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.00000000000000000000000000000000000000000000000606950271321424669603002797807516785660241147071284464215164358667930301459185481746004734224448806748175545257058181155147271669019427644997985506122887647240308472676138204420304955665356766935441273576895624522095815879158306375923777985095092511255042635458193810323035410903003139537759125232696533203125 ± <2^(-156)]; dctAccuracy = bits 156; getAccuracy rEd = bits 90
computing max  (sin(10x)+cos(7pi*x))/(10(sin(7x))^2+1) over [-1,1]
result = [1.2718734956522845469781604601392320380590934505398780131364080033295929146538709838157644103007605657346199443502485979744865764111478618564814901451567484003913091377621565976993783799834229433268422740000274992120777466591812203782019721303734954397127421584380314807035006262563909854476894188697590151575979203028843311784612524206750094890594482421875 ± <2^(-85)]
accuracy: bits 85
precision = Precision 356
	Command being timed: "aern2-fnreps-ops max fracSinSC lpoly 80"
	User time (seconds): 57.62
	System time (seconds): 0.06
	Percent of CPU this job got: 99%
	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:57.69
	Average shared text size (kbytes): 0
	Average unshared data size (kbytes): 0
	Average stack size (kbytes): 0
	Average total size (kbytes): 0
	Maximum resident set size (kbytes): 14872
	Average resident set size (kbytes): 0
	Major (requiring I/O) page faults: 0
	Minor (reclaiming a frame) page faults: 1614
	Voluntary context switches: 1
	Involuntary context switches: 35
	Swaps: 0
	File system inputs: 0
	File system outputs: 72
	Socket messages sent: 0
	Socket messages received: 0
	Signals delivered: 0
	Page size (bytes): 4096
	Exit status: 0

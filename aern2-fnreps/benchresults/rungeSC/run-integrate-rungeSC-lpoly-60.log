numer: acG = NoInformation; ac = Exact
inv: acG = NoInformation; ac = Exact
res: acG = NoInformation; ac = Exact
chebDivideDCT: acGuide = bits 66, minQ = [94.44444444444444436616805926369237292601407536907611467339040670479061064036580171177082121403145720250904560089111328125 ± <2^(-64)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 119
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.010588235294117647067599151833413033935052604884139963918253999123743990604379244602475580041878678503264880776020416067871467981277261853605777232014754118651786354290771493396797534011839932552387857471073806744283596176567793419969736435629938490664909785007346840672020738722533495871904339675113101135413756200452157698524897421381606933419463880510134383723822979898389786219453785972546144735804122509929171966319418271725832108777167185607582716627815987421361563133925134308703645426865317959990097959272637846033739026944641960424064644506190473039273484447119108795475930958251549961722515202922068056068383157253265380859375 ± <2^(-119)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.00000000000000000000000000000000010887150707577517879262756619084712736133306204526326761778378591995756547373862474531967664738919225782439285892985866702292561199783473119691548238885834552877429887335755649617282474296929525139460058796925750625455839855965351751801599758905092496519273481681011617183685302734375 ± <2^(-112)]; dctAccuracy = bits 118; getAccuracy rEd = bits 77
chebDivideDCT: acGuide = bits 66, minQ = [88.1111111111111111210062308808179639678554482314722502744144095076085532761352569728971751477346466601463832431864296031419401924175424806181941960055679918806248451801366172730922698974609375 ± <2^(-57)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 118
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.0113493064312736443871742250314831673421895838095663268428140064294777555275404685466214030864652891536934219018825393775267481982971977953080537799473317650385903955631916462288385346146348963806372751469276414268797432531663468442447528041425519764247529293059616653057106057268989561133037247416889178066571846351298280242989696142914113645457000886103237797882958130679866772734026675871309740624952230303996750783276682692052327850514913561376001317402270385488743815026442173231300560541645605638905180967412889003753662109375 ± <2^(-118)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000000000000000000000000184686840855430023994642081013848272715399290459284021251710790826940482401413146541163307493842910021861385123504369956760130944310810668947632965019240802794324110831858947349560625948738414037197941297563374973833560943603515625 ± <2^(-112)]; dctAccuracy = bits 117; getAccuracy rEd = bits 71
chebDivideDCT: acGuide = bits 66, minQ = [81.99999999999999993752887315592550422630933708893951737048628982048435106727633618628470202338576200418174266815185546875 ± <2^(-64)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 117
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.01219512195121951220441271963772672092322567715909168526718706319359631356727385945475385474925053870030860772257297219170625844139507551021871468173643983409545559084989501982846855834971445102918209598971640056076198728807515941309909642407761566564612060904953542575449725098222515587544918452766049752715762285397275887705448645612843083565621149895849966630034556818187329166177817292924364909719687482435598724820151972970074189763736275603743437641166097194331962397061766914588178549842463563639356741649931867661781380701452313979229332123655338513221776422387897385597331539361685843179429478144726317623280920088291168212890625 ± <2^(-117)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000000000000000000000000317343415730259638882725345896720423106039236077498927848507518230246793807023515284186189479990180657699947780546736784812474247179456070396635071696936376940481053316390061632188536083239231183339564277784644552277700071155985655474199270097146463598392074345611035823822021484375 ± <2^(-111)]; dctAccuracy = bits 116; getAccuracy rEd = bits 77
chebDivideDCT: acGuide = bits 66, minQ = [76.1111111111111111303542747162602567987999488313682187304177931435004705556841479183183081285970665912692696394106326570037966529888315431181941960055679918806248451801366172730922698974609375 ± <2^(-57)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 116
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.013138686131386861310665084122675870698842934497730036522243152782771078965155960659835311867249461001057987338963570526098361553261346761936593628829381544338337539669137280368164388894402509681789110535024807045786225658178464695001490345183062240183318201005351591239189417198267014355772485628200644458036872924434707783516260454723041334804242447670238273378645129277086589328127197249850753085100856474221753628280013891229957179561976770447210554863395816963023962809622141717559606378940006976563381613232195377349853515625 ± <2^(-116)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.00000000000000000000000000000000055220820070785409591009919557097109869905780195451118618966702046187802407943670194783001825648920282247118474675347352746297101451201185438625885002137866977147123425762105261062291772082046004133104588618152774870395660400390625 ± <2^(-110)]; dctAccuracy = bits 115; getAccuracy rEd = bits 71
chebDivideDCT: acGuide = bits 66, minQ = [70.44444444444444439623659951395702922112939161158901541586549861068674681312371151087337040053171222098171710968017578125 ± <2^(-64)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 115
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.01419558359621451105072404800368566574467505740746002217148273358972551123239685901128507147409020188600661697090451282107464009266305423719179750128978683684344520205151504788654636164251718122159593141567045204299404566830447638384395667589777691292794789574161637147528807631210774815101288494686827352597603720110829710631383823293470404932506676819194940738557116087855003076041328513779361289700483045594199226499659579228771276370931797120317538902796079357086388075794009381821116291668886541492112342960783518097050299066104986875105451267931795135558942066381684992708649240565300651589937530605567417296697385609149932861328125 ± <2^(-115)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000000000000000000000000972505075824064733799488170727170645103314964053744942221482051658885094235174921441373551563717147601386368344155144759055638309679456070396635071696936376940481053316390061632188536083239231183339564277784644552277700071155985655474199270097146463598392074345611035823822021484375 ± <2^(-109)]; dctAccuracy = bits 114; getAccuracy rEd = bits 76
chebDivideDCT: acGuide = bits 66, minQ = [65.0000000000000000271425928712427506498622694389907372886550634981423878352330388637394411094594865223921560356348357108656531135601206056181941960055679918806248451801366172730922698974609375 ± <2^(-57)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 114
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.0153846153846153846090319935809399496260723347388857898104578870217440813486360500883424919345802360860096566185173807538343410435291368553366923118084563831609910543838213820414136097795707714857283778039404466551473852281207139029214177646295437464312717396969535137414265404313731244650517921525318271648376800112232349992003721281419558441530935462683521926242662633603812530586875264213204563730931589936126874914104794159885084520847941008306316244190555167769663931722423201247672611656491792331280521466396749019622802734375 ± <2^(-114)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000000000000000000000001731220692076630921308533540472101152913518214743289364087786590237254094118218718217048879660280959066079162506327072340036783061609609483509007080017102935817176987406096842088498334176656368033064836708945222198963165283203125 ± <2^(-108)]; dctAccuracy = bits 113; getAccuracy rEd = bits 70
chebDivideDCT: acGuide = bits 66, minQ = [59.77777777777777774229123833778694791047423893702460880952803307539779787790792768553682634546930785290896892547607421875 ± <2^(-64)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 113
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.01672862453531598514004232146680961862968333652099818443514332177956238485377177839070475725129347057334365603760208089900679818577591862940106298049766247156308907145328505042672812173979746779153085761246049754085569975045100407846347446090214469283106502378453798880698009795196011607723607332512352508311736056483718362515229532719774219030311462484072538061393819839138814950024826391974066561572485313405454402829751560817320022741069914946411412226405600988737758792843323512271429806549094426173427052965258125489812516198995515025681249679736474367388418144000095246587851087504130397597135182508054640493355691432952880859375 ± <2^(-113)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.00000000000000000000000000000000310793073569002280220179210053944911066697092538126450376807404739718210481697300963668764688923326885462816327516323530642991661814634937439803712515654621988194728110122753595210997938188955152361474582870770932216199170817432496569328290755666877043239537670160643756389617919921875 ± <2^(-107)]; dctAccuracy = bits 112; getAccuracy rEd = bits 76
chebDivideDCT: acGuide = bits 66, minQ = [54.777777777777777811413536993128160537995539193448294324692684885442661495611706472519849876289420494737441710380130624049492437666702018845205984629001994164199107473223193665035068988800048828125 ± <2^(-57)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 113
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.018255578093306288021277352452079265235091401067374803547928361868272094122430378095135584967761207680119893628904772200687631768564773667515242228504459740295151874214005203488365117822502573904908756543402520676514567838052868659878992275691016996553802632513127699956089668445771607004199894329109390587133000105035003926551244282510756199953348212412763573524944333505832245285703300063084775170174885520434148365902338179991815470849187267580970694291048404782394099319342989974859921796512818303881431347690522670745849609375 ± <2^(-113)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000000000000000000000005602903692345209338817024852339469108994349458640797162981964174036276165505751847792458787420882176975986581330819099647311888756810810668947632965019240802794324110831858947349560625948738414037197941297563374973833560943603515625 ± <2^(-107)]; dctAccuracy = bits 111; getAccuracy rEd = bits 71
chebDivideDCT: acGuide = bits 66, minQ = [49.99999999999999997569278962741526029434387906524629755147389321461750426162898471027506985819854889996349811553955078125 ± <2^(-64)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 112
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.0200000000000000000097228841490337104523782254959401836557524863704636048658058622820143599580677947108536031899213350231044968515176313216103774809454974172425642119986534892333065922004282448895092588012343556766924506305340421422370463164128028236740531806090566182344824774787906905271277611064316642427793223527584125761269646385642119758791666677413081051791886765600671378544469642435890789129881606780869455036656389503157801453169109716568692392518095118922841308478271874310407642341001276266668303849725627466916982202052795787696433754388759394201126319452233421308955897185766076838177307539723415175103582441806793212890625 ± <2^(-112)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.00000000000000000000000000000001006472931853428207796582979112029484386855413855711990967015773595749876550063870820785013743409026491793094455859872504607615470645297071359775671446462425129365403554426004108812569072215948745555970951852309636818513338077065710364946618006476430906559471623040735721588134765625 ± <2^(-106)]; dctAccuracy = bits 110; getAccuracy rEd = bits 75
chebDivideDCT: acGuide = bits 66, minQ = [45.444444444444444482383601605706258649562277246425955329973393196204845162572440516763831012366868349652598421211200710036941129988479362595205984629001994164199107473223193665035068988800048828125 ± <2^(-58)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 111
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.022004889975550122231158671002090888289842223611614085773099294320666327439407640007619063309101971289851616387684287951814630030307756720425456130450292245282624424199808446138675816764963361803022484288765307289560027377445853859876304133528219248327483773812021363178211700777375538579409511432966794947691731253306370547606611292636778110131035162349453270333426838564316431181469612825922868644793268575286487305071555658122786368885900598457694291601631693086554632242837021732613446596549255929176069912500679492950439453125 ± <2^(-111)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000000000000000000000017745002971515321493404883045177980248031174382881763706567074948446682441870642374360924769708488265834341959020303596668503864866408408298070381195014965068840029863980334736827436042404574322028931732120327069424092769622802734375 ± <2^(-105)]; dctAccuracy = bits 109; getAccuracy rEd = bits 70
chebDivideDCT: acGuide = bits 66, minQ = [41.11111111111111109644125338284196637273831199625408164170307902834586596428688258508810093871943536214530467987060546875 ± <2^(-64)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 110
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.0243243243243243243330040794447750950051793371754907699395916970022167150144882300772664829262652103019240451543121364403445955873923379559036530643229731433025853885677566309383141728578170493931656380540905311671204103976907634172021547624291325894712225731507231639947817060284136007646558068473150718174759373992187360450653927775582858748299428998267452274746107076445495907803736838072967345218399222863596325081134599166175365541529930937756989213498714713161850452485133210561360008976909010836180656935060725765851443903731448711017165828885298392490824089350245784996915136899202323507961087667439414872205816209316253662109375 ± <2^(-110)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000000000000000000000029715042930438930175327599332509145808432694352280800230188504546207650873304595647727165804582308827448690844769206833907004857059679456070396635071696936376940481053316390061632188536083239231183339564277784644552277700071155985655474199270097146463598392074345611035823822021484375 ± <2^(-104)]; dctAccuracy = bits 109; getAccuracy rEd = bits 75
chebDivideDCT: acGuide = bits 66, minQ = [37.0000000000000000411751053640889929338252255136215477341393859272914650058756068387003264341661434855268453247845172882080078125 ± <2^(-58)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 109
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.027027027027027026997066639499066453656099216983032635813726168398494655685618012075605392849117303977284030239724246509645815749519491712310293284230185939890421059402017628085230537159454784998950161037200318305870921295077096364581131631428124592285582443171769874280825424306972137553676033552673375705098582023286820932267560733143152991320569281314971077546102935936479849317277619344958570430760094350526362272937393137856482369510878093557208838053926464665264003644361758673528230330351806998123720404691994190216064453125 ± <2^(-109)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000000000000000000000043237004982012908191538802250988729278243737700489510187678429971551211701203904132853954385149746658699562899803442924720554076256810810668947632965019240802794324110831858947349560625948738414037197941297563374973833560943603515625 ± <2^(-104)]; dctAccuracy = bits 108; getAccuracy rEd = bits 69
chebDivideDCT: acGuide = bits 66, minQ = [33.11111111111111110453662960406706614565753773004796108021559051658288298588162130997591958703196723945438861846923828125 ± <2^(-64)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 109
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.03020134228187919463686920636537187142244163454816551807570611547745256617242877741896455100273877351217207092585964916129162476916033252642362116347044164849606807125570700446583595849361303996967040935194169482493309018905471802148324404648367486191629446651317210029892577574966891931799641084120158288291792863294809862548596709581345115843971785811027474616822514267649543957453262173463949734013784606356798006285971751227332912459553243967567512471946574843085052622097041702983066718264553892864183741928488148005136527642184988853719144845636932710267873032500251711890909353578382507028721182251729260315187275409698486328125 ± <2^(-109)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000000000000000000000036024926125874558166420953758538529562681241938074736611614916166395917251962777369376111199358173597502576721901622605391379857059679456070396635071696936376940481053316390061632188536083239231183339564277784644552277700071155985655474199270097146463598392074345611035823822021484375 ± <2^(-104)]; dctAccuracy = bits 108; getAccuracy rEd = bits 74
chebDivideDCT: acGuide = bits 66, minQ = [29.4444444444444444870468944394288505941067280660619571366933264796658096368517786671210705040646615771038341335952281951904296875 ± <2^(-58)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 107
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.03396226415094339617734658878363039281995623129132580275446778323776666316633594577396741442657712404471797553148613681815987652011478269202204009358042946997638184826763584522891915375542298667334704371608516151831531360437681919076279102502437460610180530006507364261190270043591413284327569855140107939748037156480395964108186506654971383773073323636310652590424300901063101450543679787844496086879034069545097934045196941234907351726549633066111810974367154007263975305708855498984196676082181198808029876090586185455322265625 ± <2^(-107)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000000000000000000000103711155445990242166691359046138543423352669057432749752212620690058897775228393874016374492567179340923496724030183662586472614866408408298070381195014965068840029863980334736827436042404574322028931732120327069424092769622802734375 ± <2^(-102)]; dctAccuracy = bits 106; getAccuracy rEd = bits 69
chebDivideDCT: acGuide = bits 66, minQ = [25.99999999999999999997891829109055961310155626662793586701142767932855532641320088493852580313614453189074993133544921875 ± <2^(-64)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 104
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.038461538461538461538492724421492448831289830637446251739080961818057886940948530809360732891114144696673888382538426476193265386076049452407791762474707693352655597307145195105931049466089486687664575131198048079724883264078617681471033959969519229801839147273991419498048431679378273087082997307655585740516156023600597329007186188237126237617890564820846108870822682411179214150606526009872074447953042598461003191618652037344648817717890824541455927145595127284987845091104472993436182178385330971502765559844294061119604844283781079483046144684955147697509469538052991124966106242229774299888622746124156037694774568080902099609375 ± <2^(-104)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000000000000000000000826546114221374129582470728046113004434111213680446128368801335271603639443745565253405831859098010771631783409113612961836692357059679456070396635071696936376940481053316390061632188536083239231183339564277784644552277700071155985655474199270097146463598392074345611035823822021484375 ± <2^(-99)]; dctAccuracy = bits 103; getAccuracy rEd = bits 73
chebDivideDCT: acGuide = bits 66, minQ = [22.777777777777777739935991906595772374315107351430072414125356157627348296698173561352955764760988845014182063377197478024670303846674522339190639122738003298496156645569499232806265354156494140625 ± <2^(-58)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 102
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.04390243902439024397547496682863306633943612337599563579279074808648354148459067962463760712240383196349874447032372615880333370897916894745639072535579735074121933443490023585580672150825334229750712150077670417034368556087298307657954220949670972264468131028429825113165358064101184977225847296799068745872169673705176506928182789124548435211181640625 ± <2^(-102)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000000000000000000003961723334970156158191659233555219904858789901579595826945730563093110342329100717995443214508225578693028831125160859932117722614866408408298070381195014965068840029863980334736827436042404574322028931732120327069424092769622802734375 ± <2^(-97)]; dctAccuracy = bits 101; getAccuracy rEd = bits 69
chebDivideDCT: acGuide = bits 66, minQ = [19.7777777777777777825568185460686565867061795741435178246865323096073530999912733386409116285321683875272487393826321115485661829719458504587118789407189953059862386197664818610064685344696044921875 ± <2^(-58)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 100
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.05056179775280898875227703319921598586190492809965767641139066689227105997057679523439385572446133540838043374393734681504882411718971516082874373216033115193946479425095149729488134717946319656629610751242481968840844633760585471044949465431588603779083276229868672196505800691029301820660606882309393636945932940133602223906196344036565451774369972585684040671379199463225755211451742700203202273873961769231185806832274032909278167789782097631814591539131573002577403221849274682437517906830048985966641339473426342010498046875 ± <2^(-100)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000000000000000000016724789517163904849206861918899462437806599408927185293826231574194462166591175083370003977352178663923242105297779364555579929076256810810668947632965019240802794324110831858947349560625948738414037197941297563374973833560943603515625 ± <2^(-95)]; dctAccuracy = bits 98; getAccuracy rEd = bits 69
chebDivideDCT: acGuide = bits 66, minQ = [16.999999999999999972091510673427050389497592851993844512158512049443642231696133879902270139098243695158867100016400213411459148908930381714190639122738003298496156645569499232806265354156494140625 ± <2^(-58)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 97
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.0588235294117647059792480881626215517184188353107795254538451174730197043921756749538797844778162080465487221844945132810031737901261370426200495326037453040523298244977155075300088498527470122528859129850108438430206308739380777927333766375380629056884650403032856490240928210252699378158263844747005453573486521978708196911611594259738922119140625 ± <2^(-97)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000000000000000000067500614095243276457132848637526388220609894057397124057314044701552861849245646726051126647855472240990089852061567768493848825845561609609483509007080017102935817176987406096842088498334176656368033064836708945222198963165283203125 ± <2^(-93)]; dctAccuracy = bits 96; getAccuracy rEd = bits 68
chebDivideDCT: acGuide = bits 66, minQ = [14.44444444444444445263029878397807778936888302070765752123375370366385947474760844990186355588646682895573495523710813024091835942705800064046482609657749587687980419303812595899216830730438232421875 ± <2^(-58)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 95
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.069230769230769230730453055863233005659438059113289465215338083934447133081354680844629132953970650562011704061756316534854772270952965323641013662320746430066592541444397134341968380450010147195555261464113267491377542260652565330692169212085942909029956566973050412614677357059270819334941861945979541803809823274510680088971969156078457452245468095109545827179577179379075349475955989898954355740643059185131586563700774297404324782275410566477368690255737444190891042758055194349911705409272855149538372643291950225830078125 ± <2^(-95)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.00000000000000000000000000026556583323360473576247324104792060204591596789176133513314120438007677981514673246924311275186289620169213349427617846061731103230695201201185438625885002137866977147123425762105261062291772082046004133104588618152774870395660400390625 ± <2^(-91)]; dctAccuracy = bits 94; getAccuracy rEd = bits 68
chebDivideDCT: acGuide = bits 66, minQ = [12.1111111111111110917508312308426019502284472670752924096465583011839654306993406601963077402761559397958990302868187427520751953125 ± <2^(-59)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 93
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.082568807339449541416838796770004316384251103486426832845677360510017703940066373354525812117336815615328051017588202159090702958977047812040891461972589418337243887163797790338977646549963645306051107705481446911647189327113398792805143263042972595422056351479903924998958427748601098453729161795737641338366330501230549998581409454345703125 ± <2^(-93)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000000000000000000996290098395513599917704539423630950580917469182780914663766695181013187272020385370348051838691470221592881692700123114555579929076256810810668947632965019240802794324110831858947349560625948738414037197941297563374973833560943603515625 ± <2^(-89)]; dctAccuracy = bits 92; getAccuracy rEd = bits 68
chebDivideDCT: acGuide = bits 66, minQ = [10.0000000000000000103134599308785600799627306975167840583569904663322654494551900853231457717840147125798466731794178485870361328125 ± <2^(-59)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 91
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.0999999999999999998972136109090125276609662127241288950142174276244735112375714024753711211166152517458642192986361237875693281469924105067886373597050226924772273860728809832042761686446141095925467787219310692763082013068089039342252943430930824180739907993075058220952505989129758102319680694676273059562395574682187581886693516505523493969620496347213313701834740225330382621639143262760427418622303536999208710687590694535899124720112465654327295440232819483544247491033394035340087398211483815657629747875034809112548828125 ± <2^(-91)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000000000000000003183974105084653846812298967067623354599423783275975979734539448090179546193431562733218200338187751368596055520825123114555579929076256810810668947632965019240802794324110831858947349560625948738414037197941297563374973833560943603515625 ± <2^(-88)]; dctAccuracy = bits 90; getAccuracy rEd = bits 68
chebDivideDCT: acGuide = bits 66, minQ = [8.11111111111111109869160743018817321750117702196967273325165566754385197172318488048641414469468775333837762213881271326671701841824175064594358627859650386938972221884114333079196512699127197265625 ± <2^(-59)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 91
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.1232876712328767125185609569024855824964131286457838848005435601048161603042542180705543424094339053516386404335585278136522905359784928618979779852078118704104208981547248447341827384834869790382117706563265710525519464307813237339071194012360076191232071152972213674762762716313377902738830901364398828778945471640327014029026031494140625 ± <2^(-91)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000000000000000003908639193546858872639119123356565767042811065218135554605866571691863730136920041842277959772384111259525703865733442768493848825845561609609483509007080017102935817176987406096842088498334176656368033064836708945222198963165283203125 ± <2^(-87)]; dctAccuracy = bits 89; getAccuracy rEd = bits 67
chebDivideDCT: acGuide = bits 66, minQ = [6.444444444444444455193373424983632043193023549753540934271310072269630869785451915824942177579703894707563449628651142120361328125 ± <2^(-59)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 86
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.155172413793103448017418087267390062168580003755181613176288349250022632222845946043032729485159511095965403346490361481346825045437862104927673827882506430390235648920532015651130098825413805652625847376398773577135920149151757872615228461306691173340357603605191348395451136253629341720634573366742311208093150165693506930686149287636180048233262031611285662007286594766789658194802991794524124265078754108325879008674594903484275741794509831940177295047436181763405662508748041828669610164848080557931098155677318572998046875 ± <2^(-86)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.00000000000000000000000009062563564096722120404467999147089771188589552495261056225382988426700972720797995912403277208112739650896034929248749340222335849514483976941453394182272370269895809258349477640399782258711137085360748543763453124709624634513898361436884223276974146222962394108208580101304402513375056208897459313432723852080569133596071502626956437464326250642565468962927669456769919100277044619968212995283000067072970662285950617060668281416031318619455354300746444969995912903523141591847790503074165869767456167536497004946311856577712085641433084788609608750675761257298290729522705078125 ± <2^(-83)]; dctAccuracy = bits 84; getAccuracy rEd = bits 68
chebDivideDCT: acGuide = bits 66, minQ = [4.9999999999999999930144244339502123565813420652236891517977699855168978131071043961177846441656935638775394181720912456512451171875 ± <2^(-59)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 82
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.2000000000000000002817484192593704915410997270759016908804851340495734556608786665533230974432524725071968283396717083079956752495819703965228554179184120341387805827254602339010740317801858595376787465801205191082629851746692021467652113444892610245358560151722925655842984577768149533855764239664853931799370911903679370880126953125 ± <2^(-82)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000000000000001370237898134133521175951335497728326870435915523113981082737495776437819565612655313219608230234974909933518251004947635692485724753234953858267985250518894053742935454579218554431999031905383992145765756510878996201803738021019206998631640162686107093865528298303842085627075352229392698341612205454189944625071950841951486867565112161061381165285660087240883044761143730319130007997478913110120697838691986921893516996079899242555061025669731469639880711231320743953418658678735681679373253663622258868864450954110397251042904656344149916247232567911851219832897186279296875 ± <2^(-79)]; dctAccuracy = bits 80; getAccuracy rEd = bits 67
chebDivideDCT: acGuide = bits 66, minQ = [3.777777777777777787365330472859402467203628959120962621791162521431735862454236246847001667349685849472962217987515032291412353515625 ± <2^(-60)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 80
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.26470588235294117580001530204992835850486455169721045551585276415957196547321788734907027982407090535820256688434125950338638175537687020284605774132873810879643132721949206629892686765206864060701457513089390916199230927765420491159060333331701605632578906330155397329552017343411521229227719471891050166311810377601704593664606686330676578854651915056802644425451923233479860818390055777908507434586148795105863971512624301189162869799822363319496162636015242562565953574616925856265690908397658631656668148934841156005859375 ± <2^(-80)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.00000000000000000000000328470263777949291260879865312527884686246893031145347896833353215372298825157087991498365450554059416221435552448863190774840030767810508564191170727024795597286577755770945876335483738059642449919615245995663328323968126803314537781424400703419450807313843310239836764501734300391682053206113082465053470060141255589631799264948651487856138209958818467426393571356142300652862079666404222926641398654325440525365150208753799335553570643807050228397681716900978682898534786195439466817692191017477895724163336350590608226844025938255338357973922569499336532317101955413818359375 ± <2^(-78)]; dctAccuracy = bits 78; getAccuracy rEd = bits 66
chebDivideDCT: acGuide = bits 66, minQ = [2.7777777777777777746822245506863437276337218752857314355168849176937433998577674287923069357247089470609870919306723876215102982244296106658788759117026284412195480388874102573026902973651885986328125 ± <2^(-60)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 75
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.3600000000000000004040171999428488330091860285163739144966419001213383608901117177886204483165099603348269604276103779839963729402551500539759421390983739459910947950312204255259291417805779663272814124832397350010281372145575242349332701662788034922368224702881319637940824478015828706157900641893210291755167418159544467926025390625 ± <2^(-75)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.00000000000000000000009876873489160429438448056789523854294003692257309400262678981238536736921283747564962001149875748965978069408539006833793313516912767189130469827541012733073356804305826829189823636968463050799974810723285743074268605198106374756701077931241549213828544417875584997194405610139729073328089431208938180196148258654354949582940881254434917882191031684237808463313138685838196644845492192391487637608838835643918718140231104999444682782055470745609627522888813036831096481876354106950918344881283252221721052058611932604187985018460367342592320927252558249165304005146026611328125 ± <2^(-73)]; dctAccuracy = bits 73; getAccuracy rEd = bits 66
chebDivideDCT: acGuide = bits 66, minQ = [2.000000000000000006924622281071980140140467890914772771339809829330125581010179744362306795794903546692466989043168723583221435546875 ± <2^(-60)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 72
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.4999999999999999982755639055862586492320849673357297047153749478428487899395293233032095279067413770751225750179450912984019599163815088507606750623279418761624127890695669383004186682657718757781736567077288899958792240228229408155518012310858300374081554959034807029481824823933264634232451845585516089639175226979468540106429741815878124379069124044561813961266541948377242685063698181885251818183396318602922671343508358649508725148518771043052555359015579563725271919606565903886584434356876727179042063653469085693359375 ± <2^(-72)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000000000000377298706453440506028954292407416993023170781800426967885948968358260516979889663331134514637278104675674300014445806635918126640780066162651109894544835624592915435623787952254833622500606516258544346941388626654512682942647394073971567754634472828043189505891766368491513056428175610213144604724042683003426010584873244837883173569343347570176880584336533724567487548224784115025056146809719617592901551716737981260142490266592980449761603643956415841683334929584363462095880906798657652450634030471384304578090293955367712647931840129478242573668467230163514614105224609375 ± <2^(-71)]; dctAccuracy = bits 71; getAccuracy rEd = bits 65
chebDivideDCT: acGuide = bits 66, minQ = [1.4444444444444444436632440448745310679438569491055371910126634641145003325712885487926387287176133167321268047089688479900360107421875 ± <2^(-61)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 69
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.692307692307692308071721568254726622916728992733687790623690791223646521512925752412967903073130265822446596731321459242540408795983855221521151873258582304982463342690039889632969203198908016713065619389112896146445467091306124059400610251628022837462847361660546779294433421465294886676389296553679741919040679931640625 ± <2^(-69)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.0000000000000000000029288617733769518963631107898362934787871535289998821616793946671306305304614060838616098491874990408360014330600463728888922516029939973883514797843419490877310439623153484010031460632672106573420054410614311958252010464092064277040652283449620532276670356561936459208928671101361698164091800104265840800446103667361667984856907314855190179558183747950737705423576600577284556704464079863752610141257663729055471603483533499739984060959677145001532278996645789957697249792808288212320146790017049931908115808685148765026383640476016767539846341605880297720432281494140625 ± <2^(-68)]; dctAccuracy = bits 67; getAccuracy rEd = bits 65
chebDivideDCT: acGuide = bits 66, minQ = [1.1111111111111111138050744006171228480135521432809003809973068544668182491225436586309891049025033726849187587504275143146514892578125 ± <2^(-62)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 62
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.8999999999999999977111277625004830791892074519200283279455871712149680166156081860040982106394960841365838383946165306031515352653305501489751327074893295956647965796018112446928403920597039784836044837547107007994641071703155537591984236539594531910285449234905649888481977622332968930740449098228332985202018583081125765603413915751083820898656334049890482892525465590118076591374797292081037192324052493573859710850066138491718200137548499648676559414278677840708638146817084860619277708604357712829369120299816131591796875 ± <2^(-62)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000000000205684757952134795989317303319450825552361554483854101510373623678152745466736061416335094773299542429359268473630619236430980743935654013492554563523202149755231144582029384727695647177496690930345857922019376032275133399754785885219947247753428437059875666526140628969306038817864579389094767959622946517651979258158030213963172795652472056316523407390352794573506541526271418795091269852957413000181431002806292469214825583733991417433562057003675929747422468880549788158339329324830144659196232942231154117045801164877273929827705689632466601324267685413360595703125 ± <2^(-62)]; dctAccuracy = bits 61; getAccuracy rEd = bits 61
chebDivideDCT: tryWithDegree: d = 32
chebDivideDCT: tryWithDegree: d = 32; getAccuracy rCd = bits 125
chebDivideDCT: tryWithDegree: d = 32; rCMaxNorm = [0.899999999999999997821576314054156832105436831079993556221679712818102707145263751710609084386392218621093521277748652780795885640704693782847533843082817697107938260629459019947089734353559128684690300884367574807345051603088941109566568603678912059529981517404597584180833256038751393161406909998140839214899762652509820373895052770296582321468580976951603743214255815178853484554484780337213041350060727342080835096728612891223775252699563581633179588885760417636167312561504726221792170616615226137765986516807010104219252198222643749452089056463377492178778993547894060611724853515625 ± <2^(-125)]
chebDivideDCT: tryWithDegree: d = 32; maxDifferenceC = [0.00000000000000000000000000000000000002212630159485310735216897910106299103002200479576874891038440854784680231845884654590935422074822602280665587226228295049607803475522604147275905704236007843085954632106183175536754347505268941226090431775675965465617449356994228537587332539260387420654296875 ± <2^(-125)]; dctAccuracy = bits 124; getAccuracy rEd = bits 66
chebDivideDCT: acGuide = bits 66, minQ = [0.999999999999999999998481664030252635858194339594391549790691250853930180720320039427641647424016557721415665582753717899322509765625 ± <2^(-68)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 62
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.9999999999999999998574153652040225180685496912534009374631988478101129956408758322959082332652034688142544666504718237358569020957026334473747672572364073911510165612252073283648427596088943445631033919955192687673362664897370767194549555917232688575342027182482205958927349930334133596295532897773872040275654920499187382307675435101115652190109016373935045883481157395038456827317311666787082522332859205481376668881787605756509655721399880887876135331593061208035480745779860554771356628833700597169809043407440185546875 ± <2^(-62)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000000000203531082213716579770641672785705588768322955754438308459662078177409287224419961251877552293503489177951895422765384822105055479910487236552923891861570433478899747334796007202510454506892385638360595235671024791596502848710941179988039025725944459620760151278698750691451216919645788381232872483247472290292273627219010588216161881104336476581046923996847263313564529259341372143936381558167373162510596013632985142103119649988548417159228327944127096810832577237283990866899349545633278564903884019603152698881559123573719151216454559261137546855024993419647216796875 ± <2^(-62)]; dctAccuracy = bits 61; getAccuracy rEd = bits 61
chebDivideDCT: tryWithDegree: d = 32
chebDivideDCT: tryWithDegree: d = 32; getAccuracy rCd = bits 118
chebDivideDCT: tryWithDegree: d = 32; rCMaxNorm = [1.0000000000000000000048704394467122287683309424804150261175488928148927757588239654687026779952249911558436074320174962799475334792465837555797424122841663410488765986658214162661865225661243663719638747891667692604381659744005450135893702219973979139429835670700223335512676384089707667864302573563087806758013795696879665415409399524339124071936810771015339889000878720142882366739899076219950307747447132935227841774186892991548174128225690261885887828485200158643832164453358683214339947572971235853852859231069460414958889303224413429131779197135687642372658956446684896945953369140625 ± <2^(-118)]
chebDivideDCT: tryWithDegree: d = 32; maxDifferenceC = [0.0000000000000000000000000000000000019734280421953950831668204831200305152498023839096623417897024743733413912522864019922956042290690231300244251879436903308651668560474533615661445973112364349371450421100562106866977667955024449202371857434152360496874313577908566230689757503569126129150390625 ± <2^(-118)]; dctAccuracy = bits 117; getAccuracy rEd = bits 65
chebDivideDCT: acGuide = bits 66, minQ = [1.0000000000000000000004963083675318166050146807113999689236995448085110152873295832466228193376178712270530013483949005603790283203125 ± <2^(-68)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 62
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.999999999999999999855721299309513871444836350185076851033875809345921497378501706000449670571770799658323587900536192378328691625140287033612347673538123830860733641960499723988102325509919101648132959826378767047590810313388091580996640385307092154106617844564292419057967242816330383219772304200357149381252276198777746874436417493066210470398975034471496487236676343899514246479441570615862550191918472753399422800394628115209119732524398797793409635551191593440034498438658545189060278257642266908078454434871673583984375 ± <2^(-62)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.00000000000000000020353108221371658257353254159376365783737653444446679611792694358531288686965171156098650011271314972002135155042834226327690420669883702680964861841740714295426579867952356999226269660734151720244340893646481377071629066538998422627229567969002241819161110971847903573661988139308941386175588280378195460874180347606085520306242331544313797861528868355610874681532761559028126718428637505762173944334235826781913003709102595749070865230572138226856382666237765007260379003912903795202683913812752634955634690169323217170079041819785725664360143127851188182830810546875 ± <2^(-62)]; dctAccuracy = bits 61; getAccuracy rEd = bits 61
chebDivideDCT: tryWithDegree: d = 32
chebDivideDCT: tryWithDegree: d = 32; getAccuracy rCd = bits 118
chebDivideDCT: tryWithDegree: d = 32; rCMaxNorm = [1.00000000000000000000317637355220362902521219100678269763472311993912198375762847095976494251709427779263899921016634045307482710331687856169276998547221985742228980926506475084501125873201239862092212273866197895101771902684791812284700139223714915844374654107559122676545549166063505108473494827514419361557371580670175808108479135656732616276785693359256239771325571619474404216380374858646310950894968290455428537446970738111754463309489546190791161426230985134041536652553804657786578724052133888416879489131133149936612431172896197182164523646619169738869459251873195171356201171875 ± <2^(-118)]
chebDivideDCT: tryWithDegree: d = 32; maxDifferenceC = [0.0000000000000000000000000000000000019734280421953950831668204831200305152498023839096623889169997412315163009716971698605417767911379431247402502588152153270756121845196753785058313556979782958994320673760899370987164268728039118723794971894643776794998901724653705969103612005710601806640625 ± <2^(-118)]; dctAccuracy = bits 117; getAccuracy rEd = bits 65
chebDivideDCT: acGuide = bits 66, minQ = [1.1111111111111111138082919493820402249972811858924615080468356609344482421875 ± <2^(-62)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 62
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.899999999999999997707011182376827179551880704759226129572205939203403376726524106009395490623240387078252284616212137507598063735265983954139740626808061894268430239947908469603856224708702243950540400088147649143425623343588228526070686398820306378727296347984261222136318468522997449099420919083058834075927734375 ± <2^(-62)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.00000000000000000020568475795213478825971890252331590561469338180689819213180425284755412749851474121676116360404658556649684648826019313004300366474289994572429666263780183532736302878443377932408090558687272150083385241458961167998982102815862144219252811141543998692489588454401182997803791251482348420918804879337303825348620526131920792602237830405911724484308054025635459463444668002326654181223537419942989526071601108139669894902244659453601924090579140029214497363859659937634004967274225625813344576430070817293849267924018768683485573582625516309008162352256476879119873046875 ± <2^(-62)]; dctAccuracy = bits 61; getAccuracy rEd = bits 61
chebDivideDCT: tryWithDegree: d = 32
chebDivideDCT: tryWithDegree: d = 32; getAccuracy rCd = bits 125
chebDivideDCT: tryWithDegree: d = 32; rCMaxNorm = [0.8999999999999999978174597339305009324775117365320752054973498873547035484570134231217962969592191251339408091079609011398980313959043853710495261302493084521410286921683622841669364541941156355073467317104997104786069067765539135237543831914468846941951519705278125972482369340692179042481484116921831431828963302512361239127678155785416281621428481484394456162143115067475473978220179560594260692596435546875 ± <2^(-125)]
chebDivideDCT: tryWithDegree: d = 32; maxDifferenceC = [0.000000000000000000000000000000000000022126301594853107352168979101062991030022004795768756764933953024209287271693974523950382981093046021925960050740870449864485589500596377629373516773483721924574050532067452824037320154602933904284622892098283259624917629349027947682770900428295135498046875 ± <2^(-125)]; dctAccuracy = bits 124; getAccuracy rEd = bits 66
chebDivideDCT: acGuide = bits 66, minQ = [1.44444444444444444366703216444419613333216556583238343591801822185516357421875 ± <2^(-61)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 69
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.6923076923076923080668498758006959724448756366076340032197859703084371739837727119246513508884818241976245981579952367027435098871098090873549275830497361400512126897230228304404135532734604563487518857704860608927486963740333207643320107201355957669426042241002114351795402171188489724334328512067255433815285116983497555643614354199056561140509216990989267601476888835085060688977232182360253577334753110627977102069923903525335004001040847891517157974292089686447921443251849618161046506781275411412934772670269012451171875 ± <2^(-69)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000000000002928861773376952273555080088446663425009759023423335479520852118656299233869655857162759956201757895468094485084363582619311497525556538054725069114857903620471485977555310534756792640556322469240344038108943350461594725091779321984757185781407957117768875878974190196103221019923658320914434709856642980155749037132857228569135565261946467764257861147918216594608020026485970405835218567446160016997202834334971525680926256356270501672138722380269777431336012723727255573351603036869181319442891438897714373531729784202113326278056788798398457629446056671440601348876953125 ± <2^(-68)]; dctAccuracy = bits 67; getAccuracy rEd = bits 65
chebDivideDCT: acGuide = bits 66, minQ = [2.0000000000000000069303044604264777382718332177091724588535726070404052734375 ± <2^(-60)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 72
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.4999999999999999982730228067444957482322044843444672498585253793587916270464480482333464366144888804644779187632284967816001365876234128244479148122718857671152060142079430793418793722242881219888823034660033193250676322891116652715944119874729086926029439886446821048773358063763171989235534198314780951477587223052978515625 ± <2^(-72)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.0000000000000000000003772987064534405036950890907782760382904102967838327518329758150592466085869025436254073196389899437398244263342665801928079156327222849876456576105757777465297300432897505017678576273472784123668579701175413974311184706934625438270685904278191450451722427246694400415758679390075240473341599655710375932309616867409936000457671610883623290068378493935255857687835497078151459564417497752637707690992607412055927950374255236798702660423775064161769288588292214363519933202366808191046252983859666793236558669686054244878114878798160136685879706419655121862888336181640625 ± <2^(-71)]; dctAccuracy = bits 71; getAccuracy rEd = bits 65
chebDivideDCT: acGuide = bits 66, minQ = [2.77777777777777777468980078982567385841029317106176677043549716472625732421875 ± <2^(-60)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 75
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.36000000000000000040138258866370905722866069217923486391297790682908848156197912078778719060420550561622547136732134447469190582673125287021223335613258747093161968486595204871557229437232891738906435459205266667052309957405663558725975161152210930466030890936032821099437891819095730778988386010632081520198665863370713848461720569472592199070304741101565870949623127127136364123264109998514236078334502838055188976435728444289249337070245660886714688040459963693810631066638942875991757919251767816604115068912506103515625 ± <2^(-75)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000000000000098768734891604294398104742689624566918896799037043161918102107040941425777753329424803933670597372672848402058219788534637953438059482553170132140612157687145388560651345761213585877539088048940095554648600009690105662034888241601809579171134517902884649807377933366678382738357748846263517577877106513325981927059200734431270197695600611266236645537288282157013326742352954210895094590853171682452665205972934728709279129362935476740906836629530015590799927868378415379075714450368655588297738429484053021390051932685207563065079975662963196469945614808239042758941650390625 ± <2^(-73)]; dctAccuracy = bits 73; getAccuracy rEd = bits 66
chebDivideDCT: acGuide = bits 66, minQ = [3.7777777777777777873774477497437348193221051673162946826778352260589599609375 ± <2^(-60)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 80
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.2647058823529411757981160724657733875120246177745897165295709090281836662742729354166769366363262441112434474572885091145904473518710919435746549866818732526111784709525247970409613424037224140952646979117470867068922069064345132105742661887315093325601730686372745353928650520303376904480974207700683109578676521778106689453125 ± <2^(-80)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.0000000000000000000000032847026377794925400286225849751156507681610495947283157624175336924557976178344500974106496739443522187154137350759532104528517230152958140574934514797010552569387275454882122498408426473576290810707596188929171064596818570137988509124568471882518089167324822776304030405968140813768649281577138897563938783110917133657189152994778525413146028127300391048675142528334751234191449381632149111199182729665754994282042595531490940798058462714205580511857827257017993157359229701408696820438237945824671243528752153266049593965786957216906904490072438562719980836845934391021728515625 ± <2^(-78)]; dctAccuracy = bits 78; getAccuracy rEd = bits 66
chebDivideDCT: acGuide = bits 66, minQ = [4.99999999999999999302578879265920755274599240891575391287915408611297607421875 ± <2^(-59)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 82
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.20000000000000000028093526763000636321330641450822690656206658226666914454999805704456271976882022060935662802150351917908147985525197845632385588363466655342901670004777177134971741344110425916562167003979841975092398570827473266948134133406286510526027951828607354096582361525249410991121985054848123433861356800020330314011905539959526670281361749133496755397477078083583059735181622330132692459762682089500573650021604499483768619973183406338230629586166572175931519945852907573814738473316765521303750574588775634765625 ± <2^(-82)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000000000000001370237898134133567062746729530580153146060876368464964855640354456361082775142906447127449317474932778560567417430765578002809661138365606836879232279253966562287290091087700972682304175773930281403686170515643930699452919399917974215942591734419733255134580532750641315919745206060931762743820505563567861668859420656478747340631187570948898579300358390144385956048212127589439552155089008556979508301752894673995426493006267712774754451863398378659332357270217939468359868789306321836335250406323677100643985985919171677218150664441021803485742935890812077559530735015869140625 ± <2^(-79)]; dctAccuracy = bits 80; getAccuracy rEd = bits 67
chebDivideDCT: acGuide = bits 66, minQ = [6.4444444444444444551881029977562719522621303980258744559250771999359130859375 ± <2^(-59)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 86
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.15517241379310344801741808726739006216858000375518161317628834925002263222284595614477093510571672628148653335646673408604022372013939421927951482773644282282714719919694267706431652170112815065692090413619813558462101900686657818220963913971725213043811325761471017117536985237816326565556591485120323248292351081545348279178142547607421875 ± <2^(-86)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000000000000000090625635640967205419818777836731410826995869347337307551495728269712758083077635090986227300165148490411125503077275101250755565506858979883335424037694525887341331746223664270845303863756905034370160711908453002138919406826122671469479419403145336855734691363675276614873059941545507024340075741615119099521616805595015471310986294538253238315868413910943205958997820064051168494801555696456306618840085646309547356767846834476826065843638747909756143074707834501584132125460806386196259634813184694793200622964520322948211183400604178833116775226841355106444098055362701416015625 ± <2^(-83)]; dctAccuracy = bits 84; getAccuracy rEd = bits 68
chebDivideDCT: acGuide = bits 66, minQ = [8.11111111111111109870675990846683347905432537316983143682591617107391357421875 ± <2^(-59)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 91
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.123287671232876712518148964146005352343360496111365170164041698426963905736058019655986971770484916581037575461061122623512945305231721574888825015224906220057762258551137217438775062011210098459179194816267451256567290553639867795825028095272897633279730040758951049287973777965544764808782752416261458827098241437879946897287987381995009841796656727108772959400400896845426431898902816331672942178520958312090232556864815034341150995490882986077394747137878493846010229648527480150852105034164907237936859019100666046142578125 ± <2^(-91)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000000000000000003908639193546858872639119123356565767042811065218135554605866571691863730136920041842277959772384111259525703865733442768493848825845561609609483509007080017102935817176987406096842088498334176656368033064836708945222198963165283203125 ± <2^(-87)]; dctAccuracy = bits 89; getAccuracy rEd = bits 67
chebDivideDCT: acGuide = bits 66, minQ = [10.0000000000000000103278594909818831858172583082478013238869607448577880859375 ± <2^(-59)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 91
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.0999999999999999998968070350943304634990508794434533967637112910880092280060852508051076005964687296782607499671434959009624418150486679624007024757723966479115539610084201387910372095260631156484976256221696945580749827978834708966197682508220524170675210584544666348184980736838483718342336457258795641422910449591654469259083271026611328125 ± <2^(-91)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000000000000000003183974105084653846812298967067623354599423783275975945999506029752505228277994598669157375666311327789371895271983442768493848825845561609609483509007080017102935817176987406096842088498334176656368033064836708945222198963165283203125 ± <2^(-88)]; dctAccuracy = bits 90; getAccuracy rEd = bits 68
chebDivideDCT: acGuide = bits 66, minQ = [12.11111111111111109177506578461126665428870818885798144037835299968719482421875 ± <2^(-59)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 93
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.082568807339449541416561609319543520177799545838422411879574019946636131989802005949870050533310867454041474336516889967452291035096282713312083454773498796014018424260167987382386088788472515483947789401161532305230283851484285687624552039239709024520402502724439572705512895550101282712211506220169222220187446333478352655570079585637810867972385222800935323330837954938861318420607426611988304933693470316413004834344500850860415202765647610728538131807302753757714837524548314611795574169406108921975828707218170166015625 ± <2^(-93)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000000000000000000996290098395513599917704539423630950580917469182780880928733276843338869356583421306287227166815046642368721443858442768493848825845561609609483509007080017102935817176987406096842088498334176656368033064836708945222198963165283203125 ± <2^(-89)]; dctAccuracy = bits 92; getAccuracy rEd = bits 68
chebDivideDCT: acGuide = bits 66, minQ = [14.4444444444444444526537804195714053377697094759923857054673135280609130859375 ± <2^(-58)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 95
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.06923076923076923073019323226568470430128452731976427727732136399894033247905952580231834614694494817784470198858710896234851584458324593680929646735626722880111215999363507719942383099407153808300255385898232477568505775052588655163488281505772076237577000410267618040760411687152015479112110707639578884194098140625328596797771751880645751953125 ± <2^(-95)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000000000000000000265565833233604780604024099442066871605262633169077468631456507753232840210457888814436109355649296615665840584483442768493848825845561609609483509007080017102935817176987406096842088498334176656368033064836708945222198963165283203125 ± <2^(-91)]; dctAccuracy = bits 94; getAccuracy rEd = bits 68
chebDivideDCT: acGuide = bits 66, minQ = [16.99999999999999997211423939084504078182724651213675315375439822673797607421875 ± <2^(-58)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 97
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.05882352941176470597906050993208772742126038738172737668562872566438354109759788029178995914921333194446361893871232115527875524673518609439277853281265089604515461648737290866606173382300644152075689974225114300677707786097247449343336916753603903063989820241856891211532678412393315521804997567077026828778708261044394213203904830229459951386288654907131555700211771665559439966418034349275304150083451006394604264179646385136088093902971045356008443699141001933463331195442384382305440158889009438780703931115567684173583984375 ± <2^(-97)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.00000000000000000000000000006750061409524327645713284863752638822060989405739719152738088137690149768011957485417277599160831939943841034974492846061731103230695201201185438625885002137866977147123425762105261062291772082046004133104588618152774870395660400390625 ± <2^(-93)]; dctAccuracy = bits 96; getAccuracy rEd = bits 68
chebDivideDCT: acGuide = bits 66, minQ = [19.7777777777777777825787943453113098234152911203409530571661889553070068359375 ± <2^(-58)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 100
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.05056179775280898875217309227954281581655844726755651539977618350039898449529969196586467231642596922505991170067013781527599178996605413912205791501095127258694839065149211024564316487624551264121200163048259787481155971832419507914838794291217733694729571169761980702701862364822058388077555599476810123198665392063588797100237570703029632568359375 ± <2^(-100)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000000000000000000016724789517163904849206861918899462437806599408927252763893068249543097997465103211491653321105025822371562602981140056679042135537647213213039824884735023516536748618357683383157871685209492902506045464150474799680523574352264404296875 ± <2^(-95)]; dctAccuracy = bits 98; getAccuracy rEd = bits 69
chebDivideDCT: acGuide = bits 66, minQ = [22.77777777777777773996780269950376720915208306195154364104382693767547607421875 ± <2^(-58)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 102
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.043902439024390243975370480955972357404936908620457875114993072787409468703818184329543345490054104550410476014981348501758695082547766019710372956422079180075219062119859285953183514779598405803512548346928557550427252774230014833028732567390181173901255617534021875761412293171362338804640207384812782432269513807683587776405503777814128516757437472899230146192311937463499079041240532452673115200200405308684552190604918913186104389475470243734746373358191320963032819311412307142846074559106028800670173950493335723876953125 ± <2^(-102)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000000000000000000003961723334970156158191659233555219904858789901579629561979148900767428257766064782056267886384649157917189079966841205993848825845561609609483509007080017102935817176987406096842088498334176656368033064836708945222198963165283203125 ± <2^(-97)]; dctAccuracy = bits 101; getAccuracy rEd = bits 69
chebDivideDCT: acGuide = bits 66, minQ = [25.99999999999999999997891829109055961059383498487372248616326175582244221979181762018904505608416351578842696301743544617012538440713528124892997886450884616397097852406197661762460750000251524967354033179844918777234852313995361328125 ± <2^(-64)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 104
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.03846153846153846153849272442149244883128983063744625173908096181805788694094853080936073289111433076589919620010784067364949141580427692703985189593676794830096086996135275347757114984902403342097375524796329100168729470455785006775390777051634943499189377500461241473039981383487198079758220736330399884067162459391937586344377303963022147561748920435228969959601708246410556313321649213321506977081298828125 ± <2^(-104)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000000000000000000000826546114221374129582470728046113004434111213680446128368801335271603639443745565253405831859098010771631783409113612961836692357059679456070396635071696936376940481053316390061632188536083239231183339564277784644552277700071155985655474199270097146463598392074345611035823822021484375 ± <2^(-99)]; dctAccuracy = bits 103; getAccuracy rEd = bits 73
chebDivideDCT: acGuide = bits 66, minQ = [29.4444444444444444870771993959861711175063359036130350432358682155609130859375 ± <2^(-58)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 107
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.03396226415094339617728406092605023912903371286435994746309327967533053551856499601853858142136294788206775775419456985955371944629269979399712300242499123926017089147871622203396220041053461966421229696852502115460106716714687201278329756040171708779557803257424081340011826785256803546126243626995154347702750123605408560933938133530318737030029296875 ± <2^(-107)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000000000000000000000103711155445990242166691359046138543423352669057500219819049296038694728649156521995665718245414337789243994407390875786048679076256810810668947632965019240802794324110831858947349560625948738414037197941297563374973833560943603515625 ± <2^(-102)]; dctAccuracy = bits 106; getAccuracy rEd = bits 69
chebDivideDCT: acGuide = bits 66, minQ = [33.1111111111111111045366296040670661428154536107265192488861413965344058346309179826867841283538190919155056515858065591335192338242453632405911665425806076664217544039546226383253868750050304993470806635968983755446970462799072265625 ± <2^(-64)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 109
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.0302013422818791946368692063653718714224416345481655180757061154774525661724287774189645510027388595614859621003470246766777806321039607263757099367343743212320493719534373795965725886869355881246843313133146442545964553543919053373699651365545381944629811171905360157443774292354682708946248842572209566874446326199712141427395181173268685736468853622038805511624821702187926319993493962101638317108154296875 ± <2^(-109)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000000000000000000000036024926125874558166420953758538529562681241938074736611614916166395917251962777369376111199358173597502576721901622605391379857059679456070396635071696936376940481053316390061632188536083239231183339564277784644552277700071155985655474199270097146463598392074345611035823822021484375 ± <2^(-104)]; dctAccuracy = bits 108; getAccuracy rEd = bits 74
chebDivideDCT: acGuide = bits 66, minQ = [37.0000000000000000412039044842956391455357501030221101245842874050140380859375 ± <2^(-58)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 109
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.02702702702702702699700724200970457430447752308061549129656298793935440215353505433452684264734184100686884284318991859122447304062502851002757824139020176583741844973206235398557972296487416340063280804874044246418250278748966136268968236454381950020170688693191058658525723996667656101355254446467968903538585845498787296747877917368896305561065673828125 ± <2^(-109)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000000000000000000000043237004982012908191538802250988729278243737700455775154260092297233296264239840072029282508726167434539314058123096862989450845561609609483509007080017102935817176987406096842088498334176656368033064836708945222198963165283203125 ± <2^(-104)]; dctAccuracy = bits 108; getAccuracy rEd = bits 69
chebDivideDCT: acGuide = bits 66, minQ = [41.111111111111111096441253382841966369561865039365411359892346711755024732184142879952461298378642919618694591691631004540360324910895885490247079849271910210746722440014870843216409062496227125489689502302326218341477215290069580078125 ± <2^(-64)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 110
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.0243243243243243243330040794447750950033988367475396411022918114642167826738942122557317436041213394856268335554665488801180689036469086739323223223526329906326165087606242942276107986282857526771848538252755319893555214439914952931964829585158420502595872200915671725386071217398524771093809605964968051480022339498832397542703159105856685436512922506737183271741478164662542127416600123979151248931884765625 ± <2^(-110)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.0000000000000000000000000000000297150429304389301753275993325091458084326943522808002301885045387169687057970783242778067424084263155846535026985135277675561308830662133919971958930807803141170675444303250513601571134026993593194496368981538704602314167259633213795618327250809553863319933952880091965198516845703125 ± <2^(-104)]; dctAccuracy = bits 109; getAccuracy rEd = bits 75
chebDivideDCT: acGuide = bits 66, minQ = [45.4444444444444444824320707132435880580556553098858785233460366725921630859375 ± <2^(-58)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 111
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.022004889975550122231119296965602288631628378684104784976709192677947137790132435538425371928664600459976921837729948975821977063585367086252681292709108791836105923455979192602571291334356198601223725442450308417054755312186241138691612446977941972904350448715693568154739954041628098003397495640915320979597992836519770865066902842954732477664947509765625 ± <2^(-111)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.00000000000000000000000000000001774500297151532149340488304517798024803117438298296880682208797140042875276283455683494039897922593831508848406134178186181355695201201185438625885002137866977147123425762105261062291772082046004133104588618152774870395660400390625 ± <2^(-105)]; dctAccuracy = bits 109; getAccuracy rEd = bits 70
chebDivideDCT: acGuide = bits 66, minQ = [49.999999999999999975692789627415260290833069270790398819181877701484298984896924942599775506231589326000328028795158367503754174328005967481908267527343671713197498319907516863917188437498742375163229834100775406113825738430023193359375 ± <2^(-64)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 112
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.0200000000000000000097228841490337104511745192806981612464221505483731974997188144318608484876803535864269175740643364385466650295685880879119283816809548775523378238789932968686694601405123380177490442349837367657225863142963237689694202505198401700365852072375116242500377613140822155466105631004442358362552010896287405439207346411791334642088741400999273145470437607063018958797329105436801910400390625 ± <2^(-112)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.00000000000000000000000000000001006472931853428207796582979112029484386855413855711990967015774719352201676191469338188873069491403271398695766463868425524924397137283473119691548238885834552877429887335755649617282474296929525139460058796925750625455839855965351751801599758905092496519273481681011617183685302734375 ± <2^(-106)]; dctAccuracy = bits 110; getAccuracy rEd = bits 75
chebDivideDCT: acGuide = bits 66, minQ = [54.7777777777777778113969727932707431093672933997140717110596597194671630859375 ± <2^(-57)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 113
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.01825557809330628802127735245207926523509140106737480354792836186827209412243037801382354651678487517375978937422422551136885251633784404646171478380203164466556843841510236969728741881829796423663839219375925381471774082293330710048827432756191483994052013516602634605543141925361376473030704491634857284778899227367502701435686418562909238971769809722900390625 ± <2^(-113)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000000000000000000000005602903692345209338817024852339469108994349458640797162981964174036276165505751847792458787420882176975986581330819099647311888756810810668947632965019240802794324110831858947349560625948738414037197941297563374973833560943603515625 ± <2^(-107)]; dctAccuracy = bits 111; getAccuracy rEd = bits 71
chebDivideDCT: acGuide = bits 66, minQ = [59.77777777777777774229123833778694790662906630500148162675473436572222859276926417062872675191265831106040596289638864802370078207557560921557472957679589217377408204363256070042772500001257624836770165899224593886174261569976806640625 ± <2^(-64)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 113
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.0167286245353159851400423214668096186288412029525479504073458970724124049656376432646315061446414345130471358472730186442103519089224455404984146088773158979791714855396163412401956506250550173138792360099884046417007209379608973937387683213407763194347354668921691563624688538270910790904117763762814790853159268025101258045853191873878445077919155755204890969456938968804547707147634127977653406560420989990234375 ± <2^(-113)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.00000000000000000000000000000000310793073569002280220179210053944911066697092538126450376807406237854643983200765653540577123699829258270284741654984758532736897137283473119691548238885834552877429887335755649617282474296929525139460058796925750625455839855965351751801599758905092496519273481681011617183685302734375 ± <2^(-107)]; dctAccuracy = bits 112; getAccuracy rEd = bits 76
chebDivideDCT: acGuide = bits 66, minQ = [65.0000000000000000271880503060787314349722176842760745785199105739593505859375 ± <2^(-57)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 114
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.015384615384615384609012747388528964340277469921707817689709206055809040148025760951029294642962871531070491510499523885119935843111938640372352612901972401113645517007876308364060294121330078918800782219875833043928607888602292818729517349342022502563644202644254720299927040194526473284798037061640133128480399565319626520309981287937262095510959625244140625 ± <2^(-114)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000000000000000000000001731220692076630921308533540472101152913518214844494464342799613191000405010410900691064508931018631546825687547365257533346475147213213039824884735023516536748618357683383157871685209492902506045464150474799680523574352264404296875 ± <2^(-108)]; dctAccuracy = bits 113; getAccuracy rEd = bits 70
chebDivideDCT: acGuide = bits 66, minQ = [70.4444444444444443962365995139570292169498561419986597826109167044688134833557279334256160953488955476965941485350722609870946314926856912072359172548676536762248579235252067211285043750150914980412419907906951266340911388397216796875 ± <2^(-64)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 115
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.0141955835962145110507240480036856657440686464854026090765519130032896995486995226770648442422193124661455648453614327050468934162688764009078129151071734601871860536186716013903026163021724421438604222877375693464552725991377432657329564322337292040956771171296500014573634733461893955322506028362458827725240824444993795622547946742306114275132376076813441010969849582565717287241380262230450171045958995819091796875 ± <2^(-115)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.00000000000000000000000000000000097250507582406473379948817072717064510331496405374494222148205540422617798893358316605308265065840353340503937950179782878000139798607740959635466100501440835218780775942256676820424742350916711528452796760003159830084174375231779343038254260524200223159141387441195547580718994140625 ± <2^(-109)]; dctAccuracy = bits 114; getAccuracy rEd = bits 76
chebDivideDCT: acGuide = bits 66, minQ = [76.1111111111111111303770504910642057637415458515306454501114785671234130859375 ± <2^(-57)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 116
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.01313868613138686131065104708671689698807863948026390468004559103593246726333466892756322123483792953556547071972531938864796616207000842963193384309311543525363314306507314955277009066377829897033462645668785961988816451950442199768498136992821850982845320955585900275547754910355281671992284481765725109628079527485748352437500141576265377807430922985076904296875 ± <2^(-116)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000000000000000000000000552208200707854095910099195570971098699057801887041119352991671826047150151308580298486265409330754501973501386061350065256509624109609483509007080017102935817176987406096842088498334176656368033064836708945222198963165283203125 ± <2^(-110)]; dctAccuracy = bits 115; getAccuracy rEd = bits 71
chebDivideDCT: acGuide = bits 66, minQ = [81.99999999999999993752887315592550422179543878178193328675042471772405369287903254629729300657677819946005970844133399895048848090979577319889710493293941517867563380341785274182928375001760674771478232258914431440643966197967529296875 ± <2^(-64)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 117
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.01219512195121951220441271963772672092277813618078932714330468047974581514588949766080357995156344359823811238252770888378422339392450682245661104786641169807967690628094361385618731871378085795637820654174360780120894624867132913226442551951503758464147627822259211288638563146650472129093657052653676572925231936248360618043688884047453077151095804721370606447016790048945415227132915703123217099346220493316650390625 ± <2^(-117)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.00000000000000000000000000000000031734341573025963888272534589672042310603923607749892784850751448490571005326485355950665839304892472568127674520008371508811115887283473119691548238885834552877429887335755649617282474296929525139460058796925750625455839855965351751801599758905092496519273481681011617183685302734375 ± <2^(-111)]; dctAccuracy = bits 116; getAccuracy rEd = bits 77
chebDivideDCT: acGuide = bits 66, minQ = [88.1111111111111111210698524666339536380588182140627395710907876491546630859375 ± <2^(-57)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 118
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.0113493064312736443871602597749635058878284336669861510108960869184056472022037707148014185981603107371528958467873781514039183564314871955514482433199873037483158835384839662052718402657504338005965775399360300771833669565370717589297158947085218744160070224475092448216055227551613111041283354082090217204126110035601149132744591696564384619705379009246826171875 ± <2^(-118)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000000000000000000000000184686840855430023994642081013848272715399290459284021251710790826940482401413146541163307493842910021861385123504369956760130944310810668947632965019240802794324110831858947349560625948738414037197941297563374973833560943603515625 ± <2^(-112)]; dctAccuracy = bits 117; getAccuracy rEd = bits 71
chebDivideDCT: acGuide = bits 66, minQ = [94.44444444444444436616805926369237292116581422435130213917325840548794922133917800924375748559630626635080264261517386191388233032690585519055829261101117668112640968331049876253006312502012199738832265438759350217878818511962890625 ± <2^(-64)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 119
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.010588235294117647067599151833413033934715233937999466287726051256989258775761448705334279877327651988540008459934934521368591027955129645697108715617603713006292768402222580826224491011907917841526080343015882694655258181365973287268349395589136795885463516308729842321230661104837489720583298836182063117914529106866669282665969909230695145649256173163182708556084628786811657578936785029100065003149211406707763671875 ± <2^(-119)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.0000000000000000000000000000000001088715070757751787926275661908471273613330620452632676177837821746164817199799630206401455604479363258057218235832055972985625236912133919971958930807803141170675444303250513601571134026993593194496368981538704602314167259633213795618327250809553863319933952880091965198516845703125 ± <2^(-112)]; dctAccuracy = bits 118; getAccuracy rEd = bits 77
computing integrate  (sin(10x)+cos(7pi*x))/(100x^2+1) over [-1,1]
result = [0.03491989808941693489525987792975793836315330260590400900761560938348458019942925833608995069035560689112044954486273608043261985913426391381469328317972136315789191170316994733095450096598994427878715670508745796688810535155978816857158166940071769987909562047410097137068252538378094312324771713150570549728615993058609339707952343301628532718743789812256695264009217933460214293000369623594874491194388702523848745002417626408233177458837200090669157926633943430927788102963594033364433883716979780312561264968087193564840938403200990071367165968725369707482089743728234055033505422559807706249512815332991522154770791530609130859375 ± <2^(-65)]
accuracy: bits 65
precision = Precision 632
	Command being timed: "aern2-fnreps-ops integrate rungeSC lpoly 60"
	User time (seconds): 144.90
	System time (seconds): 0.20
	Percent of CPU this job got: 99%
	Elapsed (wall clock) time (h:mm:ss or m:ss): 2:25.12
	Average shared text size (kbytes): 0
	Average unshared data size (kbytes): 0
	Average stack size (kbytes): 0
	Average total size (kbytes): 0
	Maximum resident set size (kbytes): 16796
	Average resident set size (kbytes): 0
	Major (requiring I/O) page faults: 0
	Minor (reclaiming a frame) page faults: 2121
	Voluntary context switches: 1
	Involuntary context switches: 136
	Swaps: 0
	File system inputs: 0
	File system outputs: 200
	Socket messages sent: 0
	Socket messages received: 0
	Signals delivered: 0
	Page size (bytes): 4096
	Exit status: 0

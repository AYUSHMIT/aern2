numer: acG = NoInformation; ac = Exact
inv: acG = NoInformation; ac = Exact
res: acG = NoInformation; ac = Exact
chebDivideDCT: acGuide = bits 5, minQ = [77.3671875 ± <2^(-2)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 52
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.01292537614864165825742116540343975815758561946002144403669819584202349719282064940674698872891730934066292372255385951447096823488188875610718351296176989912399714321000524562457654141643938674073199062182400767533896741910482776202261408156527071752693108605113077737135558746394126296740017215638096810537138736663109739311039447784423828125 ± <2^(-52)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.0000000000000158339637741856312177007872389535247814747707939542209487626678310334682465070882347668581749097194107678682461725620689199947158250708715249962104453284722220169396867583867418609622870252660337264120186600773014669521423114460491416298124588146745139738413854502141475677490234375 ± <2^(-45)]; dctAccuracy = bits 51; getAccuracy rEd = bits 14
chebDivideDCT: acGuide = bits 5, minQ = [57.0546875 ± <2^(-2)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 53
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.017527043680679081138198583090433185234460847553598635085020011013807681346583003291780446394361451480574096795103522655428654460643594714685511930495728253147046045172414682864291154841048286873189714195163004971510281395106359294876901372987335294202520341488956816976376096245454450070523693527220249373244076451783257653005421161651611328125 ± <2^(-53)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000006601029277671599759977075474163292901165001665825249332897328713443130254788683420932119993667242793203879225658181896509995156172981632231246526241551099536848861379528521180039215429773160530915877683771737526344706130452158878379827328087246784971142687936662696301937103271484375 ± <2^(-47)]; dctAccuracy = bits 51; getAccuracy rEd = bits 14
chebDivideDCT: acGuide = bits 5, minQ = [39.8671875 ± <2^(-2)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 53
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.025083284342543506245501684054470274154007296124916086041071683790626676555869609226501774493943550778112839667824915862753571471225601736002455756335296848623205885190909402071770652069948835052898559644517461087160269283405404218317377381084624800789793960379883239783120561160200983288871459340804302880212350856936609488911926746368408203125 ± <2^(-53)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.0000000000000050047000358087215090316262144208521694182189264166193964911144576035439968580403832043581749097194107678682461725620689199947158250708715249962104453284722220169396867583867418609622870252660337264120186600773014669521423114460491416298124588146745139738413854502141475677490234375 ± <2^(-47)]; dctAccuracy = bits 51; getAccuracy rEd = bits 12
chebDivideDCT: acGuide = bits 5, minQ = [25.8046875 ± <2^(-2)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 55
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.0387526491068725149860406367683691349689507409453568002254153363506542413809647907654367352942649353154487961260216064296294835189121953435080482019106256998627806368394577289496291865671013923064776467684456026458922287339095272343151558083351254768852261215773510980022304235017312233190775116488990315911922213132356773712672293186187744140625 ± <2^(-55)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000000903908966526337105478584201869828942347084659546252449757730573765002191109941965853994993667242793203879225658181896509995156172981632231246526241551099536848861379528521180039215429773160530915877683771737526344706130452158878379827328087246784971142687936662696301937103271484375 ± <2^(-49)]; dctAccuracy = bits 53; getAccuracy rEd = bits 11
chebDivideDCT: acGuide = bits 5, minQ = [14.8671875 ± <2^(-2)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 51
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.0672622175512346431619461059896905896191798248912128287438861473554020840825590078122051398452104030205912523664418494633485088539271718874492737619187587028063370303461801011350810415044565213170988261045550365422204522414088269360618361801825165869738283745076769216376509306531721723265798855754225848979643842540099285542964935302734375 ± <2^(-51)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000005653815336435542340762063691877094995268853219738680593309254618361592292820990004200143631182289558075901184629421551689996036868803153643747157833996354166512704765068790056395721715268949525294809013995057976100214106733584536856222359344111005885480381039087660610675811767578125 ± <2^(-47)]; dctAccuracy = bits 50; getAccuracy rEd = bits 10
chebDivideDCT: acGuide = bits 5, minQ = [7.0546875 ± <2^(-2)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 43
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.1417497231449942574685539357107370543790881153447796510853290654949261358621182084161683620150769315222264167529367555864079916757846566145479230261723006718130649793508113175619950039589164261584918790561909024786314600239948142071241060970443638103206373977582449647485541702849599214302368614670779578545989352278411388397216796875 ± <2^(-43)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.0000000000009757746053852665031020684071401748258412639502878960229281801730394363403320783772972668581749097194107678682461725620689199947158250708715249962104453284722220169396867583867418609622870252660337264120186600773014669521423114460491416298124588146745139738413854502141475677490234375 ± <2^(-39)]; dctAccuracy = bits 41; getAccuracy rEd = bits 7
chebDivideDCT: acGuide = bits 5, minQ = [2.3671875 ± <2^(-2)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 33
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.422442244109968785538605238806707288311441885163980434970485346518653680960225795602772983412633301366705973787535519685958982696724621310959281553754020066492627056967848326115263137133637174964431564900623293941716180083910186624138847804923119852998417122596895407872667190118010256683067638050488312728703022003173828125 ± <2^(-33)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000637576826684644520114293569370503972359998101637756917625665664672851562500000058909121583572718637149263459835307715702586149993394781338589406245263056660590277521174608447983427326202858781582542158015023325096626833690177889307561427037265573518343142467301731812767684459686279296875 ± <2^(-30)]; dctAccuracy = bits 30; getAccuracy rEd = bits 4
chebDivideDCT: acGuide = bits 5, minQ = [1.5859375 ± <2^(-1)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 288
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.63054187192118226600985221674876847290640394088669950738916256157635467980295566502463053587460502761657051641501751312021497804013080246372663966667891102264973807396289457091490028936786125743090764456795137307564622962891483794944001783732543764152632913277951587360803387127816677093505859375 ± <2^(-288)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000845951557594603564486034117649203615593248871004438094021555662389536018344701866579103698772143419041249694192349407147171842326888770004828710539228747879675067159692379550232329975364306955060856645039215373255321595014066815565456636250019073486328125 ± <2^(-289)]; dctAccuracy = bits 287; getAccuracy rEd = bits 0
chebDivideDCT: acGuide = bits 5, minQ = [1.5859375 ± <2^(-1)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 288
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.63054187192118226600985221674876847290640394088669950738916256157635467980295566502463053587460502761657051641501751312021497804013080246372663966667891102264973807396289457091490028936786125743090764456795137307564622962891483794944001783732543764152632913277951587360803387127816677093505859375 ± <2^(-288)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000845951557594603564486034117649203615593248871004438094021555662389536018344701866579103698772143419041249694192349407147171842326888770004828710539228747879675067159692379550232329975364306955060856645039215373255321595014066815565456636250019073486328125 ± <2^(-289)]; dctAccuracy = bits 287; getAccuracy rEd = bits 0
chebDivideDCT: acGuide = bits 5, minQ = [2.3671875 ± <2^(-2)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 33
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.4224422441099687855386052388067072883114418851639804349704853465186536809602257956027729955205270274630905387202585839914790498870476777944234511695449679196240061565743710240442507458797056404487932406573689765615661181484001191351697676760035356229956656607754116309289092584997016809056358255247687338851392269134521484375 ± <2^(-33)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.00000000063757682668464441671671700024204461343391159289240022189915180206298828125000006283639635581089987962588102382432823008275855999295443342782869999494726043796296268925291567784898914794971603368804496854935821343640195593618974859473218883974994508623268529845518060028553009033203125 ± <2^(-30)]; dctAccuracy = bits 30; getAccuracy rEd = bits 4
chebDivideDCT: acGuide = bits 5, minQ = [7.0546875 ± <2^(-2)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 43
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.14174972314499425746855393571073705437908811534477965108532906549492613586211820841616836324823206710005550162805972394186252077946874460572238488977399342738454234375344726645406248846651087592744298064191246932528460701721280815691535130430028949441887821954064504536162946800282920687135031212466884653622400946915149688720703125 ± <2^(-43)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000975774605385266503102068407140174825841263950287896022928180173039436340332082304572039096356152196028331857266686942241329994275477160110818745894649105844907185017993988252303682709144277371536536946353548417076589198154170733219903432296830382564056804994834237731993198394775390625 ± <2^(-39)]; dctAccuracy = bits 41; getAccuracy rEd = bits 7
chebDivideDCT: acGuide = bits 5, minQ = [14.8671875 ± <2^(-2)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 51
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.06726221755123464316194610598969058961917982489121282874388614735540208408255900781220514002557371475124142470836039006210145974508503638937963628520901393044027058361443753367706414949004645415111347484954563590500913060244385548562919998911580412807565426094679796530965575330357718596476027591592704302225769197320914827287197113037109375 ± <2^(-51)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000005653815336435542340762063691877094995268853219738680593309254618361592292828844553744619993667242793203879225658181896509995156172981632231246526241551099536848861379528521180039215429773160530915877683771737526344706130452158878379827328087246784971142687936662696301937103271484375 ± <2^(-47)]; dctAccuracy = bits 50; getAccuracy rEd = bits 10
chebDivideDCT: acGuide = bits 5, minQ = [25.8046875 ± <2^(-2)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 55
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.03875264910687251498604063676836913496895074094535680022541533635065424138096479076543673576293308929635582725770180111016534908400052109484819010377888517423179084137109145664236829978652209128231959891318295616750710873683250547920322209787444840396503179581294270928290797489071404529347376275586744827188201423240343501674942672252655029296875 ± <2^(-55)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000000903908966526336908263357896616877589414943338849695031456121796509250998540209299838369993667242793203879225658181896509995156172981632231246526241551099536848861379528521180039215429773160530915877683771737526344706130452158878379827328087246784971142687936662696301937103271484375 ± <2^(-49)]; dctAccuracy = bits 53; getAccuracy rEd = bits 11
chebDivideDCT: acGuide = bits 5, minQ = [39.8671875 ± <2^(-2)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 53
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.0250832843425435062455016840544702741540072961249160860410716837906266765558696092265017746706736085388848489265812234868821587246626526623577253033182099401226974387576548854659564200771795812115021951455363599772937922898142341268500982805753619106967662619951572769251184245057278966956951690692699530327303136800765059888362884521484375 ± <2^(-53)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.0000000000000050047000358087215090316262144208521694182189264166193964911144576035439968580403832043581749097194107678682461725620689199947158250708715249962104453284722220169396867583867418609622870252660337264120186600773014669521423114460491416298124588146745139738413854502141475677490234375 ± <2^(-47)]; dctAccuracy = bits 51; getAccuracy rEd = bits 12
chebDivideDCT: acGuide = bits 5, minQ = [57.0546875 ± <2^(-2)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 53
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.017527043680679081138198583090433185234460847553598635085020011013807681346583003291780446959670535470371745173841494067007350414153496333178946631970075659969507380720589652478132261183504840623019405097719107735645549392404772214445580292948332480909483701121650581765282190161907636590641685301144550752916462244002104853279888629913330078125 ± <2^(-53)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000006601029277671599759977075474163292901165001665825249332897328713443130254788683420932119993667242793203879225658181896509995156172981632231246526241551099536848861379528521180039215429773160530915877683771737526344706130452158878379827328087246784971142687936662696301937103271484375 ± <2^(-47)]; dctAccuracy = bits 51; getAccuracy rEd = bits 14
chebDivideDCT: acGuide = bits 5, minQ = [77.3671875 ± <2^(-2)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 52
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.01292537614864165825742116540343975815758561946002144403669819584202349719282064940674698895973405554767770981071971627452159478216055454106382904459858192938243730213916850796370487025847183637012731609496405230981080644666815670203655872794891246318537483029639307348186383762720954515786497561309295080411718714685775921680033206939697265625 ± <2^(-52)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.00000000000001583396377418562806225716635490630313456050966280930225593692739494144916538351102897238181242476617563989020514380172409999559652089239293749684203777372685168078307229865561821746857252105502810534334888339775122246011859287170761802484371567889542831153448787517845630645751953125 ± <2^(-45)]; dctAccuracy = bits 51; getAccuracy rEd = bits 14
chebDivideDCT: acGuide = bits 10, minQ = [1 ± 0]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 33
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.999999999908835237405841699774277825643058539677320174841637506924690153907241235141374823893531540101776098169611101590716449047726672840768635050071238648594863069655148905132887311544159075719826290446308336786273137062317031695070624332383617927270841581953523577736205946137283156582118257919328909264532339044035496034227389174937034999288176435409569820919919987888459062981891398252690318573500974042131992865753829350111852622763151126308483529993291202856681777964189672605468686182696597521353933501896241568238845187271423195686463462374116151210046155028976500034332275390625 ± <2^(-33)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.00000000020113396564925909274307221226532919541862831636080954922363162040710449218750006283639635581089987962588102382432823008275855999295443342782869999494726043796296268925291567784898914794971603368804496854935821343640195593618974859473218883974994508623268529845518060028553009033203125 ± <2^(-32)]; dctAccuracy = bits 31; getAccuracy rEd = bits 31
chebDivideDCT: acGuide = bits 10, minQ = [1 ± 0]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 33
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.999999999908835237405841699774277825643058539677320174841637506924690153907241235141374884241894925091002707623128701087521502264361373361857408417747118135529810185585145433899893010770808121880119204952701782727835560425916760983928074422347311042001483800043127973816208362367330132754937788103568453848922544392455073791392904878718526478182615577755649733452515749081778997765365869666927651954145139364509977347993171442169466546896938871171664860989877944873541781330378107005219352808121153252711012205495360933615947913059818270215837329663484400743556079760310240089893341064453125 ± <2^(-33)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.00000000020113396564925909274307221226532919541862831636080954922363162040710449218750005498184681133453739467264589584628720132241373999383512924935011249557885288321759235309630121811786550445600152947703934748068843675685171144416603002039066523478120195045359963614828302524983882904052734375 ± <2^(-32)]; dctAccuracy = bits 31; getAccuracy rEd = bits 31
chebDivideDCT: acGuide = bits 15, minQ = [1.016270528431050479412078857421875 ± <2^(-12)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 59
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.983989963325838622775686625957433538163444214419587566262309715352591958309105336270797742622123110179575770597855274622982668181397837097798423254350681575733807247511653701890924345425787697171864867784416483672113494153675799282285409664438871984348392440657496289332522382538665981730153104270554021738848238243235755362547934055328369140625 ± <2^(-59)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.0000000000000000013710959288865538542491759749370479629201561582951492991588882119913251261250582779818321362819107678682461725620689199947158250708715249962104453284722220169396867583867418609622870252660337264120186600773014669521423114460491416298124588146745139738413854502141475677490234375 ± <2^(-59)]; dctAccuracy = bits 58; getAccuracy rEd = bits 12
chebDivideDCT: acGuide = bits 20, minQ = [1.016428530216217041015625 ± <2^(-97)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 72
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.98383700405111382906805098236322333415497800712229090291056646789573549371259711792293569174230585075577556361200649638528363909412022528718966046640815505644851394188932498249196573241765088840931027159774315568650917750371422012840243504960089440898695054284866249412914573288178134048478939987183060708097459274960872033233272304642014205455780029296875 ± <2^(-72)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000000000000178826819571441229363718448512722636750482353260939467439518671051977739684437455658043859271170187819408181896509995156172981632231246526241551099536848861379528521180039215429773160530915877683771737526344706130452158878379827328087246784971142687936662696301937103271484375 ± <2^(-72)]; dctAccuracy = bits 71; getAccuracy rEd = bits 71
chebDivideDCT: acGuide = bits 40, minQ = [1.020431381312814578254943853607983079803225625949963558134329681011788502971866357602286678272126241582277682827008258303891352625214494764804840087890625 ± <2^(-96)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 82
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.9799777018945369815930930569623137125732667740624168508455248454367084610118344720457750322579889739031078906589357223179735740682643185387825462771531986404830533545411544100191883340340538923265584361138345468402979592243794372528838744383027569376486067300678770916763902792721553530025800394380321475190323570572888977011782148578939549993535630906986182869628236131563018875004755748396913831291222699134574575416139151682755013223363692880163485026449714051027384258091517486583631633974256475542807227551303590958193358043983255902856321529624701593963465029446524567902088165283203125 ± <2^(-82)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000000000000000206450102370129100567018256456553632979610118696751881167627109530629462088765378725848938400488438867118022579994275477160110818745894649105844907185017993988252303682709144277371536536946353548417076589198154170733219903432296830382564056804994834237731993198394775390625 ± <2^(-82)]; dctAccuracy = bits 81; getAccuracy rEd = bits 81
chebDivideDCT: acGuide = bits 80, minQ = [1.02057806130781116316877252627566628934692544999223752510975060658893198706209659576416015625 ± <2^(-96)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 130
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.97983685708328711301345430761089060722848822218666324267922583912800966401258942376758276710501385405742506812494507992401219303884005101994026792121567383457811811755655591529516941520814129206898144807782335101963135461418924547268644959440193207793136984594324110509038317914920447312152347986254925352322726069803323021864156378720385900861054438190700092872580106995172855022246949374675750732421875 ± <2^(-130)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.0000000000000000000000000000000000000003912539680637383279204300011925298722598381921183607628335738795248043759609622299987729016539843181072904282428132878984060649257551895471086333867418609622870252660337264120186600773014669521423114460491416298124588146745139738413854502141475677490234375 ± <2^(-130)]; dctAccuracy = bits 129; getAccuracy rEd = bits 99
chebDivideDCT: acGuide = bits 110, minQ = [1.0205782270973678133211474813971873139844761023600605600205261583481003811182262837947013199721760585961361804924726544627702039692193806804891839807312809448899865791545601653202146597010369077906943857669830322265625 ± <2^(-107)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 166
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.9798366979120312384564439313761976881838174392332201907129106161238889427769438630256465803531365995126129036064146210199712436648767100715030965237107312456283198967927250224458713324173433246216926937865380038861064428184742699918360487471382860281792335635555393491140845273864021999560903409645302321363656920765277209481761198123963906312413439251360970902396986868050437719396758020316828829976429915404878556728363037109375 ± <2^(-166)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000000000000000000000000000000000000000009227232150561473944309510808010967212307927621862445111291546578663499092669318118954826690253444321499692747382532182864488095346564937017923286115001458584031360552743486365869856910225738010766182436431864655602790026289738989362376742064952850341796875 ± <2^(-166)]; dctAccuracy = bits 165; getAccuracy rEd = bits 110
computing max  (sin(10x)+cos(7pi*x))/(100x^2+1) over [-1,1]
result = [1.071560871290677722318058944190854926675385257220111192265844095561881330915433237125980211991201059476127442646716446851808764287119043827777338314108831279447396329642492209274621872330324519238808139562876870727642494091753068246401647181842331643438819055840220857700462175898792338557541370391845703125 ± <2^(-109)]
accuracy: bits 109
precision = Precision 307
	Command being timed: "aern2-fnreps-ops max rungeSC lpoly 100"
	User time (seconds): 40.18
	System time (seconds): 0.04
	Percent of CPU this job got: 99%
	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:40.23
	Average shared text size (kbytes): 0
	Average unshared data size (kbytes): 0
	Average stack size (kbytes): 0
	Average total size (kbytes): 0
	Maximum resident set size (kbytes): 13224
	Average resident set size (kbytes): 0
	Major (requiring I/O) page faults: 0
	Minor (reclaiming a frame) page faults: 1201
	Voluntary context switches: 1
	Involuntary context switches: 72
	Swaps: 0
	File system inputs: 0
	File system outputs: 64
	Socket messages sent: 0
	Socket messages received: 0
	Signals delivered: 0
	Page size (bytes): 4096
	Exit status: 0

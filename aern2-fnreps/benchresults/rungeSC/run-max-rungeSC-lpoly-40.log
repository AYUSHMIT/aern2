numer: acG = NoInformation; ac = Exact
inv: acG = NoInformation; ac = Exact
res: acG = NoInformation; ac = Exact
chebDivideDCT: acGuide = bits 5, minQ = [77.3671875 ± <2^(-2)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 52
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.01292537614864165825742116540343975815758561946002144403669819584202349719282059435462882561850779844607871615701069463548608543281706801249265317542999171949538961068884242892586760505323994983031385014050968940438585586759482730467215956147911763070941639133042372171444878148349744151346385478973388671875 ± <2^(-52)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.00000000000001583396377418563121770078723895352478147477079395422094876266783373227091992697488293323495712512486597375011388633793281990733442768493848825845561609609483509007080017102935817176987406096842088498334176656368033064836708945222198963165283203125 ± <2^(-45)]; dctAccuracy = bits 51; getAccuracy rEd = bits 14
chebDivideDCT: acGuide = bits 5, minQ = [57.0546875 ± <2^(-2)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 53
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.017527043680679081138198583090433185234460847553598635085020011013807681346582874967592536251182097304019321644512683624099771780048675748120627243328926583830684900012776779342197540653546722705563897950728166468381399787205595493467148162021104053653017253055937212102843858474443550221621990203857421875 ± <2^(-53)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.00000000000000660102927767159975997707547416329290116500166582524933289732871614193292821249734387073495712512486597375011388633793281990733442768493848825845561609609483509007080017102935817176987406096842088498334176656368033064836708945222198963165283203125 ± <2^(-47)]; dctAccuracy = bits 51; getAccuracy rEd = bits 14
chebDivideDCT: acGuide = bits 5, minQ = [39.8671875 ± <2^(-2)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 53
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.025083284342543506245501684054470274154007296124916086041071683790626676555869495382849873116923432718638305310099146335616535439679017661189699676466420496382545351135098111720569024892101840144858626504052925846850020647621896023107192800410763093561277340931599667654683383233304994064383208751678466796875 ± <2^(-53)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000005004700035808721509031626214420852169418218926416619396491114460032466402931225636827411461412612379376375102497704139537916600984916444639432610054486485351581063720153926422354592886654871578796485007589907312297583530380506999790668487548828125 ± <2^(-47)]; dctAccuracy = bits 51; getAccuracy rEd = bits 12
chebDivideDCT: acGuide = bits 5, minQ = [25.8046875 ± <2^(-2)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 55
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.038752649106872514986040636768369134968950740945356800225415336350654241380964582684643768796235884816344943610315753928295212554619463404510996192560170757889888631376851807741203169511482035471514177686244674987233420056568220161847077850290163686920666622619836228706528824528021459627780131995677947998046875 ± <2^(-55)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000000903908966526337105478584201869828942347084659546252449757730576193924597187054494249286461412612379376375102497704139537916600984916444639432610054486485351581063720153926422354592886654871578796485007589907312297583530380506999790668487548828125 ± <2^(-49)]; dctAccuracy = bits 53; getAccuracy rEd = bits 11
chebDivideDCT: acGuide = bits 5, minQ = [14.8671875 ± <2^(-2)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 51
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.06726221755123464316194610598969058961917982489121282874388614735540208408255863527163207121936490282705218897343667094979917804795955766470919637499479807917935485993968220551002111640158565883339298627944810608716759845602393732509927303990223520819279970643818356013099446499836631119251251220703125 ± <2^(-51)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000005653815336435542340762063691877094995268853219738680593309254620790514698905957082139911461412612379376375102497704139537916600984916444639432610054486485351581063720153926422354592886654871578796485007589907312297583530380506999790668487548828125 ± <2^(-47)]; dctAccuracy = bits 50; getAccuracy rEd = bits 10
chebDivideDCT: acGuide = bits 5, minQ = [7.0546875 ± <2^(-2)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 43
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.1417497231449942574685539357107370543790881153447796510853290654949261358621174370489804750864592610598468080706089984448474384919095142124202030139719771260868909199461965533730482249712790479824056481189643843664119435507282589664629678782265244576732345256619982620804876205511391162872314453125 ± <2^(-43)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000975774605385266503102068407140174825841263950287896022928180173042405023272844965339976558452837637352571125125274971726101898067870453432337084301177705704318599077880188132293988946861467065262973481675943220048363713203798397444188594818115234375 ± <2^(-39)]; dctAccuracy = bits 41; getAccuracy rEd = bits 7
chebDivideDCT: acGuide = bits 5, minQ = [2.3671875 ± <2^(-2)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 33
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.4224422441099687855386052388067072883114418851639804349704853465186536809602233436198319692858941978248641686812284145836970003921658880867529979880135999656962230238035447512816971055247514015350978007301361555160016198389630098257486155673268005995846241518165697925724089145660400390625 ± <2^(-33)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000637576826684644520114293569370503972359998101637756917625665664672854531182940813715339976558452837637352571125125274971726101898067870453432337084301177705704318599077880188132293988946861467065262973481675943220048363713203798397444188594818115234375 ± <2^(-30)]; dctAccuracy = bits 30; getAccuracy rEd = bits 4
chebDivideDCT: acGuide = bits 5, minQ = [1.5859375 ± <2^(-1)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 252
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.63054187192118226600985221674876847290640394088669950738916256157635467980295435949545549526714560815924734144205990826472323330844826150295447882433024853704265270622407484805442080396510851001082939513744369012135881046032803709522340795956552028656005859375 ± <2^(-252)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.00000000000000000000000000000000000000000000000000000000000000000000000000006002640548235620425166408619166809365210692737878676476163847912447315916225641743476295387491057156593239776574121556533740269707379007999977364149976441104479498509980571733888575424137150349235270141434739343822002410888671875 ± <2^(-253)]; dctAccuracy = bits 251; getAccuracy rEd = bits 0
chebDivideDCT: acGuide = bits 5, minQ = [1.5859375 ± <2^(-1)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 252
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.63054187192118226600985221674876847290640394088669950738916256157635467980295435949545549526714560815924734144205990826472323330844826150295447882433024853704265270622407484805442080396510851001082939513744369012135881046032803709522340795956552028656005859375 ± <2^(-252)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.00000000000000000000000000000000000000000000000000000000000000000000000000006002640548235620425166408619166809365210692737878676476163847912447315916225641743476295387491057156593239776574121556533740269707379007999977364149976441104479498509980571733888575424137150349235270141434739343822002410888671875 ± <2^(-253)]; dctAccuracy = bits 251; getAccuracy rEd = bits 0
chebDivideDCT: acGuide = bits 5, minQ = [2.3671875 ± <2^(-2)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 33
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.4224422441099687855386052388067072883114418851639804349704853465186536809602241499459748917097268331435611956621960261910500806125759520920689034036528816080398482818851858824770200015099830116662106255896234004527087623176125955994834963288107518818159658025024327798746526241302490234375 ± <2^(-33)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.0000000006375768266846444167167170002420446134339115928924002218991518020629915198132081604167345198819485501498391685001366636055193838888013132219261859101467393153138021080849602052352298061238488731621050619800101198764163967780405073426663875579833984375 ± <2^(-30)]; dctAccuracy = bits 30; getAccuracy rEd = bits 4
chebDivideDCT: acGuide = bits 5, minQ = [7.0546875 ± <2^(-2)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 43
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.141749723144994257468553935710737054379088115344779651085329065494926135862117537032584025619371281346314129342343305897948998934053440969573069591091264123001881998806832170687735870829870025321214924094089357676213060210387763273462174083895232537151100647709878188607035554014146327972412109375 ± <2^(-43)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.0000000000009757746053852665031020684071401748258412639502878960229281801730426749035401916667345198819485501498391685001366636055193838888013132219261859101467393153138021080849602052352298061238488731621050619800101198764163967780405073426663875579833984375 ± <2^(-39)]; dctAccuracy = bits 41; getAccuracy rEd = bits 7
chebDivideDCT: acGuide = bits 5, minQ = [14.8671875 ± <2^(-2)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 51
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.067262217551234643161946105989690589619179824891212828743886147355402084082558706878288516385993975109594163912916138520824140624195459085833251333968010514077754014413139019431304055604648794260596910530643707016268478985300565758578459696518615250045024043441571799661904407230395008809864521026611328125 ± <2^(-51)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000005653815336435542340762063691877094995268853219738680593309254620790514698905957082139911461412612379376375102497704139537916600984916444639432610054486485351581063720153926422354592886654871578796485007589907312297583530380506999790668487548828125 ± <2^(-47)]; dctAccuracy = bits 50; getAccuracy rEd = bits 10
chebDivideDCT: acGuide = bits 5, minQ = [25.8046875 ± <2^(-2)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 55
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.03875264910687251498604063676836913496895074094535680022541533635065424138096461181856231031382926077107421472307060212921932632190192713676964722782920170732573094040312642657932964160062878166405440353606974401402163943662198384726045211417988627499500097880099153059736682980229716122266836464405059814453125 ± <2^(-55)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000000903908966526337105478584201869828942347084659546252449757730576193924597187054494249286461412612379376375102497704139537916600984916444639432610054486485351581063720153926422354592886654871578796485007589907312297583530380506999790668487548828125 ± <2^(-49)]; dctAccuracy = bits 53; getAccuracy rEd = bits 11
chebDivideDCT: acGuide = bits 5, minQ = [39.8671875 ± <2^(-2)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 53
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.0250832843425435062455016840544702741540072961249160860410716837906266765558695064395560545992767651645630862344634243914568032294989424126519318049026634221985934179717433454669843911369310081636974757995770790790223888466440012195288734930799611457349038528522218449712255505801294930279254913330078125 ± <2^(-53)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000005004700035808721509031626214420852169418218926416619396491114460032466402931225636827411461412612379376375102497704139537916600984916444639432610054486485351581063720153926422354592886654871578796485007589907312297583530380506999790668487548828125 ± <2^(-47)]; dctAccuracy = bits 51; getAccuracy rEd = bits 12
chebDivideDCT: acGuide = bits 5, minQ = [57.0546875 ± <2^(-2)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 53
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.017527043680679081138198583090433185234460847553598635085020011013807681346582889117202305044068849055084434231343081280001079312165024135644188845547263618374587783322749631502153263165806252392864939589693789280242044929432219811905280162100293200320579439438549267105127427157640340737998485565185546875 ± <2^(-53)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.00000000000000660102927767159975997707547416329290116500166582524933289732871614193292821249734387073495712512486597375011388633793281990733442768493848825845561609609483509007080017102935817176987406096842088498334176656368033064836708945222198963165283203125 ± <2^(-47)]; dctAccuracy = bits 51; getAccuracy rEd = bits 14
chebDivideDCT: acGuide = bits 5, minQ = [77.3671875 ± <2^(-2)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 52
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.01292537614864165825742116540343975815758561946002144403669819584202349719282059598426762350947027816923378547429239942497849675377925678742682559398500547950071755094168645838417911104065120944496664502571069809550656038048547795377107670992976961688828339569964378207023170119782662368379533290863037109375 ± <2^(-52)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.00000000000001583396377418562806225716635490630313456050966280930225593692739764025183881125222668323495712512486597375011388633793281990733442768493848825845561609609483509007080017102935817176987406096842088498334176656368033064836708945222198963165283203125 ± <2^(-45)]; dctAccuracy = bits 51; getAccuracy rEd = bits 14
chebDivideDCT: acGuide = bits 10, minQ = [1 ± 0]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 33
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.9999999999088352374058416997742778256430585396773201748416375069246901539072337229397684164218929280418299750944898823774371065445298962277212988354827989513057494273738310300591201886675261838749322869395108275748299654851133064341180487017215907345247190849688245796815376038019603167863532037306758556189594477417673939455280919351109617769557944947132532466588373784237129959408471814229879542802598280694532990887667458664939328462727598699528150175321656050060838662120639430685997695036348886787891387939453125 ± <2^(-33)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.0000000002011339656492590410442839277010995159555850619881312013603746891021760901257081604167345198819485501498391685001366636055193838888013132219261859101467393153138021080849602052352298061238488731621050619800101198764163967780405073426663875579833984375 ± <2^(-32)]; dctAccuracy = bits 31; getAccuracy rEd = bits 31
chebDivideDCT: acGuide = bits 10, minQ = [1 ± 0]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 33
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.999999999908835237405841712698974896784115959543080988434807093890504386733468186187019561523755896161838714534253044165670925653206924727578108522996293073650786885604404716222016908214321111694523550341097986980016112272902417367063715913515918089289150998055771338971900799224336823341244692488460531769537135259881313908092621818865485087895924720547764121281960563646798222668277354660666621407407335625972172918304314714849485935461642248884346870921060601443033095988145546317849010620193439535796642303466796875 ± <2^(-33)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.0000000002011339656492590927430722122653291954186283163608095492236316204071077307507081604167345198819485501498391685001366636055193838888013132219261859101467393153138021080849602052352298061238488731621050619800101198764163967780405073426663875579833984375 ± <2^(-32)]; dctAccuracy = bits 31; getAccuracy rEd = bits 31
chebDivideDCT: acGuide = bits 15, minQ = [1.016270528431050479412078857421875 ± <2^(-12)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 59
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.9839899633258386227756866259574335381634442144195875662623097153525919583091017728712533329195063806222539500525057049094952473640136029939981162328708403859929719573567268808250944289277829625913703504519806117171646020935181845690130421191396334664992322910238633777539607461193327253567986190319061279296875 ± <2^(-59)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000000001371095928886553854249175974937047962920156158295149299158890371033463852608917357711622926662392779000091109070346255925867542147950790606764492876875868072056640136823486537415899248774736707986673413250944264518693671561777591705322265625 ± <2^(-59)]; dctAccuracy = bits 58; getAccuracy rEd = bits 12
chebDivideDCT: acGuide = bits 20, minQ = [1.016428530216217041015625 ± <2^(-61)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 72
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.98383700405111382906805098236322333415497800712229090291056646789573549371259202394821824692155990162015343461132889552081422442785087928653535321873143222197571629081800520476072269816147002454548827784325973647681862341244331897675059362158306463483206509261850660486430176034956807118447841276065446436405181884765625 ± <2^(-72)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000000000000178826819571441229363718448512722636750482353260939467441407832923361449423746100134364203884147933673470436552973935134099379456941780918931267266384563049560119720550720238911842677894619488339236594576231453856962616555392742156982421875 ± <2^(-72)]; dctAccuracy = bits 71; getAccuracy rEd = bits 71
chebDivideDCT: acGuide = bits 40, minQ = [1.020431381312814231310231574665959306244704743794520045993900971727437023751396127924095935668447054922580718994140625 ± <2^(-46)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 82
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.979977701894537314783615524659876998956709910730552931046067650056749518370812125095978053432385194783699008401266341935685021165371782188634360958332274534708931994044002864670228708625996551320365544751543304996420195634788512045579395586483099847171914619138664289282783279136799102124709415218006824943586252629756927490234375 ± <2^(-82)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000000000000000206450102370129399032380769927991203166621522782568517242101039762734699021068406240647572871827506519920936412916600984916444639432610054486485351581063720153926422354592886654871578796485007589907312297583530380506999790668487548828125 ± <2^(-82)]; dctAccuracy = bits 81; getAccuracy rEd = bits 46
computing max  (sin(10x)+cos(7pi*x))/(100x^2+1) over [-1,1]
result = [1.071560871290648138382608794521461496380157907266848382700550656423279470387096846942874692983672835674610737070960580168905107917403708279277049880597878064056174412368862648689275491027179922978423401863708133596769949641919943392206682136896660784146265362381905995637804573952130617560523229649518372688118383478026500600095204883187181697934745082699487940229381658952014276516522881247524466952873223258002835994894514426780776692459638387030967740044253761955573646367264988021883453939153696410357952117919921875 ± <2^(-40)]
accuracy: bits 40
precision = Precision 520
	Command being timed: "aern2-fnreps-ops max rungeSC lpoly 40"
	User time (seconds): 31.37
	System time (seconds): 0.07
	Percent of CPU this job got: 99%
	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:31.44
	Average shared text size (kbytes): 0
	Average unshared data size (kbytes): 0
	Average stack size (kbytes): 0
	Average total size (kbytes): 0
	Maximum resident set size (kbytes): 12972
	Average resident set size (kbytes): 0
	Major (requiring I/O) page faults: 0
	Minor (reclaiming a frame) page faults: 1101
	Voluntary context switches: 1
	Involuntary context switches: 30
	Swaps: 0
	File system inputs: 0
	File system outputs: 48
	Socket messages sent: 0
	Socket messages received: 0
	Signals delivered: 0
	Page size (bytes): 4096
	Exit status: 0

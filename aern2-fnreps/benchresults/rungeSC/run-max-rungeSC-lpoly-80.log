numer: acG = NoInformation; ac = Exact
inv: acG = NoInformation; ac = Exact
res: acG = NoInformation; ac = Exact
chebDivideDCT: acGuide = bits 5, minQ = [77.3671875 ± <2^(-2)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 52
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.012925376148641658257421165403439758157585619460021444036698195842023497192820649405709745423792265777645710306298908368151709206866612317085635102505125505061743660734878107258676854081936603383803436865067233543737884173134952008447352172384534115888203093268331053089017546153913391926426612599243526346981525421142578125 ± <2^(-52)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000015833963774185631217700787238953524781474770793954220948762667831033509426920676681731345111617387773511748867036649876982617491261816828688636600623407228028790818635113528000325899837797150588507398757680385842341313639043687278018524011713452637195587158203125 ± <2^(-45)]; dctAccuracy = bits 51; getAccuracy rEd = bits 14
chebDivideDCT: acGuide = bits 5, minQ = [57.0546875 ± <2^(-2)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 53
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.01752704368067908113819858309043318523446084755359863508502001101380768134658300329034241922117345407194242702050610636098605454912566675270618276140384884975009605625388184941827699720225811007384951372909394568708504040535960698373844376052243064341648880514836780540802508069307685811821784227504394948482513427734375 ± <2^(-53)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000006601029277671599759977075474163292901165001665825249332897328713443171435206199142668845111617387773511748867036649876982617491261816828688636600623407228028790818635113528000325899837797150588507398757680385842341313639043687278018524011713452637195587158203125 ± <2^(-47)]; dctAccuracy = bits 51; getAccuracy rEd = bits 14
chebDivideDCT: acGuide = bits 5, minQ = [39.8671875 ± <2^(-2)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 53
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.025083284342543506245501684054470274154007296124916086041071683790626676555869609224979017043821920443578088596308560800497366002856118787478086728245705537039829367638648168567501149606659855828847446956449107943039980368976095003606184029006877661496041417132625825351287494281086846992234740127969416789710521697998046875 ± <2^(-53)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.0000000000000050047000358087215090316262144208521694182189264166193964911144576035728231334141068994415781321714414582242069256549138878322438832717800820456204363850596201535730445794696002281298864580054119551791303762700896389195473305810946129668081994168460369110107421875 ± <2^(-47)]; dctAccuracy = bits 51; getAccuracy rEd = bits 12
chebDivideDCT: acGuide = bits 5, minQ = [25.8046875 ± <2^(-2)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 55
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.0387526491068725149860406367683691349689507409453568002254153363506542413809647907631034938258677205849577039302197424362873344252358321400403752744780564230056264328968684456398794163688518422600360974311012038955914044069566846797951807741758701341033558789379956237918468274257979421133779585062484329682774841785430908203125 ± <2^(-55)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.0000000000000009039089665263371054785842018698289423470846595462524497577305737650310173892429643213165781321714414582242069256549138878322438832717800820456204363850596201535730445794696002281298864580054119551791303762700896389195473305810946129668081994168460369110107421875 ± <2^(-49)]; dctAccuracy = bits 53; getAccuracy rEd = bits 11
chebDivideDCT: acGuide = bits 5, minQ = [14.8671875 ± <2^(-2)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 51
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.0672622175512346431619461059896905896191798248912128287438861473554020840825590078084945516449509260907201504920711845551863699823198872744020051387317944851089256682905559202283634886302989343276461979999647244981466296356968410035855961126424320538169546930683703445394958615548806901696110571720055304467678070068359375 ± <2^(-51)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.0000000000000056538153364355423407620636918770949952688532197386805933092546183616211191081455522119415781321714414582242069256549138878322438832717800820456204363850596201535730445794696002281298864580054119551791303762700896389195473305810946129668081994168460369110107421875 ± <2^(-47)]; dctAccuracy = bits 50; getAccuracy rEd = bits 10
chebDivideDCT: acGuide = bits 5, minQ = [7.0546875 ± <2^(-2)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 43
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.14174972314499425746855393571073705437908811534477965108532906549492613586211820840610488829025335649052658517074183412242025682753763231020722427042145140186261988778839335691174235690423136131119267426362224319431236831840416273972386703362152340371275972427522870720323876214674641005331068299710750579833984375 ± <2^(-43)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.0000000000009757746053852665031020684071401748258412639502878960229281801730394363732763998225953850760892939102188093990936293199015860939930094534629509092804987257824230326549080908224002607198702377204708059190061443086738730509112349498224148192093707621097564697265625 ± <2^(-39)]; dctAccuracy = bits 41; getAccuracy rEd = bits 7
chebDivideDCT: acGuide = bits 5, minQ = [2.3671875 ± <2^(-2)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 33
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.4224422441099687855386052388067072883114418851639804349704853465186536809602257955734852849640650141961012939383499617637539423147579897425507418497589294088106450004059062566520674794558443848727576623065417380527665543269232680968383907919631281648502448285262440841325570772823994047939777374267578125 ± <2^(-33)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.0000000006375768266846444167167170002420446134339115928924002218991518020629882812952985067873186544796227791265508629237537403148646808792403879985115575002606857479508316699004986248808003584898215768656473581386334484244265754450029480560058203764128847979009151458740234375 ± <2^(-30)]; dctAccuracy = bits 30; getAccuracy rEd = bits 4
chebDivideDCT: acGuide = bits 5, minQ = [1.5859375 ± <2^(-1)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 268
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.630541871921182266009852216748768472906403940886699507389162561576354679802955665006657197933916557156764092115484073197292515038526597734434848290783143777326033330638407138588516891337040251848642222524422947017093938511400830342914190784764372210702276788651943206787109375 ± <2^(-268)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.0000000000000000000000000000000000000000000000000000000000000000000000000000000008903278469039033091084020237766407945634425113483727948523664080557647187381584332951864668907370863728305972318773462177706303394800562187864277260671407952242855222581166698668084196884747429906318584580393604710479849018156528472900390625 ± <2^(-269)]; dctAccuracy = bits 267; getAccuracy rEd = bits 0
chebDivideDCT: acGuide = bits 5, minQ = [1.5859375 ± <2^(-1)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 268
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.630541871921182266009852216748768472906403940886699507389162561576354679802955665006657197933916557156764092115484073197292515038526597734434848290783143777326033330638407138588516891337040251848642222524422947017093938511400830342914190784764372210702276788651943206787109375 ± <2^(-268)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.0000000000000000000000000000000000000000000000000000000000000000000000000000000008903278469039033091084020237766407945634425113483727948523664080557647187381584332951864668907370863728305972318773462177706303394800562187864277260671407952242855222581166698668084196884747429906318584580393604710479849018156528472900390625 ± <2^(-269)]; dctAccuracy = bits 267; getAccuracy rEd = bits 0
chebDivideDCT: acGuide = bits 5, minQ = [2.3671875 ± <2^(-2)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 33
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.4224422441099687855386052388067072883114418851639804349704853465186536809602257955878898564669209221536324987833953042027226637216817438405530099886868083293625981865944270714147718971404980935185601572406708186621441691797589138224546361223478116238040875877915274194673855845394427888095378875732421875 ± <2^(-33)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.0000000006375768266846445201142935693705039723599981016377569176256656646728515625535345989304675007486451026041055652735271476448400774027386403618772952275808104293964374280642256475864004236697891362957650596183849845015950437077307567934614240812152274884283542633056640625 ± <2^(-30)]; dctAccuracy = bits 30; getAccuracy rEd = bits 4
chebDivideDCT: acGuide = bits 5, minQ = [7.0546875 ± <2^(-2)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 43
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.14174972314499425746855393571073705437908811534477965108532906549492613586211820840879113511992206195191363268850540704607083644000651787808978012976325656516217492524977571754368956244378182867521111072718424564301874705598899345477964001187797787996828536326998465206291992479759045409082318656146526336669921875 ± <2^(-43)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.0000000000009757746053852665031020684071401748258412639502878960229281801730394363773944458941698082106004556489961605739803329848892843557421356351458197729405610665052259117367716021752002933098540174355296566588819123472581071822751393185502166716105421073734760284423828125 ± <2^(-39)]; dctAccuracy = bits 41; getAccuracy rEd = bits 7
chebDivideDCT: acGuide = bits 5, minQ = [14.8671875 ± <2^(-2)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 51
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.0672622175512346431619461059896905896191798248912128287438861473554020840825590078088275501927341706083646640593235345622734514528176092854599985451320417534155270340274876350247996602029153214712689715897360900235956907447366184146016863393997975142979118904812314752720985675947702742139000520182889886200428009033203125 ± <2^(-51)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000005653815336435542340762063691877094995268853219738680593309254618361633473246360275481345111617387773511748867036649876982617491261816828688636600623407228028790818635113528000325899837797150588507398757680385842341313639043687278018524011713452637195587158203125 ± <2^(-47)]; dctAccuracy = bits 50; getAccuracy rEd = bits 10
chebDivideDCT: acGuide = bits 5, minQ = [25.8046875 ± <2^(-2)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 55
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.03875264910687251498604063676836913496895074094535680022541533635065424138096479076328656019551107421523757204182800672601394807915658618664076613308373112819165164417467975395354503086343636999752233224889250422718454316854446740374007522879042642994358336948038058491436432987810160356867417164039579802192747592926025390625 ± <2^(-55)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.0000000000000009039089665263371054785842018698289423470846595462524497577305737650310173892429643213165781321714414582242069256549138878322438832717800820456204363850596201535730445794696002281298864580054119551791303762700896389195473305810946129668081994168460369110107421875 ± <2^(-49)]; dctAccuracy = bits 53; getAccuracy rEd = bits 11
chebDivideDCT: acGuide = bits 5, minQ = [39.8671875 ± <2^(-2)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 53
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.0250832843425435062455016840544702741540072961249160860410716837906266765558696092248823271095289433260257410897437981961109179132793429308841010514938101451947591140452646607635459229051788785963703127532670192625174742679680432341160391882718100635006107371176619518432445736627590081313510239624520181678235530853271484375 ± <2^(-53)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.0000000000000050047000358087215090316262144208521694182189264166193964911144576035810592255572557457106004556489961605739803329848892843557421356351458197729405610665052259117367716021752002933098540174355296566588819123472581071822751393185502166716105421073734760284423828125 ± <2^(-47)]; dctAccuracy = bits 51; getAccuracy rEd = bits 12
chebDivideDCT: acGuide = bits 5, minQ = [57.0546875 ± <2^(-2)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 53
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.017527043680679081138198583090433185234460847553598635085020011013807681346583003290776626491092877598444303119310064777302281716841208813456613004981957189581035200831894470965223765604894664067972358531554531761546902014280683543753328362824847183130431618770857184825390410825261822136411637984565459191799163818359375 ± <2^(-53)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.0000000000000066010292776715997599770754741632929011650016658252493328973287134431631991140559938225760892939102188093990936293199015860939930094534629509092804987257824230326549080908224002607198702377204708059190061443086738730509112349498224148192093707621097564697265625 ± <2^(-47)]; dctAccuracy = bits 51; getAccuracy rEd = bits 14
chebDivideDCT: acGuide = bits 5, minQ = [77.3671875 ± <2^(-2)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 52
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.012925376148641658257421165403439758157585619460021444036698195842023497192820649405815049463055558613374702637847620086102545400389168199654294901970963025323068610649992995584489764916095032751960039515089802704012200992503703284866851960777174572097085861553142121271282233678783131491929481171609950251877307891845703125 ± <2^(-52)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000015833963774185631217700787238953524781474770793954220948762667831033509426920676681731345111617387773511748867036649876982617491261816828688636600623407228028790818635113528000325899837797150588507398757680385842341313639043687278018524011713452637195587158203125 ± <2^(-45)]; dctAccuracy = bits 51; getAccuracy rEd = bits 14
chebDivideDCT: acGuide = bits 10, minQ = [1 ± 0]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 33
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.99999999990883523740584171269897489678411595954308098843480709389050438673347414520982850527661561038958903304622061862446895663571126420608258693563327407319407441579771747727154927515715285607912821773698712178497260713836651339752149123618387880274609754174213385131511907836954016868391658735118130552090214264471645594091850648990445591433558757181872414754460877206959258041443817995002974216309159659876956777944545116073212657714506339961508326621568569225904642267992680546655176259627027930161415904784794062010178095079027116298675537109375 ± <2^(-33)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.0000000002011339656492590927430722122653291954186283163608095492236316204071044922410345989304675007486451026041055652735271476448400774027386403618772952275808104293964374280642256475864004236697891362957650596183849845015950437077307567934614240812152274884283542633056640625 ± <2^(-32)]; dctAccuracy = bits 31; getAccuracy rEd = bits 31
chebDivideDCT: acGuide = bits 10, minQ = [1 ± 0]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 33
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.99999999990883523740584169977427782564305853967732017484163750692469015390724123507951206151338114601288552580982785675958910445918343938332056405462574191546709711779717604323299121720639277211907254697780574637251703652760623967123435015126531697962722470169616542383282759159778182742820830023436131983623812680879918402887530905969915244048521901149638199690538677579258484268886557787053094087620011647868047256432516900371272394816953567837816778438441545872206574143354353756679167480650508126738460726486146246116959446226246654987335205078125 ± <2^(-33)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.0000000002011339656492590927430722122653291954186283163608095492236316204071044922410345989304675007486451026041055652735271476448400774027386403618772952275808104293964374280642256475864004236697891362957650596183849845015950437077307567934614240812152274884283542633056640625 ± <2^(-32)]; dctAccuracy = bits 31; getAccuracy rEd = bits 31
chebDivideDCT: acGuide = bits 15, minQ = [1.016270528431050479412078857421875 ± <2^(-12)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 59
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.983989963325838622775686625957433538163444214419587566262309715352591958309105336230716484842493122057362423249860101812631567919781389306028341021784305831997672407411444076502773981635135067569199399624929485720432463929171045681739706144236466674157931542544845022345382285999218670291543986650140141136944293975830078125 ± <2^(-59)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000000001371095928886553854249175974937047962920156158295149299158888212016033355427207549930724196995164107049320221989926189570494757090097213181960374044336817274491181068116800195539902678290353104439254608231505404788183426212366811114407028071582317352294921875 ± <2^(-59)]; dctAccuracy = bits 58; getAccuracy rEd = bits 12
chebDivideDCT: acGuide = bits 20, minQ = [1.016428530216217041015625 ± <2^(-77)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 72
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.98383700405111382906805098236322333415497800712229090291056646789573549371259711785798427874792357159661433429515284534542055336091877532485682375891790134419480899039600207137894519074524375720523998901130774057280643286586744787031228932628648496540825946740349517770559672543952447329985663317108990355563946650363504886627197265625 ± <2^(-72)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.0000000000000000000001788268195714412293637184485127226367504823532609394674395186998782570406829047772425087879194245328006756549138878322438832717800820456204363850596201535730445794696002281298864580054119551791303762700896389195473305810946129668081994168460369110107421875 ± <2^(-72)]; dctAccuracy = bits 71; getAccuracy rEd = bits 71
chebDivideDCT: acGuide = bits 40, minQ = [1.020431381312814578254943853607983328402042388916015625 ± <2^(-76)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 82
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.97997770189453698159309305696231371257326677406241685084552484543670846101183447199985640416520172866514204846000938009098633487421456073893756324395194732226352321360928979875926469011208964416514443658914124908473632185737534434973085147868479951425253185707185240378705350022484718232431684832516266374369262592836093972437083721160888671875 ± <2^(-82)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.0000000000000000000000002064501023701291005670182564565536329796101186967518811676641718942190598578796230293019062292051525131606705343557421356351458197729405610665052259117367716021752002933098540174355296566588819123472581071822751393185502166716105421073734760284423828125 ± <2^(-82)]; dctAccuracy = bits 81; getAccuracy rEd = bits 81
chebDivideDCT: acGuide = bits 80, minQ = [1.02057806130781116316877251378195399542770322740133938596389557054981427180881126239696976522724629230979818136711522575353627839689352185814641416072845458984375 ± <2^(-77)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 130
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.9798368570832871130134546081079572189344652324057086369961143322674950182247859135918224604218356807513082975848312894392584399659343675576367331091855223228911127609360328112137157137552694932872582471680362592166793090167764022296703531533820013180887970022155245529410201923546245497281044377120194431652209082707789473301904284557512273511059586184046565904282033443450927734375 ± <2^(-130)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.00000000000000000000000000000000000000039125396806373832792043000119252987225983820859049792183399955939454161165959906129941499953585737038797008410276374632821009934474468893487592041120013035993511886023540295950307215433693652545561747491120740960468538105487823486328125 ± <2^(-130)]; dctAccuracy = bits 129; getAccuracy rEd = bits 80
chebDivideDCT: acGuide = bits 85, minQ = [1.0205782270971647400311687631902567243645743050311167064818375620256598364179252071379005319531783199677329035990425461434484220578840820596677972806536117037393836508325416122192016411740253890878187016468835256486424537306687941215624619025795780789219375716035282810226583229129548868741039768792688846588134765625 ± <2^(-156)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 121
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.9798366979122262050514621648523946987859324803920253964146636680592427080564694479839920215788180843200706818112847518614537583130798025581523191696152740336968833915330711426659679136210287875805870159336839003754671521744436483402670172886639337513199369908191596382996043094211096740585142823871026592354920483699511066552458454004222736893894292542374465586414008317755987162994828335827140856906236621171046863310039043426513671875 ± <2^(-121)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000000000000000000000000000203485600190527858866500055179755398528057928401116373437806417256223719311055323775220915891169145356349654570413528970154012757184811214889440975091963196206548873198650909308732967430942134689657497368548088915038269371654670711154108144631466445895665647578785298448207356672261247876321021976764313876628875732421875 ± <2^(-121)]; dctAccuracy = bits 120; getAccuracy rEd = bits 120
computing max  (sin(10x)+cos(7pi*x))/(100x^2+1) over [-1,1]
result = [1.0715608712906777223180589431220781467719835406785458660968148099362259987590765620511692236865240237907326183436150106216636661730278253016227527551951381158045123017584629506325563327761521021251768684977722625527117899042978763551490526232941964621278785142983329412947408444826120763396092565852942160721828781209941094942905692732892930507659912109375 ± <2^(-85)]
accuracy: bits 85
precision = Precision 356
	Command being timed: "aern2-fnreps-ops max rungeSC lpoly 80"
	User time (seconds): 37.63
	System time (seconds): 0.03
	Percent of CPU this job got: 99%
	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:37.67
	Average shared text size (kbytes): 0
	Average unshared data size (kbytes): 0
	Average stack size (kbytes): 0
	Average total size (kbytes): 0
	Maximum resident set size (kbytes): 12764
	Average resident set size (kbytes): 0
	Major (requiring I/O) page faults: 0
	Minor (reclaiming a frame) page faults: 1098
	Voluntary context switches: 1
	Involuntary context switches: 54
	Swaps: 0
	File system inputs: 0
	File system outputs: 56
	Socket messages sent: 0
	Socket messages received: 0
	Signals delivered: 0
	Page size (bytes): 4096
	Exit status: 0

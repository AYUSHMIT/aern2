numer: acG = NoInformation; ac = Exact
inv: acG = NoInformation; ac = Exact
res: acG = NoInformation; ac = Exact
chebDivideDCT: acGuide = bits 46, minQ = [91.2499999999653716997727133194680945922107329071337744608172215521335601806640625 ± <2^(-43)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 96
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.010958904109593199870922410951285921360479963369012559570585576433430717140765780221934540572904684183335396942297972734425068697038069266313025659072787492521425328221468476270785257690178595713247068541043537074051379184885335841885265519088226799823921627039179203935315338781538948421897182868245516730905726512913342571127545389282837054609135165683671182322785490595298597680076755255923596187054582794959544026132596219216035097853366996386627941798037186084652479073916050219638467807333604290446162611246706808376671915539191104471683502197265625 ± <2^(-96)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.0000000000000000000000000007923092960773732773917446130816564718756485124352149738688262939311354455823353882730554388424299075200511222268055094534629509092804987257824230326549080908224002607198702377204708059190061443086738730509112349498224148192093707621097564697265625 ± <2^(-90)]; dctAccuracy = bits 95; getAccuracy rEd = bits 56
chebDivideDCT: acGuide = bits 46, minQ = [81.9999999999344488799124436855463339004178313640380793003714643418788909912109375 ± <2^(-43)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 95
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.0121951219512292610232135196611831539954031342750804229713434871184626203920344759217845145359074207972725277501350725919377915898708046332200020078322879550661467536942228880000246916344752273897839359039589436902767204935708858166720070901904829601700054311067179192897760056549576639335000902233426337584923311542858396029712008297351946119804840152108948641211044132011048991220731524262794920082016007875006151055284172653826908766900917813489638058227946379056840482665766324356653075498015194125994127975526511165060838948193122632801532745361328125 ± <2^(-95)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.0000000000000000000000000016313782813200239377638768767499070347919860268574419136043853873443301537336354216133668733282969609641678488088671356351458197729405610665052259117367716021752002933098540174355296566588819123472581071822751393185502166716105421073734760284423828125 ± <2^(-88)]; dctAccuracy = bits 94; getAccuracy rEd = bits 56
chebDivideDCT: acGuide = bits 46, minQ = [73.25000000006184530688404469428117620626423307650211772814577344589498524604458118414385126015986315906047821044921875 ± <2^(-50)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 94
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.0136518771330942757061065638978522062469316357717245119954781647585197531187652744813445281072766825292268799004346749246705990389408197324044904543623060951107692650868510142061323624692437689043306619847411393505442821496575492083806387065176585639335371284054173927240091497016710877946183695649708439993012825774774620936093415215195489864369557797746710749119263309023303491849768936431484703706305837824714128175537761438959310948391295358413157568243992329164275136844567578296195942133550715880119241774082183837890625 ± <2^(-94)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000000000000000003459566681378447175026759348547615203921121163065925516595701421734486431477947128475342247148963365349337955144617542147950790606764492876875868072056640136823486537415899248774736707986673413250944264518693671561777591705322265625 ± <2^(-87)]; dctAccuracy = bits 93; getAccuracy rEd = bits 62
chebDivideDCT: acGuide = bits 46, minQ = [65.0000000000290363288968182961221473265857329071337744608172215521335601806640625 ± <2^(-43)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 99
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.015384615384608512111503737033624776209726927591570288734821889404184668275325832353114130680749921435554881553548272147659131931602438866719626120238482301455940625574743040025169083655926787553774043892473174056388550154083997353602576662462881676394260704086400443788135047629024811511684180372399238726159233690348901345008199190772674122380511460853245416886331380566180676708796282164966500189993529564632279481724380221194946121467469019200991150136643430823247262028395043852418774229802865983804501727691426728183987648890251875855028629302978515625 ± <2^(-99)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.0000000000000000000000000001077417845029263096032434599731364907145030373576293499349930178971124536965149688287691943721530376865817313576648844534629509092804987257824230326549080908224002607198702377204708059190061443086738730509112349498224148192093707621097564697265625 ± <2^(-92)]; dctAccuracy = bits 97; getAccuracy rEd = bits 55
chebDivideDCT: acGuide = bits 46, minQ = [57.2499999999999324984400812837864158644750334214990061809658072888851165771484375 ± <2^(-43)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 97
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.01746724890829696382648994594153896809696053852362526140597198595687818327835336996153956824884307321175070093231741577745847413114205863045685232844209091907673866066999881517656224372497085423715416115558534894511178577668926062296657808181194899928200677683303967058176999270557536255338925974937073781056271746049375572689821073481527694208824919195549100631015575506110446343017264616489318230139503947160056931522889521896559652558332196186478432336470093819110872166493679806727902354163128837611646284501821894952211522422658163122832775115966796875 ± <2^(-97)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000000000000000000251479121561991820865704378117239857025476638293611880295484071671980368311450261897028554214600802510556072382994757090097213181960374044336817274491181068116800195539902678290353104439254608231505404788183426212366811114407028071582317352294921875 ± <2^(-91)]; dctAccuracy = bits 96; getAccuracy rEd = bits 55
chebDivideDCT: acGuide = bits 46, minQ = [49.9999999999744666467904426018472449828357329071337744608172215521335601806640625 ± <2^(-43)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 96
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.02000000000001021334128384206092411299856577559339568030293687811270655292922003643901976220398314715828720902599608927720505110809412656860051275686089357241062789704131530676747627333254475408823381885672447667534952276287995830135507239206893156337852892753411060020203822063034152209136822144994711360555641339917165852910437386215520837840965428472228258146266167117607054452532435615102952595500781832568705973331644084639473063871569202788800052141800403726602642701164402530723409286083485920648074997844141804936857198526922729797661304473876953125 ± <2^(-96)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.0000000000000000000000000005973975706089496132871637090158854069440793226971693174755687143426386001250190298005646245774836555862076437307421356351458197729405610665052259117367716021752002933098540174355296566588819123472581071822751393185502166716105421073734760284423828125 ± <2^(-90)]; dctAccuracy = bits 95; getAccuracy rEd = bits 54
chebDivideDCT: acGuide = bits 46, minQ = [43.2499999999526387739479022503046346816678313640380793003714643418788909912109375 ± <2^(-43)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 100
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.0231213872832623134624222344728934471270478131215804985681442797908519645296397817902440705963426054471277235254481774551961554026532562585434588999750458335808828406637942823738827126294418200140424012232802855897774099692802253035394881132352448716440026019155444234324233102044619780937368682920657342818823876750618446962749612261802295455776091006929320601777555338626640226951487874622406141821467567077706237941063615525976960752895242317972975511665167908560266628545180425262260331383011375372976039439831298649696833535926998592913150787353515625 ± <2^(-100)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.0000000000000000000000000000205316888492965349857611693645135496155610625725131399857981081562844881520817674396063480323665542460335498238514078909629509092804987257824230326549080908224002607198702377204708059190061443086738730509112349498224148192093707621097564697265625 ± <2^(-95)]; dctAccuracy = bits 99; getAccuracy rEd = bits 54
chebDivideDCT: acGuide = bits 46, minQ = [37.00000000004365541278082349374351747402029354120451103188826560055707675408846746289981410882319323718547821044921875 ± <2^(-50)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 99
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.027027027026995138486034958611250433358097813376941704174314208474299554737645110928729939971796972601463798545771085407851185149106831689481563008945838035974217130565616598367974465417685379227579269553210703034790434108674566228430815180533828527548496691949675230953302738069203755558883564401580670059480972250803290813584393322261415691557262892436535901296631651085312256348838041837605595136204227579216661762193547317763026421794706799477329972865276294022280160438194310072723691718010741169564425945281982421875 ± <2^(-99)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000000000000000000040700536005603578472961799128173359544711067970221293692913362295357352101430484795054938637145918949464770504958318129456941780918931267266384563049560119720550720238911842677894619488339236594576231453856962616555392742156982421875 ± <2^(-94)]; dctAccuracy = bits 98; getAccuracy rEd = bits 60
chebDivideDCT: acGuide = bits 46, minQ = [31.2500000000199413818790890137429969359607329071337744608172215521335601806640625 ± <2^(-43)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 100
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.0319999999999795800249558682315298213830397612455250434007967256754551710323904658368194045195311899114063005183528544222504356771516761098762458053627931336162089356307677265687939309238146455579882233447061596022684462518060263191922209775904969106249651572537604398444343227121033684359036949213432198100291935122591015717237115162352337437045056210997054205032359488848342563082945560228005099515648889784650998167258863537923135138994456795644817523278211447947843478166970866293088669960954682776736714293927370256209741228303755633533000946044921875 ± <2^(-100)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.0000000000000000000000000000225707902045882331906950912444572719890468932889551973077603375191900296721608193172600782764415183843321955038134246976458197729405610665052259117367716021752002933098540174355296566588819123472581071822751393185502166716105421073734760284423828125 ± <2^(-95)]; dctAccuracy = bits 99; getAccuracy rEd = bits 53
chebDivideDCT: acGuide = bits 46, minQ = [25.9999999999999324984400812837864158644750334214990061809658072888851165771484375 ± <2^(-43)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 95
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.03846153846153856139284012869904135356195194016742350945876611055036678500246952360350789392912607993612833158779614340273699812125222529010440715394709299432729598037032038888847381589767313359693556454193863848580773126380318581203103626088880015786573584740528638049616197443702379735933474552552393850995197344068966057892149474589711207738226901520431992771714015305690453030549171618103721134836898502764108316302204391526585978121725733643542608063083470160141655943419081529525379145664775305348259196711914464916759470725082792341709136962890625 ± <2^(-95)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.0000000000000000000000000005492015149772587867037335005960878193806649995091743810600267840373785464509311020119594677572162166976578390432421356351458197729405610665052259117367716021752002933098540174355296566588819123472581071822751393185502166716105421073734760284423828125 ± <2^(-90)]; dctAccuracy = bits 94; getAccuracy rEd = bits 52
chebDivideDCT: acGuide = bits 46, minQ = [21.2499999999834486009818316012979849253025803090078625749029117755884191629466538342452253118608496151864528656005859375 ± <2^(-41)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 91
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.0470588235294484183233553586499935442240896946043616673936938083370529763894997862210311437511925688543188934477369109328882623630930994443777729477405308457093857719514514129785382874285398180204477088579773411860445823252751114682052735541224494709741378140026979317567988475989339348867245669421656428799138893737108446657657623291015625 ± <2^(-91)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000000000000000005884392605378106482309879580535545474057859609803317227371874304889855593719859457951724493474685646660438366041600984916444639432610054486485351581063720153926422354592886654871578796485007589907312297583530380506999790668487548828125 ± <2^(-87)]; dctAccuracy = bits 90; getAccuracy rEd = bits 50
chebDivideDCT: acGuide = bits 46, minQ = [16.9999999999707050170024216773082190911183152893698971430372234201774418659524300279084485509883961640298366546630859375 ± <2^(-41)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 88
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.0588235294118660726059032862055960974637000390499622379064548314003856682825679864698731867590035322127033717178001579319989373152489067150361128483765586783854845010554625013713804775999241473071473711805680978601908998829255024087701661305022795668501969500751470733520424171634799854120701574806961975383501339820213615894317626953125 ± <2^(-88)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000000000000000049264740543697421093047421892680208876125110216947658028510133185949189643332307381731995961523604004799345942685134099379456941780918931267266384563049560119720550720238911842677894619488339236594576231453856962616555392742156982421875 ± <2^(-84)]; dctAccuracy = bits 87; getAccuracy rEd = bits 50
chebDivideDCT: acGuide = bits 46, minQ = [13.25000000002546551867760229320585874177635400590690433563075775521916826213235374165577695748652331531047821044921875 ± <2^(-50)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 85
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.0754716981130624961561684211712237119531745138267922273816712837498682196532161202158958833549775922746376309466788005582561782899603965309313774565360638014636206366570052252018944460653646079155916975449880502714988821422859407176334633452734098406364651514134730313802772232051613879103050563415379587219218700899589707191834768788599198763858050149977694371421125016307048476910854614750895419396118020018939862971350713202948872451619492580096079445200705793029293334928217680535045275291849975474178791046142578125 ± <2^(-85)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000000000000000385185423931371130868869380825961647295881441305176779814288008520751313322155765637874330207939242706612351101898067870453432337084301177705704318599077880188132293988946861467065262973481675943220048363713203798397444188594818115234375 ± <2^(-81)]; dctAccuracy = bits 83; getAccuracy rEd = bits 57
chebDivideDCT: acGuide = bits 46, minQ = [10.0000000000108000553758393763596066135160363295313890764797404031681749662376600118474101464016712270677089691162109375 ± <2^(-42)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 82
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.09999999999989199944705507142794094301889521749713607635797850949040781011083275376399156931571807792887284410451220415577424456124806351954686510921047435642363830943513324907840202350775936518031017615198294965751189188704985103335568690817214295308690274034163886534461013262836756525339838852506346711379592306911945343017578125 ± <2^(-82)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.00000000000000000000000254192836937440696904750072799942144145762380175622826435692334824176806541627950131702797663495502438649025969194440065661096309295507336965765690105404248010261761490306192443658105253099000505993820819838902025367133319377899169921875 ± <2^(-78)]; dctAccuracy = bits 80; getAccuracy rEd = bits 49
chebDivideDCT: acGuide = bits 46, minQ = [7.24999999999991187611518301398019554889277933379371123478721266292206849648627938202845311099764558093738742172718048095703125 ± <2^(-42)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 82
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.137931034482760297245233257464008294904673291813989436662771220369927671599659381762681703102707724302518213630312030848386857689404026935531526817594253557998840982897421824004041697061985661209141525582991156550103650842081587045596202387725244098368815070883527967754413063351871565793971274871410059859044849872589111328125 ± <2^(-82)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000000000000001113442773165488278127748978280046597313624941541316688194556951673613515771071885380186474763683032601295927973935134099379456941780918931267266384563049560119720550720238911842677894619488339236594576231453856962616555392742156982421875 ± <2^(-79)]; dctAccuracy = bits 81; getAccuracy rEd = bits 48
chebDivideDCT: acGuide = bits 46, minQ = [4.9999999999926989791552457698122028744965504155856418927759354611870721996221521299386125747332698665559291839599609375 ± <2^(-44)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 73
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.20000000000029204083587511638563635150867671076225227226876026564617289151985803823136141830299245135743772770918995157007714410913519544790147172072104038119816605516840521057212459991792571930697595710804256127885807207399128833823270245463419889494077693955190391732899805748933908487730004566174102365039288997650146484375 ± <2^(-73)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000000000000577784876672435043151522804695074071143967433253749901221023836411041071129937618541035125680132515716109070346255925867542147950790606764492876875868072056640136823486537415899248774736707986673413250944264518693671561777591705322265625 ± <2^(-70)]; dctAccuracy = bits 71; getAccuracy rEd = bits 48
chebDivideDCT: acGuide = bits 46, minQ = [3.2499999999890725466540576313323959035706472123539264609102471057760949026279283236018358138608164153993129730224609375 ± <2^(-44)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 72
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.307692307693342244107662102205213703066231448708467692403498313956419190320333286093300400532689941282526020017802568458815699325833989134856235509051752876980675330733969340157717503741133044210403046492148665855447724464743610003700484962428394537709184145049977095122918841797743372268314487882889807224273681640625 ± <2^(-72)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000000000000720770769187391612632812530351176179345760592550440943950019334367875341910683628673169086404009468841109070346255925867542147950790606764492876875868072056640136823486537415899248774736707986673413250944264518693671561777591705322265625 ± <2^(-70)]; dctAccuracy = bits 70; getAccuracy rEd = bits 48
chebDivideDCT: acGuide = bits 46, minQ = [2.00000000000727562457438109266820000953241447060929763937324990988125977017624002041173980614985339343547821044921875 ± <2^(-50)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 63
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.499999999998181093914465486144436903706039348771417084655628988057389539396668662344248849480579377289458096517886196889900293172691896158419925307568703872998037212221531601114812877449000586057636452379902507400717966429954093426526385886296358164017462622901809782671532620665720697279927248498045474678752516975613415584349356222637475406122275524248300006166673306788943439195413029518810595965427839131559503758904141603563915516615185794323031201394074690962548912625813650467687665468474733643233776092529296875 ± <2^(-63)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.00000000000000000033797710090290770187081982078967198350678831234104103649775950448001559881441172520418139646944734485258353724646852776655141975786982035789320431137451667033680766759666282063738757426852382830703647615515954584832152033167742695666342123477963394914803386961077920777723374885259849259940062256632740129969893874391475209385141699068342463099228162400580776389706942903072290362601581867165548698695683837213585820417429178267454531464637733992371026971269880740734756946180154113517316833009263837159352621578451615776648997435671617495245300233364105224609375 ± <2^(-61)]; dctAccuracy = bits 61; getAccuracy rEd = bits 52
chebDivideDCT: acGuide = bits 46, minQ = [1.2500000000018133550352484109625550247977280499818820443613802665295941989672019734047836436729994602501392364501953125 ± <2^(-45)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 55
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.799999999998839467990771795818018747425799199568511973983188732454904888111641633392603990691537617829864006935038064137414288143918528572509192215252760633322992176130444375684853055644248981869267987629105485994887174975267899291803617946786280828341263636089837445186656594842133927159011363983154296875 ± <2^(-55)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000000052659451169400520082287138117545849123661531384966098913619703725266921288239658202615336607567851044564996812425035588373505629637212258182871967983674176132697729518268001369020928000358613125779248953614232521608222133643706708511582599228626562418265573139529120066383573138507351087086018069301569996105091227995320661639035673492615449456097750348071762651559827175247487543897664695509046316012363605941378247406031737952844334752967167339873793551366984730041067088030455779104510931512045515942342349720718501504546082969682174734771251678466796875 ± <2^(-54)]; dctAccuracy = bits 53; getAccuracy rEd = bits 46
chebDivideDCT: acGuide = bits 46, minQ = [0.9999999999999986122212192185543245456920533391010098849991383822237233803945956334136013765601092018187046051025390625 ± <2^(-48)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 51
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [1.0000000000000017397557039336238666804679567267200907205278008943505652933354942569854857269205679577899223577946610126523764927398817992230186045111441268635767540427731560135429186434663572614671214404472925860676655736425483048328813654303216973165699172729106551649191914066250319592654705047607421875 ± <2^(-51)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000000783415599696801190905661678572708780703626504627279658609531859176279543728789238290836800811134180999346034341077894624530271926117147243292810908354208012129947938747810892898785350888407212621326625169214637273178926354882079342223067928419669543439675386505288645044579491024106368980020479225723397976298859139493743856456977538119149106276127966403071090234513104993951195124060986932834420266611721146340155559224648343906378935516588346878479462799138488643311357373808691474893621717005452205694019467119813826538887724382220767438411712646484375 ± <2^(-50)]; dctAccuracy = bits 49; getAccuracy rEd = bits 47
chebDivideDCT: acGuide = bits 46, minQ = [1.000000000000001118896833288677099990312443489460720783564320210620230895259475029958340375202396899112500250339508056640625 ± <2^(-47)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 51
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.99999999999999896419814237071039550160403977577523417814092294827115595741728989036124198764810689511093882331255530328746830765172548288755582979068304331662361695994492742503679420644451674328429137576169721494703649682929735050132220001735847920337300935927991418468515720050684143889834940939732119319371967564982206291165478981418986651398674582237529967884050969655345032722860827142609613197226934415297680313839860356273873799497537723066095970415499434936685521730314295252295408999998471699655055999755859375 ± <2^(-51)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.0000000000000007834155996967733533103632626462338085586889063584619063965928356991164018869186603807762027346200906819171611244240541338895332931721552675777658377486649117461496268094145741055280492509676334071916019050291433393440626111386112771353168518678652417272610692373773062957280196812773421641778145011659241611854530614640012932178520772960563286765804060331358599107783121855750400133982265587249379852735064624840472338797952582619978823590176806654776265300123840643938038626414993899406186117566657747229960824519867657045324449427425861358642578125 ± <2^(-50)]; dctAccuracy = bits 49; getAccuracy rEd = bits 47
chebDivideDCT: acGuide = bits 46, minQ = [1.2500000000018216816943805724804406054317951202392578125 ± <2^(-45)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 55
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.799999999998834138920253610564927472348379505655610420531949293399605264133888209224076829808597946732659022392740754024074373975103141932873184205988083937042140732962902945905436582125320565804599679908615809216225637094411725792914157340940111259020024514521558753632394587488117743622606984025832867547765106252313461373050925489191628165926279916875170441347428120105561602254255355346612850630570106798863383384025102986383954347712923811325426320643480485098725634506380312294115952909123734571039676666259765625 ± <2^(-55)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000000052659451169406555161784677770986420831741565543449186459248985912837365900480044861149273018003005501858559471409402708893889560575352611154117990130875243733506241235753767577139551795932874413453683868347914636081417933991218424775864899842190180912744185975639954366995122761401134874181388157866403086156874997502536701509683199347719415247367191003119369043095325511415956933339376805830151171115159859082321525899526516195150605773634954407278234111466591173862079333151919117839381564306526360158835109543328488468372228226144216023385524749755859375 ± <2^(-54)]; dctAccuracy = bits 53; getAccuracy rEd = bits 46
chebDivideDCT: acGuide = bits 46, minQ = [2.00000000000727562454727603835635818541049957275390625 ± <2^(-50)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 63
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.49999999999818109391446548614443690370603934877141708465562898805738953939666907334999060657335370809460761885338990528539898817699148087559147410449149588417613266219546428452901352522672529963836846774984881965620656793411835770643465900054297080387590425342731804110390191053792108277775696478784084320068359375 ± <2^(-63)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.0000000000000000003379771009029077445988638356383420674593719171188694691977309799892123521370826487801952626577258267587293968841211107260398531752378731790365540333704535958144944482445932874132179632281798521841796218766153141243044047176401725432594248772722912450972381328632060599755394193589109230999684887271659221232422275431805388392954743942847800296905714768697119967037870275845797097830291637893852928560821944286524047554858224752939223422166673208797408210122780821908161377982527489458370918789669388893759230585123618721514471285871650252374820411205291748046875 ± <2^(-61)]; dctAccuracy = bits 61; getAccuracy rEd = bits 52
chebDivideDCT: acGuide = bits 46, minQ = [3.2499999999890947510738925529949483461678028106689453125 ± <2^(-44)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 72
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.3076923076933401419102190108636850182868708392041879979591702604953164188722941708720822198115193617188913218426079259838181480499381659181532187377939664387868848733199906077401156059241377533440228039988316364430258985336930344792303716356808700390347455957847663942227620001888089396306100245720897126563938979853560851912008341009494832279139588112586597574402536757846275674522393577879388013011008932964752974214474111733842654319622352823488000944973575330927901530083334001586248263038214645348489284515380859375 ± <2^(-72)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000000000000720770769175763622514478462322349437519558138305458704262699724872457471426720848638355437696759187602497704139537916600984916444639432610054486485351581063720153926422354592886654871578796485007589907312297583530380506999790668487548828125 ± <2^(-70)]; dctAccuracy = bits 70; getAccuracy rEd = bits 47
chebDivideDCT: acGuide = bits 46, minQ = [4.9999999999927211835615281643185880966484546661376953125 ± <2^(-43)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 73
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.200000000000291152657455413670504625664948864490523484890035107916321578360370344695840057922832905379493124844777532025009165712601750671078616718307685601687408964316839977779842655253045436311753451580254260716911374963740714340187028381814569827711654474526403354465610856449851329735956339570390519002650080594407847152865527196690381033563635215377526312362194071062797378824119891658566323257519527720340305185924995926087360077761542206202234647796633293645873489366763219032829823618158116005361080169677734375 ± <2^(-73)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.00000000000000000000057778487667251055690861962844458598277911859031609297229693063584811619612863559105720752232691125011388633793281990733442768493848825845561609609483509007080017102935817176987406096842088498334176656368033064836708945222198963165283203125 ± <2^(-70)]; dctAccuracy = bits 71; getAccuracy rEd = bits 48
chebDivideDCT: acGuide = bits 46, minQ = [7.2499999999999340805079128813304123468697071075439453125 ± <2^(-43)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 82
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.13793103448275987480603244883423240793292864724037429070315988154327893481010664611612761185723637315425617432445032023890424517436153858139992255021517865986719394801306887003990065608969135433949383295700805153691477427999984154914716283402840635345490697504838326114633014983548206912632580329710364965617093129559561394298446026979465019681551114001733924881688727632488716307434885027405629081857801222096753985806237622468532097302157448116532181016720029675066984825389693365693677407080031116493046283721923828125 ± <2^(-82)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000000000000001113442773193983363217635123367747491666395822626964096559552094373738466129308851478062286837704467329773471255925867542147950790606764492876875868072056640136823486537415899248774736707986673413250944264518693671561777591705322265625 ± <2^(-79)]; dctAccuracy = bits 81; getAccuracy rEd = bits 48
chebDivideDCT: acGuide = bits 46, minQ = [10.0000000000108444642155092196844634599983692169189453125 ± <2^(-43)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 82
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.0999999999998915553578452223265345299275892266905557117526097125581330679542702049560557659495851549042533774243695919760392091559545466283718417665873426477163092778647980832594029837102770219468400825916912084810192787761321495882267391188134428858488346431810404197503436321754117845370896864313515417092931118666997438282803917153432219044937128296345837129181743943915097706789770439722898522388712518858499818447349306578553541980274522375947973442631402837235696753586246081357824522228838759474456310272216796875 ± <2^(-82)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000000000000002541928369370391186471504088300323245262338304959380248688361238939816581486352849779440738125450896773132846255925867542147950790606764492876875868072056640136823486537415899248774736707986673413250944264518693671561777591705322265625 ± <2^(-78)]; dctAccuracy = bits 80; getAccuracy rEd = bits 49
chebDivideDCT: acGuide = bits 46, minQ = [13.25000000002546551858273460311465896666049957275390625 ± <2^(-50)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 85
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.07547169811306249615616842117122371195317451382679222738167128374986821965321617169879916512460882348788517712763498306768504209561360653177078557442227747848682249778667808457240017463441022169461478293496397526164194388444951326279043390596082000674306871849933642208380342575554600215552718441014423689239265513606369495391845703125 ± <2^(-85)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000000000000000385185423931371130868869380825961647295881441305176779814288008520751313322155765637874330207939242706612351101898067870453432337084301177705704318599077880188132293988946861467065262973481675943220048363713203798397444188594818115234375 ± <2^(-81)]; dctAccuracy = bits 83; getAccuracy rEd = bits 57
chebDivideDCT: acGuide = bits 46, minQ = [16.9999999999707716302754789694517967291176319122314453125 ± <2^(-41)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 88
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.05882352941186584210977360544880601817478842976468395212550676615908698483201090617894293316324744636696658988414161370887128346420839153132488389210021809307476388085513955413223723140777852699539798932369480956707210965064716001274403808981607802710395057457842431396548884091912077217090939874968582334774734774258575179782416113177898640420617517287330536632886857127100746147945752514974561751974163579698302855559584489760676629923727115933755391817944845656875704103005826563384250693644617058453150093555450439453125 ± <2^(-88)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000000000000000049264740543741083131752036839326293733735704078623276408206637201479280838167814422821983094073819670471713443425867542147950790606764492876875868072056640136823486537415899248774736707986673413250944264518693671561777591705322265625 ± <2^(-84)]; dctAccuracy = bits 87; getAccuracy rEd = bits 50
chebDivideDCT: acGuide = bits 46, minQ = [21.2499999999835152142413363662853953428566455841064453125 ± <2^(-41)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 91
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.0470588235294482708058323632441471355116312241424063941185023940255491963785755142473818125509583218364271462669004893252430629765768903065221041713366321601825813243118962764439196242290344854382310756723552538822660618673863643605949040909439494171251446335582456339917169020315527370617784468492746125987677938394319939544437892817189470692969778731856416246631914369736941538264161550068350498571756253492539502073053188956663811349741276324161623673687094743032944244067188217794939220084415865130722522735595703125 ± <2^(-91)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.00000000000000000000000000588439260539507022036581351964590485313872067963140864008925056111185128776555176328803162873721067283695625740733442768493848825845561609609483509007080017102935817176987406096842088498334176656368033064836708945222198963165283203125 ± <2^(-87)]; dctAccuracy = bits 90; getAccuracy rEd = bits 50
chebDivideDCT: acGuide = bits 46, minQ = [25.99999999999993249844007714788335308406698744729592639114272710804077399262834560708183718844313589437706399161887201032516969689822872169315814971923828125 ± <2^(-43)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 95
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.038461538461538561392840123804481515970046792552501660924174528347244149304642365447922644842508862194433058999124737265970249686917594596354774412846541039635475596946882566258514546880135047795705280619791560914536290675218817664065840233187037010434251987208389339354337575278585883040752270299497153617337919247307249925871275308963959105312824249267578125 ± <2^(-95)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000000000000000000549201514977258786703733500596087819380664999509174381064144830108952969585442263750736818932102920362645537304991261816828688636600623407228028790818635113528000325899837797150588507398757680385842341313639043687278018524011713452637195587158203125 ± <2^(-90)]; dctAccuracy = bits 94; getAccuracy rEd = bits 52
chebDivideDCT: acGuide = bits 46, minQ = [31.25000000001994138187908446424962787602958395912129261561274905309421321048873365674529313338073152630431580741477044782516969689822872169315814971923828125 ± <2^(-43)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 100
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.03199999999997958002495586484339803237016250288335835588963505259320697517878260529579286809140318212398021307933259375085220025490883235147304252263077642921236813244621100406951891664420931172128786402992399711270246186961331331807552888156047622011823271730368232785647152214873934507654770648276946823080862940499630338309078325664813746698200702667236328125 ± <2^(-100)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.0000000000000000000000000000225707902045882331906950912444572719890468932889551973036422914476156065376496575784827271015548147193444972420642985159629509092804987257824230326549080908224002607198702377204708059190061443086738730509112349498224148192093707621097564697265625 ± <2^(-95)]; dctAccuracy = bits 99; getAccuracy rEd = bits 53
chebDivideDCT: acGuide = bits 46, minQ = [37.00000000004365541261819316787295974791049957275390625 ± <2^(-50)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 99
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.02702702702699513848603495861125043335809781337694170417431420847429955473764512236972597532744703619994727454413962358971568956555873174854127656477141418393458424803462957750552546768336196737355321112203136723962688895173441194266538386991831371478691852081520420086597083448784964250816405235011374266936023946783507199143059551715850830078125 ± <2^(-99)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000000000000000000040700536005603578472961799128173359544711067970221293692913362295357352101430484795054938637145918949464770504958318129456941780918931267266384563049560119720550720238911842677894619488339236594576231453856962616555392742156982421875 ± <2^(-94)]; dctAccuracy = bits 98; getAccuracy rEd = bits 60
chebDivideDCT: acGuide = bits 46, minQ = [43.249999999952638773947896873630653070213640313647538106899045777938724313025689379862311068070113151406985707581043243408203125 ± <2^(-43)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 100
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.0231213872832623134624222327040552232134618300289300162964400334243061211904589857546133345855749859965170689722979580989470318335544533265389638995441586542831627967789866566158300202149440905696633844536354348000400624580926388282810533204263326324706359375158303830649699318765058562714890641207010355383396976499063850581106027703981453669257462024688720703125 ± <2^(-100)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.0000000000000000000000000000205316888492965349857611693645135496155610625725131399899161542278589112865929291783836992072532579110212480856005340726458197729405610665052259117367716021752002933098540174355296566588819123472581071822751393185502166716105421073734760284423828125 ± <2^(-95)]; dctAccuracy = bits 99; getAccuracy rEd = bits 54
chebDivideDCT: acGuide = bits 46, minQ = [49.999999999974466646790436811582957091858438882933831211963410669998389116823577429525767013007708783334237523376941680908203125 ± <2^(-43)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 96
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.020000000000010213341283840737435132912369771335242107130021966290654253928081089772760314822552849230179351778527974686045897122313453583358241962759105938122249704240185280205089800909579216459317329745270805671480780831145296919214993290329212515195201661500425387437460703000094172438719585990441849356804920615570289967911910000708530787960626184940338134765625 ± <2^(-96)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.0000000000000000000000000005973975706089496132871637090158854069440793226971693174714506682710641769905078680617872734025969519212199454689930094534629509092804987257824230326549080908224002607198702377204708059190061443086738730509112349498224148192093707621097564697265625 ± <2^(-90)]; dctAccuracy = bits 95; getAccuracy rEd = bits 54
chebDivideDCT: acGuide = bits 46, minQ = [57.2499999999999324984400750799318216939746364235334514537407546220213076771305253582917311436289455331288977230443960897421362687964574433863162994384765625 ± <2^(-43)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 97
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.017467248908296963826489944932031918204817062421016228345093892800855942040381210930894567064879948432172585234728532649031604262759359554506217222330474343658615175914023357028726764688948498467902868246016508921038982796852560522452556992489690075554818175839806310531277330525379757806872389168317914348272180496289532791905074748939341588993556797504425048828125 ± <2^(-97)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.0000000000000000000000000002514791215619918208657043781172398570254766382936118803037201638151292145804725853745832565643742098405314689064930094534629509092804987257824230326549080908224002607198702377204708059190061443086738730509112349498224148192093707621097564697265625 ± <2^(-91)]; dctAccuracy = bits 96; getAccuracy rEd = bits 55
chebDivideDCT: acGuide = bits 46, minQ = [65.000000000029036328896811678677246876562232935315027101200626033608380345513103528852678902882900047188741154968738555908203125 ± <2^(-43)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 99
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.01538461538460851211150373546736562818172474891168569285594753366567327096417263347132179031515837585271806755444246211323250037494443896840098855942972180701358642575347623875872141538583378415610164293115887649398460121880819405915242143799098280003921934965518708867906132634448660748510630833801331384510657614921407451680744615796214702641009353101253509521484375 ± <2^(-99)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.0000000000000000000000000001077417845029263096032434599731364907145030373576293499349930178971124536965149688287691943721530376865817313576648844534629509092804987257824230326549080908224002607198702377204708059190061443086738730509112349498224148192093707621097564697265625 ± <2^(-92)]; dctAccuracy = bits 97; getAccuracy rEd = bits 55
chebDivideDCT: acGuide = bits 46, minQ = [73.25000000006184530665365173263126052916049957275390625 ± <2^(-50)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 94
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.0136518771330942757061065638978522062469316357717245119954781647585197531187652801771217981945704431429766519059994664797237234612166128330962965715923078682049864094824698143244469520834006001661903079800718300339526351563959644828961166716024011769069351503917459672485367885338089112260076915767058520524701581422277740784920752048492431640625 ± <2^(-94)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000000000000000003459566681378447175026759348547615203921121163065925516595701421734486431477947128475342247148963365349337955144617542147950790606764492876875868072056640136823486537415899248774736707986673413250944264518693671561777591705322265625 ± <2^(-87)]; dctAccuracy = bits 93; getAccuracy rEd = bits 62
chebDivideDCT: acGuide = bits 46, minQ = [81.999999999934448879912436240920820898871289289863167880991998025186074722788964191520950930414102231225115247070789337158203125 ± <2^(-43)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 95
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.01219512195122926102321351867703013489445110846595506855448232235001325027330161330289499455639806651048792601816048318190737902941554587233497660889175336451481741483699145983215114102017159164594038043318749850492633285132762828504985222983442412794662905965076531087806882297430790073552548821693715446000557026506234980546550250579684870899654924869537353515625 ± <2^(-95)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.0000000000000000000000000016313782813200239377638768767499070347919860268574419135961492952011813074646130981358121709785235536341924522853688832717800820456204363850596201535730445794696002281298864580054119551791303762700896389195473305810946129668081994168460369110107421875 ± <2^(-88)]; dctAccuracy = bits 94; getAccuracy rEd = bits 56
chebDivideDCT: acGuide = bits 46, minQ = [91.249999999965371699772705461252275311141087859149460986056362917245739526586852241184406875351697863152367062866687774658203125 ± <2^(-43)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 96
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.01095890410959319987092241015654680777918589588728970736373393372011776814963763591233775153396996352216211082104313458399522359349587605796250554677877886309934264836525759788190338844093171333346450575104036159537585098987630462499947662735868225591367147836042022596383463439752707697140369742567776504653903123066992935687180565906828633160330355167388916015625 ± <2^(-96)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000000000000000000792309296077373277391744613081656471875648512435214973877062386074284291851357711750610141192203314850026518750303761816828688636600623407228028790818635113528000325899837797150588507398757680385842341313639043687278018524011713452637195587158203125 ± <2^(-90)]; dctAccuracy = bits 95; getAccuracy rEd = bits 56
computing integrate  (sin(10x)+cos(7pi*x))/(100x^2+1) over [-1,1]
result = [0.03491989808941792652056002086018063712471149082557843003448474795087124883258695792754456330717283133584314401062555066687176190068887821707184366581548173003468917534699021882517176213585709679305215871555012034327280714355785757571361364066917591877497493586499225698729961808922609932331939256484636684173611401209531882046930655131719317455285460186244600134726094908502706957101293284649319152169632381043143913912958281174569964514409876020700761759551939560082822978769196717033473578939524363800311974512756429955828707534237764775753021240234375 ± <2^(-44)]
accuracy: bits 44
precision = Precision 552
	Command being timed: "aern2-fnreps-ops integrate rungeSC lpoly 40"
	User time (seconds): 75.01
	System time (seconds): 0.15
	Percent of CPU this job got: 99%
	Elapsed (wall clock) time (h:mm:ss or m:ss): 1:15.18
	Average shared text size (kbytes): 0
	Average unshared data size (kbytes): 0
	Average stack size (kbytes): 0
	Average total size (kbytes): 0
	Maximum resident set size (kbytes): 16720
	Average resident set size (kbytes): 0
	Major (requiring I/O) page faults: 0
	Minor (reclaiming a frame) page faults: 2121
	Voluntary context switches: 1
	Involuntary context switches: 133
	Swaps: 0
	File system inputs: 0
	File system outputs: 112
	Socket messages sent: 0
	Socket messages received: 0
	Signals delivered: 0
	Page size (bytes): 4096
	Exit status: 0

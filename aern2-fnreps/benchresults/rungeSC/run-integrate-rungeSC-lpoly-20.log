numer: acG = NoInformation; ac = Exact
inv: acG = NoInformation; ac = Exact
res: acG = NoInformation; ac = Exact
chebDivideDCT: acGuide = bits 25, minQ = [81.9999304823577404027095723303849152551339707012205935965365455331266275607049465179443359375 ± <2^(-18)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 75
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.012195132289961510268444553194884976471520421773394206071763221519562449542515150487071494510667483594874211926015306987706192388312329881901907465471135990121407462649087228090393718410384107927305300377376553759769820200523679719497954702589888616532666266548195880200908258967355240879638922368854991873377002775669097900390625 ± <2^(-75)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000000000001512644436712211189597272377245423798477128981880397212084536992276286423190748164931747386880083687591109070346255925867542147950790606764492876875868072056640136823486537415899248774736707986673413250944264518693671561777591705322265625 ± <2^(-69)]; dctAccuracy = bits 74; getAccuracy rEd = bits 31
chebDivideDCT: acGuide = bits 25, minQ = [65.0000301599229715070367406824868765480360460040722988224185983040237513108650091453455388545989990234375 ± <2^(-21)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 73
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.0153846082461753899775356999463189598425448538299385727377108044569572522073981448162219733839315599361226207873969626703121316652037235687287306424909047041897793373747302669504560915865893395116348858879191503528411810097157044717833327208714803078998358592785402608278863103673437498671028311747477346216328442096710205078125 ± <2^(-73)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000000000006284234498176473174063412380045610047451586699313964888647180172319276556115916582155763808668438875102497704139537916600984916444639432610054486485351581063720153926422354592886654871578796485007589907312297583530380506999790668487548828125 ± <2^(-67)]; dctAccuracy = bits 72; getAccuracy rEd = bits 33
chebDivideDCT: acGuide = bits 25, minQ = [49.9999732933938503269175580424423187340457381907144092381134470315373619087040424346923828125 ± <2^(-27)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 75
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.020000010682648165814914364004401513565233143032434003170394645376068720687340574087905989368868816292499115804073815084937483841496660529279102698436452051481787597214034237790495880743860867288254332269597489684651327160098273018559034657192890870504890301005906587612679940398653034220981250523863081980380229651927947998046875 ± <2^(-75)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000000000000908719298553265159414227219240683739449098034569034694081209703529625818098544959310233298719708406352497704139537916600984916444639432610054486485351581063720153926422354592886654871578796485007589907312297583530380506999790668487548828125 ± <2^(-69)]; dctAccuracy = bits 74; getAccuracy rEd = bits 38
chebDivideDCT: acGuide = bits 25, minQ = [37.0000454187229479433495963278757509116056004776138514160695549594370934443077203468419611454010009765625 ± <2^(-21)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 73
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.0270269938504987618495430475124872665047943896391261441421488517641372993240468562985696851900458926740435827615549736469447255980196159393670530583178170953417720112603714062676587587485120844538616688216845512874138521378771625035964915443167395114292252406646361373464461646514087338373510949196543151629157364368438720703125 ± <2^(-73)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000000000004972211061339303656877084897573983166416595341079615348255595470283774335235657210202104286624931625079720436552973935134099379456941780918931267266384563049560119720550720238911842677894619488339236594576231453856962616555392742156982421875 ± <2^(-67)]; dctAccuracy = bits 71; getAccuracy rEd = bits 31
chebDivideDCT: acGuide = bits 25, minQ = [25.999999161809682846340387524694561386709447446814259151567174932559960649719620518101337314220700136502273380756378173828125 ± <2^(-19)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 76
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.038461539701465006176895661589554120807322642147763344359005925494494045049623144860301455877391487150137219448420175061681716168353811045085885627522567826319499649392971200009410117673233147581567389602594750800363378919081571030133824823925199446096394210738639481641923893224474742687755968173490828121430240571498870849609375 ± <2^(-76)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000000000000267138662795045507453272595819515299470191488259406205827124156536957596301243311761382291741533882903609070346255925867542147950790606764492876875868072056640136823486537415899248774736707986673413250944264518693671561777591705322265625 ± <2^(-71)]; dctAccuracy = bits 75; getAccuracy rEd = bits 29
chebDivideDCT: acGuide = bits 25, minQ = [16.99996909499168396017777856073906366193303835710718026341670139345296774990856647491455078125 ± <2^(-20)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 72
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.0588236363497041510190442644816582145487094780893470620994057812950008383735123396162484824777181349048199701127031633462740949636427708994916217398975223110976307850192898015171651061308074979144160908472054648625630059395643346913257135702140576006883258832044278977712550526249675464374178091020439751446247100830078125 ± <2^(-72)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000000000002641412709027824634248856080865118024734201132389001282649231924090311673189211366689198187279328937625274971726101898067870453432337084301177705704318599077880188132293988946861467065262973481675943220048363713203798397444188594818115234375 ± <2^(-68)]; dctAccuracy = bits 71; getAccuracy rEd = bits 28
chebDivideDCT: acGuide = bits 25, minQ = [10.00001114350743591801693858827128425322808400290121809937671226720112827024422585964202880859375 ± <2^(-21)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 66
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.099999888565049818451035834474796513485407341475755455695123821984213290471868318561051996011223715640610501143326705802327337269198096980513663891255789247413939153292556554294087888074757531438178415682891666950801638031183950868469842958931648803118376801643316889896189272358972832677181941107846796512603759765625 ± <2^(-66)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000000000160189011829019227021792524499925648022448743906997407470545962895640914166221471814940187404580279000091109070346255925867542147950790606764492876875868072056640136823486537415899248774736707986673413250944264518693671561777591705322265625 ± <2^(-62)]; dctAccuracy = bits 64; getAccuracy rEd = bits 27
chebDivideDCT: acGuide = bits 25, minQ = [4.9999923668801784516465064653451769342592814012360587228034347617722232826054096221923828125 ± <2^(-27)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 59
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.20000030532525897708771410078828071473097198539413559072907621496433391384281494221020593206893497589120057134781790991950711833947915751927063872119818028371051974732159792499447236947304808716468644644811318894577509114878625620153484012690324019095561203085970931829355203002140939361197524704039096832275390625 ± <2^(-59)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000000015122623325004338422964637132741449670137220257209315077417957822127766671593071299800640337637352571125125274971726101898067870453432337084301177705704318599077880188132293988946861467065262973481675943220048363713203798397444188594818115234375 ± <2^(-55)]; dctAccuracy = bits 57; getAccuracy rEd = bits 31
chebDivideDCT: acGuide = bits 25, minQ = [2.00000757374800741677936869847572772716819685855920850532652099929009636980481445789337158203125 ± <2^(-22)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 47
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.4999981065701720209056311290452638114521811038251609734497798237476900912501048259277164107685682832870661839039446064879508654183980160921511015877813386573747141172783461746750588658714267379773989206309592218161681137597040935426611926562269083974837987556266889754841287185627152211964130401611328125 ± <2^(-47)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000016528814330862979592181797804061085472909688881548717631631006955343856509539301277476558452837637352571125125274971726101898067870453432337084301177705704318599077880188132293988946861467065262973481675943220048363713203798397444188594818115234375 ± <2^(-45)]; dctAccuracy = bits 45; getAccuracy rEd = bits 24
chebDivideDCT: acGuide = bits 25, minQ = [0.9999999767169356346130371106371774483536188886587657044524579674771302961744368076324462890625 ± <2^(-24)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 36
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [1.0000000232744980952198787830314589473312954278939770801299031084580107367863831458690760016050161542366468404020270697886778128508403098285773647365904517110449649183009121444330201180130560939736094541276711788128741043407244422267602244051669301504702003224878126275143586099147796630859375 ± <2^(-36)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000026322867801459657496527140906536473171239218027392862479647698508261084106890698895840050906391659652245236913384428130755004619397205266487950734307408780328078973973519449861767803675368170764843226779528924195902297619395641620105646595707635638690499623135848937197147429754517084721735575029897338375001412432733041553829211726547873774452528768257710919207225132001837522153552995257415129843337365827966263457837319043048121208420144237686010708354344844084196574642383347690631526931506981178097992479791855657822452485561370849609375 ± <2^(-35)]; dctAccuracy = bits 34; getAccuracy rEd = bits 24
chebDivideDCT: acGuide = bits 25, minQ = [0.999999999999999997967116271622451240437525163823499756933456082620589519083958803175905816207347243107506074011325836181640625 ± <2^(-25)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 36
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.999999999996258948951179798545638189610635039257250842624435700685434024160647285536236135188166845648932200272781881343553354784818033960684976197518865667179213824709774129304561314141312700848107349701002115858975252965152544512317474655681824556625121766329715507591660342734965450507671317481248376116500608897038587419049629599137875118706983909281260139920056624665030746581197604825428244997381661387509505520094862155647439170397970930486227124743257589931260041513452242745163545123432413674890995025634765625 ± <2^(-36)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000026322865015897100761837567819431249423368706673141832731847003846646954759130479189122788179260152891279973872627558576222750451960728741888422828415384425365533990513051502593904711775081598976479871239472513568229378523201178332185231713430623050628680373662996520777124205713410633137395141552115722336073648647074051306083894152742983116157415820033082582826619648420752471343652370810479443638864040004767401848335356962136049645175705857909946363431996905632013238170553145322796326751971861365904381546698687088792212307453155517578125 ± <2^(-35)]; dctAccuracy = bits 34; getAccuracy rEd = bits 25
chebDivideDCT: acGuide = bits 25, minQ = [2.00000764359720051288604736328125 ± <2^(-22)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 47
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.49999808910800661101698824222053125610718364501321483268802894076071210394188452756135259738281408133112689557844211210588042570625459088358452352954582040922057673099298755109766687990268759483713218902392488057158083242055032352457650860674143239494683712404069958730827451679308973979432918836589974834771902695817684419807199362941209256542939347532222056554105712723678529588946300368655827454572852687741100451319612212271410134309611780368054548650030620986015665036577486184110608036235134932212531566619873046875 ± <2^(-47)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000016528812602464974964148838362675595816525791342810336459479003681436214199943554738389911461412612379376375102497704139537916600984916444639432610054486485351581063720153926422354592886654871578796485007589907312297583530380506999790668487548828125 ± <2^(-45)]; dctAccuracy = bits 45; getAccuracy rEd = bits 24
chebDivideDCT: acGuide = bits 25, minQ = [4.9999923668801784515380859375 ± <2^(-27)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 59
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.200000305325258977087714100788280714730971985394135590729076214964333913842815221915213434541543103112068962592773516561156073870000796058895297681008398487060728596048524054167975269524486682627349768001734766885143528920864174818503784697084507988238077550988821916619479706488667954003934269651588374928549190482393612993451171358953551860003914148714874327483907339631350500101328400752749290393561409006178756602704634590016900436342896435987886022430534271069028966464852761948656212354080707882530987262725830078125 ± <2^(-59)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000000015122623325004338422964637132741449670137220257209315077417957822127766671593071299800640337637352571125125274971726101898067870453432337084301177705704318599077880188132293988946861467065262973481675943220048363713203798397444188594818115234375 ± <2^(-55)]; dctAccuracy = bits 57; getAccuracy rEd = bits 31
chebDivideDCT: acGuide = bits 25, minQ = [10.00001132977195084095001220703125 ± <2^(-21)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 66
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.099999886702408855187506895322070868575846449400912388716624181026214127633071814633419737655874483788096664562380341260636010860005099347025450392264048494015374611829373859065501502875486843665846777948070767522833784037546699083588790097720302827603599741071992431829925348248631992444890577879386614807246698738729361377627387631538111217849691883079757812390622794642332320942305871940112027670459302583384242577911433338553740848469494991618482696904012515328635555800806705879779645584903846611268818378448486328125 ± <2^(-66)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.00000000000000000016018870632374353336318894370961346740977699571620518565265570794558293522378206524827804797642847375011388633793281990733442768493848825845561609609483509007080017102935817176987406096842088498334176656368033064836708945222198963165283203125 ± <2^(-62)]; dctAccuracy = bits 64; getAccuracy rEd = bits 28
chebDivideDCT: acGuide = bits 25, minQ = [16.9999693743884563446044921875 ± <2^(-20)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 72
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.0588236353829298131313584967389040345712615256246947173379288624033676103693477548442497886672474872340924373110996467312503822209565471428386825614855522432247433152806209807196646920206805971968673305800337274367757539040397419909299002682690591994844174431700041341746909864806027933360876972652854819539144581276692264275808630737400679455792452797259499905917745200127751823460294750245758135845110930083661581708760699725764449957760557834539258978797494301003523207814951815654291866763969665043987333774566650390625 ± <2^(-72)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000000000002641421801791930059928763673691680627695489262352187096612958110207339876431184938508808318556134187602497704139537916600984916444639432610054486485351581063720153926422354592886654871578796485007589907312297583530380506999790668487548828125 ± <2^(-68)]; dctAccuracy = bits 71; getAccuracy rEd = bits 28
chebDivideDCT: acGuide = bits 25, minQ = [25.999999441206455230712890625 ± <2^(-19)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 76
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.038461539288156149081223697174228150642774641436546203727245954476464401627611120215731203244735292643031145827064276693386570758625158101816706532723455754100000064850834270107962918231738457889298101409264337640676885613540481286721869541766140376804611334456300185300923468661800783529934963577603223349434792152776030538674520532286964647645278069890758582918744270173636513722827397665630220843000772801837932913334683153197335833201106674237655225964555570919336481900386811617897908632812686846591532230377197265625 ± <2^(-76)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000000000000267122364538312361579686407578102872413307871443274074322149195389826069976555961175255945610627765750274971726101898067870453432337084301177705704318599077880188132293988946861467065262973481675943220048363713203798397444188594818115234375 ± <2^(-71)]; dctAccuracy = bits 75; getAccuracy rEd = bits 29
chebDivideDCT: acGuide = bits 25, minQ = [37.000045418722947943024337291717529296875 ± <2^(-21)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 73
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.02702699385049876184954304751248726650479438963912614414214885176413729932404686930094452135104774132345058401566291839432284452566444983307538554157612010988838496527610560646310186192233077268939384885011128395705407020607815537810650617221894560883871216002303853066773350713389239324164936627283493496549933862373534721409271954828115336510079134529414187353455358537768388399451623548137366115356496361274563944398850963810839452526020641410814745517557064284014340627334212793612955305633249736274592578411102294921875 ± <2^(-73)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000000000004972211061339303656877084897573983166416595341079615348255595470283774335235657210202104286624931625079720436552973935134099379456941780918931267266384563049560119720550720238911842677894619488339236594576231453856962616555392742156982421875 ± <2^(-67)]; dctAccuracy = bits 71; getAccuracy rEd = bits 31
chebDivideDCT: acGuide = bits 25, minQ = [49.9999732933938503265380859375 ± <2^(-27)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 75
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.020000010682648165814914364004401513565233143032434003170394645376068720687340592998534278131464913681731321724988279860552224560720431633798714425518423336463314283142660923697049621579022023082991277564304950259453998130891744123218935698992985175390677271998797466259670930024608216658366960440852225358753938171300586194166137461993839734344323429033704710323790455645576136813909999928894964124801737764351589953484428794003995052394821181480070267883388785032385366931981671915867504463193427000078372657299041748046875 ± <2^(-75)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000000000000908719298553265159414227219240683739449098034569034694081209703529625818098544959310233298719708406352497704139537916600984916444639432610054486485351581063720153926422354592886654871578796485007589907312297583530380506999790668487548828125 ± <2^(-69)]; dctAccuracy = bits 74; getAccuracy rEd = bits 38
chebDivideDCT: acGuide = bits 25, minQ = [65.000030159922971506603062152862548828125 ± <2^(-21)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 73
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.015384608246175389977535699946318959842544853829938572737710804456957252207398193000265562847359835580469001411097045935818212118700059858867935940429056629728324558473830464092250619471766478518821635115789010602663312241132415573225886419305087695296193364101894241751289587961401470218539870240086713368452047373812518922040026415240544768759708111356406145990420109483643989432947577652282616088019796359439616700998565637039801307622033076159504208052210068712108408504025893089040000205613978323526680469512939453125 ± <2^(-73)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000000000006284234498176473174063412380045610047451586699313964888646910292051929854721373258660051296181841500091109070346255925867542147950790606764492876875868072056640136823486537415899248774736707986673413250944264518693671561777591705322265625 ± <2^(-67)]; dctAccuracy = bits 72; getAccuracy rEd = bits 33
chebDivideDCT: acGuide = bits 25, minQ = [81.9999308548867702484130859375 ± <2^(-19)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 75
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.0121951322345585269553850598710920756527010021879223471899152449002964444756349564639351809405054440081806099679820273018079520349626480492172069731488635276572857378935264173779790527729847165773661759074378985014247987808699245917479589583865621346600361724143200316022453690000323627588485635492489515368363869751721295891615874518252009436580345831688660107274815605601645494818164989454845886571703559163467837769258270092945608531927301522220083496080180021550792549211836271927551778038179008945007808506488800048828125 ± <2^(-75)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [0.000000000000000000001512639034603738060576759765424817790908809643815355961876431604418202954071611904279476837589287093829720436552973935134099379456941780918931267266384563049560119720550720238911842677894619488339236594576231453856962616555392742156982421875 ± <2^(-69)]; dctAccuracy = bits 74; getAccuracy rEd = bits 31
computing integrate  (sin(10x)+cos(7pi*x))/(100x^2+1) over [-1,1]
result = [0.034919899086411882738251950722834454600708631218271568442782279154368411676923589074949007642066214248559534871381914705035701041485483878594916512935512811747291823662402088076451109377393208364752082844126333599256693768997687343359919896465871931366550224767523239391545845925189190076859975582715675492264797934753312575011900610398397712241843135337435992528672707369001784564565360155940558369109152907250354499361814303347597086557454798378870967505531720244446705795908123502735431742394212051294744014739990234375 ± <2^(-23)]
accuracy: bits 23
precision = Precision 520
	Command being timed: "aern2-fnreps-ops integrate rungeSC lpoly 20"
	User time (seconds): 34.57
	System time (seconds): 0.08
	Percent of CPU this job got: 99%
	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:34.66
	Average shared text size (kbytes): 0
	Average unshared data size (kbytes): 0
	Average stack size (kbytes): 0
	Average total size (kbytes): 0
	Maximum resident set size (kbytes): 15804
	Average resident set size (kbytes): 0
	Major (requiring I/O) page faults: 0
	Minor (reclaiming a frame) page faults: 1867
	Voluntary context switches: 1
	Involuntary context switches: 36
	Swaps: 0
	File system inputs: 0
	File system outputs: 56
	Socket messages sent: 0
	Socket messages received: 0
	Signals delivered: 0
	Page size (bytes): 4096
	Exit status: 0

numer: acG = NoInformation; ac = Exact
inv: acG = NoInformation; ac = Exact
res: acG = NoInformation; ac = Exact
chebDivideDCT: acGuide = bits 25, minQ = [81.9999344386160373687744140625 ± <2^(-17)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 75
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [1.21951317015818531983280416535e-2 ± <2^(-75)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [1.51263250558460005688970674925e-21 ± <2^(-69)]; dctAccuracy = bits 74; getAccuracy rEd = bits 30
chebDivideDCT: acGuide = bits 25, minQ = [64.9998793639242649078369140625 ± <2^(-17)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 73
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [1.53846439375857109540186586637e-2 ± <2^(-73)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [6.28470793110995904679794768164e-21 ± <2^(-67)]; dctAccuracy = bits 72; getAccuracy rEd = bits 29
chebDivideDCT: acGuide = bits 25, minQ = [49.999973423873598221689463 ± <2^(-20)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 75
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [2.00000106304562110382692794996e-2 ± <2^(-75)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [9.08544385549775898712052495418e-22 ± <2^(-69)]; dctAccuracy = bits 74; getAccuracy rEd = bits 32
chebDivideDCT: acGuide = bits 25, minQ = [36.9999326504766941070556640625 ± <2^(-18)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 73
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [2.70270762232621618577360981302e-2 ± <2^(-73)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [4.97235736203815492223826525857e-21 ± <2^(-67)]; dctAccuracy = bits 71; getAccuracy rEd = bits 28
chebDivideDCT: acGuide = bits 25, minQ = [26.000000126703525893390179 ± <2^(-20)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 76
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [3.84615382741072111302645265512e-2 ± <2^(-76)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [2.66926102692777342237730576934e-22 ± <2^(-71)]; dctAccuracy = bits 75; getAccuracy rEd = bits 30
chebDivideDCT: acGuide = bits 25, minQ = [16.9999702014029026031494140625 ± <2^(-19)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 72
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [5.8823632521277959229071618755e-2 ± <2^(-72)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [2.64142982961299374346623106151e-21 ± <2^(-68)]; dctAccuracy = bits 71; getAccuracy rEd = bits 27
chebDivideDCT: acGuide = bits 25, minQ = [9.9999830723099876195192337 ± <2^(-21)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 66
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.100000169277186670989003880135 ± <2^(-66)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [1.60202029355821098461904091195e-19 ± <2^(-62)]; dctAccuracy = bits 64; getAccuracy rEd = bits 27
chebDivideDCT: acGuide = bits 25, minQ = [4.9999925531446933746337890625 ± <2^(-21)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 59
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.200000297874655909199137112423 ± <2^(-59)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [1.51216980321390680590621941605e-17 ± <2^(-55)]; dctAccuracy = bits 57; getAccuracy rEd = bits 25
chebDivideDCT: acGuide = bits 25, minQ = [1.999998215585947036743164 ± <2^(-21)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 47
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.500000446103914953113821450755 ± <2^(-47)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [1.65305121704635450027800537861e-14 ± <2^(-45)]; dctAccuracy = bits 45; getAccuracy rEd = bits 23
chebDivideDCT: acGuide = bits 25, minQ = [1.000000039696267842281863 ± <2^(-23)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 36
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.999999951567488991470879930568 ± <2^(-36)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [2.63210647998218930658700425832e-11 ± <2^(-35)]; dctAccuracy = bits 34; getAccuracy rEd = bits 23
chebDivideDCT: acGuide = bits 25, minQ = [1.00000001862645149230957 ± <2^(-23)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 36
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.999999981369808210422937014601 ± <2^(-36)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [2.63215187820578025616579363476e-11 ± <2^(-35)]; dctAccuracy = bits 34; getAccuracy rEd = bits 23
chebDivideDCT: acGuide = bits 25, minQ = [2.000000663101673126220703125 ± <2^(-20)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 47
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.499999834224640376721550178066 ± <2^(-47)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [1.6530825041564449773870679933e-14 ± <2^(-45)]; dctAccuracy = bits 45; getAccuracy rEd = bits 22
chebDivideDCT: acGuide = bits 25, minQ = [5.0000021085215848870575428009 ± <2^(-20)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 59
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [0.199999915659172169700901269041 ± <2^(-59)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [1.51223050493401872926092696349e-17 ± <2^(-55)]; dctAccuracy = bits 57; getAccuracy rEd = bits 25
chebDivideDCT: acGuide = bits 25, minQ = [10.000011682524927891790867 ± <2^(-21)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 66
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [9.99998831748872023213202025843e-2 ± <2^(-66)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [1.60199116790534357054328208744e-19 ± <2^(-62)]; dctAccuracy = bits 64; getAccuracy rEd = bits 27
chebDivideDCT: acGuide = bits 25, minQ = [17.00000786783493822440505 ± <2^(-21)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 72
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [5.88235021874349588812560414898e-2 ± <2^(-72)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [2.64126449489387302094893255069e-21 ± <2^(-68)]; dctAccuracy = bits 71; getAccuracy rEd = bits 29
chebDivideDCT: acGuide = bits 25, minQ = [26.0000007189810276031494140625 ± <2^(-18)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 76
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [3.84615373979570891699880212578e-2 ± <2^(-76)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [2.67126712130106865957538897207e-22 ± <2^(-71)]; dctAccuracy = bits 75; getAccuracy rEd = bits 28
chebDivideDCT: acGuide = bits 25, minQ = [37.0000464953482151031494140625 ± <2^(-18)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 73
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [2.70269930640688183496993363982e-2 ± <2^(-73)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [4.97235451532348144324005385078e-21 ± <2^(-67)]; dctAccuracy = bits 71; getAccuracy rEd = bits 28
chebDivideDCT: acGuide = bits 25, minQ = [50.000106938321550842374563 ± <2^(-20)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 75
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [1.99999572247628659042969662469e-2 ± <2^(-75)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [9.08529828502813971053602165504e-22 ± <2^(-69)]; dctAccuracy = bits 74; getAccuracy rEd = bits 32
chebDivideDCT: acGuide = bits 25, minQ = [65.0000309981405735015869140625 ± <2^(-17)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 73
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [1.5384608047780877948606206731e-2 ± <2^(-73)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [6.28468724070681510776726578314e-21 ± <2^(-67)]; dctAccuracy = bits 72; getAccuracy rEd = bits 29
chebDivideDCT: acGuide = bits 25, minQ = [82.00010312361700925976038 ± <2^(-20)]
chebDivideDCT: tryWithDegree: d = 16
chebDivideDCT: tryWithDegree: d = 16; getAccuracy rCd = bits 75
chebDivideDCT: tryWithDegree: d = 16; rCMaxNorm = [1.21951066145914157290635119666e-2 ± <2^(-75)]
chebDivideDCT: tryWithDegree: d = 16; maxDifferenceC = [1.51237124238467799960007259843e-21 ± <2^(-69)]; dctAccuracy = bits 74; getAccuracy rEd = bits 33
computing integrate  (sin(10x)+cos(7pi*x))/(100x^2+1) over [-1,1]
result = [3.49198939760250459925178860472e-2 ± <2^(-20)]
accuracy: bits 20
precision = Precision 720
	Command being timed: "aern2-fnreps-ops integrate rungeSC lpoly 20"
	User time (seconds): 3.57
	System time (seconds): 0.01
	Percent of CPU this job got: 99%
	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:03.59
	Average shared text size (kbytes): 0
	Average unshared data size (kbytes): 0
	Average stack size (kbytes): 0
	Average total size (kbytes): 0
	Maximum resident set size (kbytes): 12616
	Average resident set size (kbytes): 0
	Major (requiring I/O) page faults: 0
	Minor (reclaiming a frame) page faults: 909
	Voluntary context switches: 1
	Involuntary context switches: 43
	Swaps: 0
	File system inputs: 0
	File system outputs: 24
	Socket messages sent: 0
	Socket messages received: 0
	Signals delivered: 0
	Page size (bytes): 4096
	Exit status: 0
